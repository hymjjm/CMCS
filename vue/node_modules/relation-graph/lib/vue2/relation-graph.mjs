(function(){ try {var elementStyle = document.createElement('style'); elementStyle.appendChild(document.createTextNode("@charset \"UTF-8\";.c-mini-graph[data-v-2027a1ff]{height:100px;width:100px;position:absolute;margin-left:60px;margin-top:100px;z-index:999}.c-fixedLayout[data-v-2027a1ff]{position:fixed;top:100px}.c-mini-canvas[data-v-2027a1ff]{background-color:#aacbff;border:#7BA8FF solid 1px;opacity:.8;position:relative}.c-mini-view[data-v-2027a1ff]{background-color:#f5a565;border:#C03639 solid 1px;opacity:.5;color:#fff;font-size:14px;text-align:center;display:flex;align-items:center;justify-content:center;position:absolute}.c-mini-node[data-v-2027a1ff]{position:absolute;width:2px;height:2px;background-color:#000;border-radius:1px}.rg-icon[data-v-d4dbbf7e]{width:16px;height:16px;vertical-align:-3px;fill:currentColor;overflow:hidden}.c-mini-toolbar[data-v-d4dbbf7e]{width:44px;position:absolute;margin-top:170px;margin-right:10px;z-index:999;border:#bbbbbb solid 1px;background-color:#fff;box-shadow:0 0 8px #ccc;box-sizing:border-box}.c-fixedLayout[data-v-d4dbbf7e]{position:fixed;top:100px}.c-mb-button[data-v-d4dbbf7e]{height:44px;width:42px;margin-top:0;background-color:#fff;border-top:#efefef solid 1px;opacity:1;text-align:center;padding-top:3px;cursor:pointer;color:#999;font-size:18px;float:left;box-sizing:border-box;line-height:21px}.c-mb-button .c-mb-text[data-v-d4dbbf7e]{display:inline-block;height:14px;width:42px;font-size:12px;line-height:12px;margin-top:24px;margin-left:-28px;position:absolute;color:#262626}.c-mb-button-on[data-v-d4dbbf7e]{background-color:#2e74b5;border-top:#2E4E8F solid 1px;color:#fff}.c-mb-button[data-v-d4dbbf7e]:hover{background-color:#2e4e8f;border-top:#2E4E8F solid 1px;color:#fff}.c-mb-button:hover .c-mb-text[data-v-d4dbbf7e],.c-mb-button-on .c-mb-text[data-v-d4dbbf7e]{color:#fff}.c-mb-button .c-mb-child-panel[data-v-d4dbbf7e]{height:46px;position:absolute;margin-top:-26px;background-color:#fff;display:none;border:#bbbbbb solid 1px;box-shadow:0 0 8px #ccc;box-sizing:border-box}.c-mb-button:hover .c-mb-child-panel[data-v-d4dbbf7e]{display:block}.c-mb-button .c-mb-button[data-v-d4dbbf7e]{height:44px;width:42px;margin:0;border:none}.c-mb-button-c .c-mb-text[data-v-d4dbbf7e]{color:#262626!important}.c-mb-button-c:hover .c-mb-text[data-v-d4dbbf7e],.c-mb-button-on .c-mb-text[data-v-d4dbbf7e]{color:#fff!important}.c-loading-icon[data-v-d4dbbf7e]{animation:turn-data-v-d4dbbf7e 1s linear infinite}@keyframes turn-data-v-d4dbbf7e{0%{-webkit-transform:rotate(0deg)}25%{-webkit-transform:rotate(90deg)}50%{-webkit-transform:rotate(180deg)}75%{-webkit-transform:rotate(270deg)}to{-webkit-transform:rotate(360deg)}}.relation-graph .rel-toolbar{position:absolute;z-index:300;background-color:#dcdcdc33;color:#999;box-shadow:0 0 2px #ccc;box-sizing:border-box;border-radius:5px;padding:3px}.relation-graph .rel-toolbar .rg-icon{flex-grow:1;width:16px;height:16px;fill:currentColor;overflow:hidden}.relation-graph .rel-toolbar .c-mb-button svg{margin:auto}.relation-graph .rel-toolbar .c-mb-button-on{color:#2e74b5}.relation-graph .rel-toolbar .c-mb-button:hover{background-color:#dcdcdc80}.relation-graph .rel-toolbar .c-loading-icon{animation:turn 1s linear infinite}.relation-graph .rel-toolbar .c-current-zoom{margin-top:0;height:20px;color:#262626;font-size:10px;text-align:center;line-height:20px;border-radius:3px}.relation-graph .rel-toolbar .c-mb-button{height:40px;margin-top:0;opacity:1;text-align:center;padding-top:3px;cursor:pointer;font-size:18px;box-sizing:border-box;line-height:21px;display:flex;align-items:center;justify-items:center;border-radius:3px}.relation-graph .rel-toolbar-v{width:45px}.relation-graph .rel-toolbar-h{height:45px}.relation-graph .rel-toolbar-h .c-mb-button{width:40px;height:100%;float:left}.relation-graph .rel-toolbar-h .c-current-zoom{width:40px;height:100%;float:left;line-height:40px}.relation-graph .rel-toolbar-h-right{right:15px}.relation-graph .rel-toolbar-h-left{left:15px}.relation-graph .rel-toolbar-h-center{left:calc((100% - 260px)/2)}.relation-graph .rel-toolbar-v-top{top:15px}.relation-graph .rel-toolbar-v-bottom{bottom:15px}.relation-graph .rel-toolbar-v-center{top:calc((100% - 260px)/2)}.relation-graph{box-sizing:border-box;position:relative}.relation-graph .rel-map svg.rg-icon{height:100%;width:100%}.relation-graph .rel-lines-svg{overflow:visible;width:10px;height:10px;position:absolute;left:0;top:0}.relation-graph .rel-linediv{overflow:visible;position:absolute;z-index:40;width:100%;top:0;left:0;--stroke: url(#lineStyle);--markerEnd: url(#arrow-default);--markerStart: url(#start-arrow-default);--markerEndChecked: url(#arrow-checked);--markerStartChecked: url(#start-arrow-checked)}.relation-graph .rel-linediv svg{overflow:visible}.relation-graph .rel-linediv-el-lines{z-index:60}.relation-graph .rel-lines-svg-el-lines{overflow:visible;width:10px;height:10px;position:absolute;left:0;top:0}.relation-graph .rel-map{background-color:#fff;overflow:hidden;cursor:default;user-select:none;opacity:.01;transition:none}.relation-graph .rel-map-ready{opacity:1;transition:opacity .5s ease}.relation-graph .rel-map-background-norepeat{background-repeat:no-repeat;background-position:right bottom}.relation-graph .rel-nodediv-for-webkit{position:absolute;width:100%;top:0;left:0;z-index:50}.relation-graph .rel-map-canvas{position:relative;top:0;left:0;border:0px;z-index:3;overflow:visible}.relation-graph .rel-canvas-slot{overflow:visible}.relation-graph .rel-canvas-slot-behind{z-index:30;overflow:visible;position:absolute;top:0;left:0}.relation-graph .rel-canvas-slot-above{z-index:70;overflow:visible;position:absolute;top:0;left:0}.relation-graph .rel-map ::v-deep img{-webkit-user-drag:none;-webkit-user-select:none}.relation-graph .c-rg-line-text{fill:#888;font-size:12px;paint-order:stroke}.relation-graph .c-rg-line-text-checked{stroke:#fd8b374d;stroke-width:2}.relation-graph .c-rg-line{fill-rule:nonzero;stroke-linecap:round}.relation-graph .rg-line-dashtype-1{stroke-dasharray:2,2,2;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-2{stroke-dasharray:5,5,5;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-3{stroke-dasharray:9,9,9;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-4{stroke-dasharray:5,5,15;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}@keyframes ACTRGLineChecked{0%{stroke-dashoffset:352px;stroke-dasharray:5,5,5}50%{stroke-dasharray:5,5,5;stroke-dashoffset:3px}to{stroke-dashoffset:352px;stroke-dasharray:5,5,5}}@keyframes rg-line-anm2{0%{stroke-dashoffset:0;stroke-dasharray:4,4,4}to{stroke-dashoffset:10px;stroke-dasharray:20,20,20}}@keyframes rg-line-anm3{0%{stroke-opacity:1}50%{stroke-opacity:.2}to{stroke-opacity:1}}@keyframes rg-line-anm4{0%{stroke-dasharray:0,100%}to{stroke-dasharray:100%,0}}.relation-graph .rg-line-anm-1{animation:ACTRGLineChecked 10s infinite}.relation-graph .rg-line-anm-2{animation:rg-line-anm2 3s infinite}.relation-graph .rg-line-anm-3{animation:rg-line-anm3 1s infinite}.relation-graph .rg-line-anm-4{animation:rg-line-anm4 3s infinite}.relation-graph .c-rg-line-checked{z-index:100}.relation-graph .c-rg-line-checked-bg{stroke:#fd8b374d;stroke-linecap:round}@keyframes deform1{0%{stroke-dashoffset:0}to{stroke-dashoffset:100%}}.relation-graph .rg-icon{width:19px;height:19px;vertical-align:0px;fill:currentColor;overflow:hidden}.relation-graph .el-icon-remove,.relation-graph .el-icon-circle-plus{cursor:pointer}.relation-graph .relation-graph-node{position:absolute}.relation-graph .rel-node-peel{clear:both;padding:8px;position:absolute;font-size:14px}.relation-graph .rel-node-peel-checked{z-index:100}.relation-graph .rel-node{text-align:center}.relation-graph .rg-center-items{display:flex;place-items:center}.relation-graph .rel-node-shape-0{width:80px;height:80px;border-radius:50%}.relation-graph .rel-node-shape-1{border-radius:5px}.relation-graph .c-node-text{height:100%;width:100%;display:flex;align-items:center;justify-content:center}.relation-graph .rel-node-shape-1 .c-node-text{padding-left:5px;padding-right:5px}.relation-graph .rel-node-type-button{border-radius:25px;color:#00f;cursor:pointer}.relation-graph .rel-node-checked{transition:background-color .2s ease,outline .2s ease,color .2s ease,-webkit-box-shadow .2s ease;box-shadow:0 0 0 8px #fd8b374d}.relation-graph .rel-node-dragging{z-index:400}.relation-graph .rel-node-selected{border:#025098 solid 2px;border-radius:5px}.relation-graph .rel-node-flashing{animation:ACTRGNodeFlashing 2s infinite}.relation-graph .rel-node-vtree-2{transform-origin:0 0;transform:rotate(30deg) translate(0)}.relation-graph .rel-node-vtree{width:130px;height:45px;text-align:left}.relation-graph .c-btn-open-close{position:absolute;height:100%;width:19px;display:flex;align-items:center;justify-content:center;user-select:none;pointer-events:none;cursor:pointer}.relation-graph .c-btn-open-close span{width:19px;height:19px;display:inline-block;text-align:center;border-radius:15px;color:#fff;cursor:pointer;font-size:19px;line-height:16px;background-size:100% 100%;pointer-events:all}.relation-graph .c-expanded{background-image:url(data:image/svg+xml;%20charset=utf8,%3Csvg%20t=%221606310217820%22%20viewBox=%220%200%201024%201024%22%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20p-id=%223373%22%20width=%2232%22%20height=%2232%22%3E%3Cpath%20d=%22M853.333333%20480H544V170.666667c0-17.066667-14.933333-32-32-32s-32%2014.933333-32%2032v309.333333H170.666667c-17.066667%200-32%2014.933333-32%2032s14.933333%2032%2032%2032h309.333333V853.333333c0%2017.066667%2014.933333%2032%2032%2032s32-14.933333%2032-32V544H853.333333c17.066667%200%2032-14.933333%2032-32s-14.933333-32-32-32z%22%20p-id=%223374%22%20fill=%22white%22%3E%3C/path%3E%3C/svg%3E)}.relation-graph .c-collapsed{background-image:url(data:image/svg+xml;%20charset=utf8,%3Csvg%20t=%221606310454619%22%20class=%22icon%22%20viewBox=%220%200%201024%201024%22%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20p-id=%223662%22%20width=%22128%22%20height=%22128%22%3E%3Cpath%20d=%22M853.333333%20554.666667H170.666667c-23.466667%200-42.666667-19.2-42.666667-42.666667s19.2-42.666667%2042.666667-42.666667h682.666666c23.466667%200%2042.666667%2019.2%2042.666667%2042.666667s-19.2%2042.666667-42.666667%2042.666667z%22%20p-id=%223663%22%20fill=%22white%22%3E%3C/path%3E%3C/svg%3E)}.relation-graph .c-expand-positon-left{margin-top:-8px;margin-left:-25px}.relation-graph .c-expand-positon-right{height:100%;width:100%;justify-content:center}.relation-graph .c-expand-positon-right span{margin-top:-18px;margin-right:-18px;margin-left:100%}.relation-graph .c-expand-positon-bottom{height:100%;width:100%;margin-top:7px;margin-left:-8px;align-items:flex-end;justify-content:center}.relation-graph .c-expand-positon-top{height:18px;width:100%;margin-top:-20px;margin-left:-6px;align-items:flex-end;justify-content:center}@keyframes ACTRGNodeInit{0%{box-shadow:0 0 15px #fd8b37}50%{box-shadow:0 0 1px #2e4e8f}to{box-shadow:0 0 15px #fd8b37}to{box-shadow:0 0 15px #fd8b37}}@keyframes ACTRGNodeFlashing{0%{box-shadow:0 0 15px #fd8b37}40%{box-shadow:0 0 1px #2e4e8f}70%{box-shadow:0 0 8px #fd8b37}to{box-shadow:0 0 #fd8b37}}.relation-graph .rel-diy-node{padding:0}.relation-graph .c-setting-panel{--height: 300px;--width: 200px;width:300px;height:200px;position:absolute;margin-left:10px;margin-top:5px;font-size:12px;color:#3a5bb2;padding:60px 10px 10px;overflow:hidden;box-shadow:0 0 5px #999;border-radius:5px;z-index:1000;background-color:#fff;border:#999999 solid 1px}.relation-graph .c-setting-panel-button{height:35px;width:35px;font-size:8px;line-height:35px;text-align:center;border-radius:50%;position:absolute;margin-left:25px;margin-top:20px;background-color:#3a5bb2;color:#fff;cursor:pointer;z-index:1001;box-shadow:0 0 8px #999}.relation-graph .c-setting-panel-button:hover{box-shadow:0 0 20px #ffa20a;border:#ffffff solid 1px;color:#ffa20a;-moz-transform:rotate(-89deg) translateX(-190px);animation-timing-function:linear;animation:flashButton 2s infinite}.relation-graph .c-fixedLayout{position:fixed;top:125px}@keyframes flashButton{0%{box-shadow:0 0 8px #2e4e8f}30%{box-shadow:0 0 20px #ffa20a}to{box-shadow:0 0 8px #2e4e8f}}.relation-graph .c-debug-tools-row{text-align:left}.relation-graph .rel-operate{position:absolute;top:0;left:0;width:100%;height:100%;z-index:180}.relation-graph .rel-selection{position:absolute;background-color:#0e7a7b4d;border:rgb(14,122,123) solid 1px}.relation-graph .rel-graph-loading{position:absolute;z-index:200;left:0;top:0;height:100%;width:100%;background-color:#fff}@keyframes turn{0%{-webkit-transform:rotate(0deg)}25%{-webkit-transform:rotate(90deg)}50%{-webkit-transform:rotate(180deg)}75%{-webkit-transform:rotate(270deg)}to{-webkit-transform:rotate(360deg)}}.relation-graph .rel-graph-loading .c-graph-loading-icon{width:16px;height:16px;vertical-align:-3px;fill:currentColor;overflow:hidden;animation:turn 1s linear infinite}.relation-graph .rel-graph-loading .rel-graph-loading-message{position:absolute;width:200px;height:30px;line-height:30px;text-align:center;left:calc((100% - 200px)/2);top:calc((100% - 30px)/2);border-radius:5px;background-color:#00000080;color:#fff}.relation-graph .rel-graph-loading-hide{display:none}@keyframes slowHide{0%{opacity:1}to{opacity:0;display:none}}.relation-graph .rel-easy-view{overflow:visible;height:100%;width:100%;background-color:transparent;position:absolute;left:0;top:0}.relation-graph .rel-easy-view canvas{opacity:0}.relation-graph .rel-easy-view-active canvas{opacity:1}")); document.head.appendChild(elementStyle);} catch(e) {console.error('vite-plugin-css-injected-by-js', e);} })();var de = Object.defineProperty, fe = Object.defineProperties;
var ue = Object.getOwnPropertyDescriptors;
var Lt = Object.getOwnPropertySymbols;
var pe = Object.prototype.hasOwnProperty, ge = Object.prototype.propertyIsEnumerable;
var ft = (e, i, t) => i in e ? de(e, i, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[i] = t, kt = (e, i) => {
  for (var t in i || (i = {}))
    pe.call(i, t) && ft(e, t, i[t]);
  if (Lt)
    for (var t of Lt(i))
      ge.call(i, t) && ft(e, t, i[t]);
  return e;
}, St = (e, i) => fe(e, ue(i));
var _ = (e, i, t) => (ft(e, typeof i != "symbol" ? i + "" : i, t), t);
var w = (e, i, t) => new Promise((o, n) => {
  var s = (r) => {
    try {
      l(t.next(r));
    } catch (c) {
      n(c);
    }
  }, a = (r) => {
    try {
      l(t.throw(r));
    } catch (c) {
      n(c);
    }
  }, l = (r) => r.done ? o(r.value) : Promise.resolve(r.value).then(s, a);
  l((t = t.apply(e, i)).next());
});
import K from "vue";
import X from "screenfull";
import Yt from "html2canvas";
const Xt = "2.1.35";
(function(e) {
  var i, t, o, n, s, a, l = '<svg><symbol id="icon-iconset0444" viewBox="0 0 1024 1024"><path d="M960 682.666667l-106.666667 0C844.8 569.6 763.733333 42.666667 64 42.666667 51.2 42.666667 42.666667 51.2 42.666667 64c0 12.8 8.533333 21.333333 21.333333 21.333333 219.733333 0 377.6 106.666667 465.066667 315.733333 51.2 123.733333 64 236.8 66.133333 281.6L490.666667 682.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333 0 6.4 2.133333 10.666667 6.4 14.933333l234.666667 256c4.266667 4.266667 8.533333 6.4 14.933333 6.4 6.4 0 10.666667-2.133333 14.933333-6.4l234.666667-256c4.266667-4.266667 6.4-8.533333 6.4-14.933333C981.333333 691.2 972.8 682.666667 960 682.666667zM725.333333 928 539.733333 725.333333 618.666667 725.333333c12.8 0 21.333333-8.533333 21.333333-21.333333l0-21.333333c-4.266667-87.466667-38.4-396.8-273.066667-554.666667C755.2 251.733333 804.266667 588.8 810.666667 682.666667l0 21.333333c0 12.8 8.533333 21.333333 21.333333 21.333333l78.933333 0L725.333333 928z"  ></path></symbol><symbol id="icon-iconset0445" viewBox="0 0 1024 1024"><path d="M974.933333 305.066667l-234.666667-256C736 44.8 731.733333 42.666667 725.333333 42.666667c-6.4 0-10.666667 2.133333-14.933333 6.4l-234.666667 256C471.466667 309.333333 469.333333 313.6 469.333333 320c0 12.8 8.533333 21.333333 21.333333 21.333333l104.533333 0c-2.133333 44.8-14.933333 157.866667-66.133333 281.6C441.6 832 283.733333 938.666667 64 938.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333 0 12.8 8.533333 21.333333 21.333333 21.333333 699.733333 0 780.8-526.933333 789.333333-640l106.666667 0c12.8 0 21.333333-8.533333 21.333333-21.333333C981.333333 313.6 979.2 309.333333 974.933333 305.066667zM832 298.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333l0 21.333333c-6.4 93.866667-55.466667 430.933333-443.733333 554.666667 234.666667-157.866667 268.8-467.2 273.066667-554.666667l0-21.333333c0-12.8-8.533333-21.333333-21.333333-21.333333l-78.933333 0L725.333333 96l185.6 202.666667L832 298.666667z"  ></path></symbol><symbol id="icon-yuanquanfenxiang" viewBox="0 0 1024 1024"><path d="M751.148705 578.773799c-61.987796 0-117.066229 30.121018-151.388942 76.488045L398.287145 536.382317c1.991354-10.171664 3.046383-20.673855 3.046383-31.419594 0-18.776645-3.196809-36.817534-9.058306-53.621245l193.486736-107.492176c31.949666 58.566884 94.104261 98.391914 165.386748 98.391914 103.803157 0 188.254571-84.450391 188.254571-188.254571S854.951863 65.73105 751.148705 65.73105c-103.804181 0-188.255595 84.450391-188.255595 188.254571 0 14.246469 1.600451 28.125571 4.613064 41.4746L368.032074 406.279167c-29.841655-39.193651-76.976162-64.544015-129.927141-64.544015-90.004897 0-163.228595 73.223698-163.228595 163.228595 0 90.003873 73.223698 163.228595 163.228595 163.228595 60.882626 0 114.078175-33.510208 142.134161-83.049484L575.173808 700.16452c-7.925507 20.788465-12.280698 43.325761-12.280698 66.86385 0 103.803157 84.450391 188.254571 188.255595 188.254571 103.803157 0 188.254571-84.450391 188.254571-188.254571S854.951863 578.773799 751.148705 578.773799zM751.148705 116.89636c75.590606 0 137.089261 61.498656 137.089261 137.089261s-61.498656 137.089261-137.089261 137.089261c-75.591629 0-137.090285-61.498656-137.090285-137.089261S675.557076 116.89636 751.148705 116.89636zM238.105956 617.026008c-61.791321 0-112.063285-50.27094-112.063285-112.063285 0-61.791321 50.27094-112.063285 112.063285-112.063285s112.063285 50.27094 112.063285 112.063285C350.168218 566.755068 299.897278 617.026008 238.105956 617.026008zM751.148705 904.117632c-75.591629 0-137.090285-61.498656-137.090285-137.089261s61.498656-137.089261 137.090285-137.089261c75.590606 0 137.089261 61.498656 137.089261 137.089261S826.739311 904.117632 751.148705 904.117632z"  ></path></symbol><symbol id="icon-hj2" viewBox="0 0 1024 1024"><path d="M963.66 256.607c0-0.244 0-0.607-0.126-0.851 0-0.369 0-0.614-0.119-0.978 0-0.369-0.119-0.733-0.119-1.104 0-0.244 0-0.487-0.126-0.725 0-0.369-0.119-0.859-0.244-1.222 0-0.244-0.119-0.369-0.119-0.613-0.126-0.365-0.126-0.852-0.245-1.216 0-0.244-0.126-0.369-0.126-0.613-0.119-0.365-0.244-0.734-0.364-1.222-0.126-0.244-0.126-0.49-0.244-0.609l-0.369-1.095c-0.119-0.245-0.119-0.49-0.244-0.734-0.121-0.369-0.245-0.613-0.365-0.978-0.126-0.244-0.244-0.613-0.369-0.851-0.119-0.244-0.238-0.613-0.364-0.859-0.119-0.364-0.244-0.607-0.364-0.977l-0.371-0.734c-0.119-0.364-0.364-0.725-0.487-0.971-0.119-0.245-0.244-0.371-0.364-0.614-0.244-0.364-0.369-0.733-0.614-1.097-0.119-0.126-0.244-0.369-0.364-0.487l-0.733-1.097c-0.119-0.126-0.244-0.369-0.365-0.487-0.244-0.369-0.487-0.733-0.733-0.978-0.126-0.244-0.244-0.369-0.487-0.613-0.245-0.238-0.49-0.607-0.734-0.851-0.244-0.245-0.487-0.49-0.607-0.734-0.244-0.244-0.369-0.487-0.614-0.733-0.851-0.972-1.829-1.83-2.681-2.682-0.245-0.244-0.49-0.369-0.734-0.614-0.244-0.244-0.487-0.487-0.733-0.607-0.245-0.244-0.614-0.487-0.859-0.733-0.238-0.121-0.364-0.365-0.607-0.49-0.365-0.244-0.734-0.487-0.978-0.733-0.119-0.119-0.364-0.244-0.487-0.365l-1.097-0.733c-0.119-0.119-0.364-0.244-0.487-0.364-0.365-0.244-0.734-0.369-1.097-0.614-0.244-0.119-0.369-0.244-0.613-0.364-0.365-0.126-0.734-0.369-0.972-0.487l-0.734-0.369c-0.369-0.121-0.613-0.245-0.977-0.365-0.244-0.126-0.614-0.244-0.859-0.369-0.244-0.119-0.607-0.238-0.851-0.364-0.365-0.119-0.609-0.244-0.978-0.364-0.244-0.126-0.487-0.126-0.733-0.245l-1.097-0.369c-0.244-0.119-0.487-0.119-0.609-0.244-0.369-0.119-0.733-0.244-1.22-0.364-0.245 0-0.371-0.126-0.614-0.126-0.364-0.119-0.851-0.244-1.216-0.244-0.244 0-0.487-0.121-0.613-0.121-0.364-0.126-0.852-0.126-1.222-0.244-0.244 0-0.482-0.126-0.725-0.126-0.369 0-0.734-0.119-1.104-0.119-0.364 0-0.607 0-0.978-0.126-0.244 0-0.607 0-0.851-0.119h-242.407c-21.604 0-39.062 17.456-39.062 39.062 0 21.604 17.458 39.055 39.062 39.055h146.102l-3.171 3.177-217.27 217.265 0.369 0.369-49.676 49.676-155.87-155.87c-7.694-7.689-17.827-11.472-27.953-11.472-10.13-0.126-20.263 3.659-27.952 11.472l-282.446 282.322c-15.258 15.258-15.258 40.041 0 55.298 15.258 15.258 40.033 15.258 55.291 0l255.108-255.11 155.746 155.751c7.813 7.815 17.945 11.593 28.076 11.474 10.126 0.119 20.382-3.659 28.070-11.474l182.964-182.969c0.734-0.734 1.347-1.342 1.956-2.075l111.564-111.564v146.109c0 21.604 17.451 39.060 39.055 39.060s39.062-17.456 39.062-39.060v-235.085c0-0.244 0.126-0.49 0.126-0.614 0-0.244 0.119-0.487 0.119-0.733 0-0.364 0.119-0.734 0.119-1.097s0-0.607 0.126-0.977c0-0.245 0-0.609 0.119-0.852-0.122-1.466-0.122-2.807-0.122-4.030v0zM963.66 256.607z"  ></path></symbol><symbol id="icon-circleyuanquan" viewBox="0 0 1024 1024"><path d="M150.1184 150.1184C250.2656 50.0736 370.8928 0 512 0c141.1072 0 261.7344 50.0736 361.8816 150.1184C973.9264 250.2656 1024 370.8928 1024 512c0 141.2096-50.0736 261.8368-150.1184 361.8816C773.7344 973.9264 653.1072 1024 512 1024c-141.1072 0-261.7344-50.0736-361.8816-150.1184C50.0736 773.8368 0 653.2096 0 512 0 370.8928 50.0736 250.2656 150.1184 150.1184zM512 41.8816c-85.2992 0-164.1472 20.8896-236.3392 62.7712C203.4688 146.432 146.432 203.4688 104.6528 275.6608 62.7712 347.9552 41.8816 426.7008 41.8816 512c0 129.6384 45.9776 240.4352 137.8304 332.288C271.5648 936.2432 382.3616 982.1184 512 982.1184c129.6384 0 240.4352-45.8752 332.288-137.8304C936.2432 752.4352 982.1184 641.6384 982.1184 512c0-129.6384-45.9776-240.3328-137.8304-332.288C752.4352 87.7568 641.6384 41.8816 512 41.8816zM512 256c-36.1472 0-70.144 7.0656-102.1952 20.8896C377.856 290.9184 349.4912 309.3504 324.9152 332.288c-22.9376 24.576-41.472 52.9408-55.3984 84.8896S248.6272 483.328 248.6272 519.3728c0 36.1472 6.9632 70.144 20.8896 102.1952s32.4608 60.3136 55.3984 84.8896C349.4912 729.4976 377.856 747.9296 409.8048 761.856 441.856 775.7824 475.8528 782.7456 512 782.7456c36.1472 0 70.144-6.9632 102.1952-20.8896C646.144 747.9296 674.5088 729.4976 699.0848 706.4576c22.9376-24.576 41.472-52.9408 55.3984-84.8896s20.8896-66.048 20.8896-102.1952c0-36.0448-6.9632-70.144-20.8896-102.1952S722.0224 356.9664 699.0848 332.288C674.5088 309.3504 646.144 290.9184 614.1952 276.8896 582.144 263.0656 548.1472 256 512 256z"  ></path></symbol><symbol id="icon-bhjlink" viewBox="0 0 1024 1024"><path d="M901.920618 465.785468c-50.993571 0-94.522533 32.698367-110.688942 78.273953L702.244627 544.059421c1.764013-10.590222 2.890616-21.423121 2.890616-32.694527 0-72.177856-40.480145-134.923579-99.898281-166.857822l34.099901-112.776268c8.829281 2.126492 18.1347 3.327588 27.724265 3.327588 64.833817 0 117.472367-52.597848 117.472367-117.589097C784.532727 52.594008 731.894177 0 667.06036 0c-64.911381 0-117.509229 52.594008-117.509229 117.470063 0 49.305587 30.248562 91.349307 73.177745 108.842756l-33.419485 110.692013c-22.548956-9.588797-47.462473-14.807112-73.540224-14.807112-49.18732 0-93.841349 18.658451-127.540374 49.309426L213.348053 196.583401l-1.886119 2.008226c19.940183-21.103648 32.256788-49.588197 32.256788-81.003297 0-64.872983-52.517212-117.470063-117.470063-117.470063-64.913685 0-117.511533 52.59708-117.511533 117.470063 0 65.034255 52.59708 117.592169 117.511533 117.592169 31.412796 0 59.898881-12.358075 80.921125-32.335888l-6.179038 6.056931 174.960609 174.879973c-30.729308 33.66293-49.506025 78.47516-49.506025 127.661712 0 43.008283 14.401627 82.685138 38.593258 114.501114l-149.845117 120.999625c-21.503757-28.044506-55.285722-46.218372-93.357532-46.218372-64.874519 0-117.430897 52.719186-117.430897 117.592169 0 64.833049 52.556378 117.470063 117.430897 117.470063 64.872983 0 117.549163-52.637014 117.549163-117.470063 0-20.541499-5.335813-39.878062-14.602834-56.68956l151.369526-122.203792c34.584487 37.633303 84.29095 61.384123 139.618142 61.384123 28.082136 0 54.602234-6.057699 78.553492-17.091805l52.716114 119.514383c-35.585143 20.222026-59.497236 58.335306-59.497236 102.106945 0 64.912149 52.637014 117.549163 117.592169 117.549163 64.872983 0 117.388659-52.637014 117.388659-117.549163 0-64.833049-52.516444-117.513069-117.388659-117.513069-15.047485 0-29.248673 2.929782-42.446133 7.903885l-52.798286-120.034294c42.807844-24.554878 75.182898-65.518073 88.46253-114.221576l88.222926 0c-1.405374 7.018422-1.96522 14.241123-1.96522 21.743362 0 64.872983 52.557914 117.509997 117.387123 117.509997 64.995089 0 117.596009-52.637014 117.596009-117.509997C1019.508947 518.383316 966.994039 465.785468 901.920618 465.785468L901.920618 465.785468zM901.920618 465.785468"  ></path></symbol><symbol id="icon-lianjie_connecting5" viewBox="0 0 1024 1024"><path d="M801.25952 251.74016l-28.9792-28.99968-150.79424 150.8352-35.1232-35.10272-99.14368 99.16416 99.14368 99.16416 99.16416-99.16416-35.10272-35.1232zM487.19872 476.8768l-29.94176 29.94176-19.61984-19.61984-99.16416 99.16416 35.10272 35.1232-150.8352 150.79424 28.95872 28.95872 150.8352-150.79424 35.10272 35.10272 99.14368-99.14368-19.61984-19.64032 29.96224-29.96224-59.92448-59.92448z m-15.48288 44.4416l15.4624-15.4624 30.98624 30.98624-15.4624 15.44192-30.98624-30.96576z" fill="" ></path></symbol><symbol id="icon-xiazai" viewBox="0 0 1024 1024"><path d="M840.5 900.3h-657c-16.5 0-29.9 13.4-29.9 29.9s13.4 29.9 29.9 29.9h657.1c16.5 0 29.9-13.4 29.9-29.9-0.1-16.6-13.5-29.9-30-29.9zM631.5 123.7V541.8H763.1L512 769.9l-251.2-228h131.7V123.7h239m0-59.7h-239c-33 0-59.7 26.7-59.7 59.7v358.4H183.5c-26.6 0-39.9 32.2-21.1 51l328.5 298.2c5.8 5.8 13.5 8.7 21.1 8.7s15.3-2.9 21.1-8.7l328.5-298.2c18.8-18.8 5.5-51-21.1-51H691.2V123.7c0-33-26.7-59.7-59.7-59.7z"  ></path></symbol><symbol id="icon-ico_reset" viewBox="0 0 1024 1024"><path d="M925.97087933 277.33133334a479.997 479.997 0 1 0 54.33566 255.9984H916.05094133a415.9974 415.9974 0 1 1-64.191599-255.9984h74.047537z"  ></path><path d="M978.64255033 61.01268534L725.33213333 371.09074734h297.59814z"  ></path></symbol><symbol id="icon-fangda" viewBox="0 0 1024 1024"><path d="M768 448a320 320 0 1 0-320 320 320 320 0 0 0 320-320z m64 0A384 384 0 1 1 448 64a384 384 0 0 1 384 384z"  ></path><path d="M681.28 726.72a32 32 0 0 1 45.44-45.44l160 160a32 32 0 0 1-45.44 45.44zM320 480a32 32 0 0 1 0-64h256a32 32 0 0 1 0 64z"  ></path><path d="M480 576a32 32 0 0 1-64 0V320a32 32 0 0 1 64 0z"  ></path></symbol><symbol id="icon-zidong" viewBox="0 0 1024 1024"><path d="M131.3 363.3c-19.2 47.3-28.9 97.3-28.9 148.7 0 51.3 9.7 101.3 28.9 148.7 7 17.2 15.1 33.8 24.3 49.7l15.8-49.1 42.8 13.8-39.8 123.8-42.8-13.9-80.9-26 13.8-42.8 52.3 16.8c-98-168.4-74.8-387.9 69.4-532.1C342.4 44.7 586.9 30.5 759.1 158.3l-32.2 32.2c-25.1-18-52.1-32.9-80.9-44.6-47.3-19.2-97.3-28.9-148.7-28.9-51.3 0-101.3 9.7-148.7 28.9-49 19.9-92.9 49.1-130.6 86.8s-66.9 81.7-86.7 130.6z m828.3-60.2l13.8-42.8-80.9-26-42.8-13.8-39.8 123.8 42.8 13.8 15-46.7c9.8 16.6 18.4 34 25.8 52.1 19.2 47.3 28.9 97.3 28.9 148.7 0 51.3-9.7 101.3-28.9 148.7-19.9 49-49.1 92.9-86.8 130.6C768.9 829 725 858.2 676 878.1c-47.3 19.2-97.3 28.9-148.7 28.9-51.3 0-101.3-9.7-148.7-28.9-28.8-11.7-55.9-26.6-80.9-44.6l-32.2 32.2c126.3 93.7 382.6 147.7 572.9-42.6 145.8-145.8 167.9-368.6 66.1-537.7l55.1 17.7zM474 241.2L295 730.4h64.8l50.5-148.2h195.3l54 148.2h70.3L539.6 241.2H474z m-45.9 288.3L479.8 386c11-30.9 19.4-62.1 25.4-93.4 6.9 26 17.9 59.9 32.8 101.5l48.2 135.5H428.1z" fill="" ></path></symbol><symbol id="icon-quanping" viewBox="0 0 1024 1024"><path d="M795.5 192H581c-19.6 0-35.6 15.7-36 35.3-0.4 20.3 16.4 36.7 36.7 36.7h128.4L581 393.1c-14 14-14 36.9 0 50.9s36.9 14 50.9 0L760 315.9v129c0 19.6 15.8 35.6 35.3 36 20.2 0.4 36.7-16.4 36.7-36.7V228.5c0-20.1-16.3-36.5-36.5-36.5zM442.2 760H313.8L443 630.9c14-14 14-36.9 0-50.9s-36.9-14-50.9 0L264 708.1V579c0-19.6-15.8-35.6-35.3-36-20.2-0.4-36.7 16.4-36.7 36.7v215.6c0 20.3 16.4 36.7 36.7 36.7H443c19.6 0 35.6-15.7 36-35.3 0.3-20.3-16.5-36.7-36.8-36.7z"  ></path><path d="M838 136c27.6 0 50 22.4 50 50v652c0 27.6-22.4 50-50 50H186c-27.6 0-50-22.4-50-50V186c0-27.6 22.4-50 50-50h652m0-72H186c-16.4 0-32.4 3.2-47.5 9.6-14.5 6.1-27.6 14.9-38.8 26.1-11.2 11.2-20 24.2-26.1 38.8-6.4 15.1-9.6 31.1-9.6 47.5v652c0 16.4 3.2 32.4 9.6 47.5 6.1 14.5 14.9 27.6 26.1 38.8 11.2 11.2 24.2 20 38.8 26.1 15.1 6.4 31.1 9.6 47.5 9.6h652c16.4 0 32.4-3.2 47.5-9.6 14.5-6.1 27.6-14.9 38.8-26.1 11.2-11.2 20-24.2 26.1-38.8 6.4-15.1 9.6-31.1 9.6-47.5V186c0-16.4-3.2-32.4-9.6-47.5-6.1-14.5-14.9-27.6-26.1-38.8-11.2-11.2-24.2-20-38.8-26.1-15.1-6.4-31.1-9.6-47.5-9.6z"  ></path></symbol><symbol id="icon-lianjieliu" viewBox="0 0 1024 1024"><path d="M280.224 425.856h348.608a29.536 29.536 0 1 0 0-59.072H280.224c-52.448 0-93.152-34.304-93.152-73.856s40.704-73.856 93.152-73.856h140.128C432.096 258.816 468.448 288 512 288s79.904-29.184 91.648-68.928h178.08a29.536 29.536 0 1 0 0-59.072h-179.584C588.896 122.784 553.728 96 512 96s-76.896 26.784-90.112 64H280.224C197.184 160 128 218.272 128 292.928s69.184 132.928 152.224 132.928z"  ></path><path d="M895.936 415.2A96 96 0 1 0 800 512c30.656 0 57.632-14.624 75.2-36.992 10.56 12.064 16.832 26.56 16.832 41.92 0 39.552-40.704 73.856-93.152 73.856H306.016A95.584 95.584 0 0 0 224 544a95.68 95.68 0 0 0-95.232 88.352C89.888 656.224 64 695.424 64 740.928c0 74.656 69.184 132.928 152.224 132.928h241.728A95.808 95.808 0 0 0 544 928a96 96 0 1 0 0-192 95.904 95.904 0 0 0-94.272 78.752H216.224c-52.448 0-93.152-34.304-93.152-73.856 0-17.504 8.32-33.792 21.76-46.72A95.808 95.808 0 0 0 224 736a95.68 95.68 0 0 0 95.008-86.144h479.84c83.072 0 152.224-58.272 152.224-132.928 0.032-41.536-21.824-77.568-55.136-101.728z"  ></path></symbol><symbol id="icon-shuaxin" viewBox="0 0 1024 1024"><path d="M512 919.552c-224.768 0-407.552-182.784-407.552-407.552 0-8.704 0.512-17.408 1.024-26.112l71.68 4.608c-0.512 7.168-0.512 14.336-0.512 21.504 0 185.344 150.528 335.872 335.872 335.872 86.528 0 168.448-32.768 230.912-92.16l49.152 52.224C716.288 880.128 616.96 919.552 512 919.552zM919.552 512h-71.68c0-11.776-0.512-23.552-2.048-35.328-17.92-171.52-161.28-300.544-334.336-300.544-67.584 0-132.096 19.968-187.904 57.344L284.16 174.08c67.072-45.568 145.92-69.632 227.84-69.632 209.408 0 384 156.672 405.504 365.056 1.536 13.824 2.048 28.16 2.048 42.496z" fill="#707070" ></path><path d="M140.288 290.816L28.16 491.52c-3.072 5.12 1.024 11.776 6.656 11.776H258.56c6.144 0 9.728-6.144 6.656-11.776L153.6 290.816c-3.072-5.632-10.752-5.632-13.312 0zM870.4 675.84L758.272 475.136c-3.072-5.12 1.024-11.776 6.656-11.776h223.744c6.144 0 9.728 6.144 6.656 11.776L883.712 675.84c-2.56 5.12-10.24 5.12-13.312 0zM270.336 202.24a35.84 35.84 0 1 0 71.68 0 35.84 35.84 0 1 0-71.68 0zM728.576 784.896a35.84 35.84 0 1 0 71.68 0 35.84 35.84 0 1 0-71.68 0z" fill="#707070" ></path></symbol><symbol id="icon-resize-" viewBox="0 0 1024 1024"><path d="M410.816 673.514667L230.997333 853.333333H384v85.333334H85.333333V640h85.333334v153.002667l179.818666-179.84 60.330667 60.373333z m-53.632-256L170.666667 230.997333V384H85.333333V85.333333h298.666667v85.333334h-153.002667l186.517334 186.517333-60.330667 60.330667z m234.666667-45.696L793.002667 170.666667H640V85.333333h298.666667v298.666667h-85.333334v-153.002667l-201.152 201.173334-60.330666-60.373334z m67.029333 226.709333L853.333333 793.002667V640h85.333334v298.666667H640v-85.333334h153.002667l-194.474667-194.453333 60.352-60.352z"  ></path></symbol><symbol id="icon-guanxitu" viewBox="0 0 1024 1024"><path d="M209.003789 401.084632l29.749895-44.948211 107.843369 71.464421-29.749895 44.894316zM682.469053 546.600421l-14.551579-51.846737 124.496842-35.031579 14.551579 51.846737zM315.068632 812.840421l-40.367158-35.678316 85.692631-96.902737 40.421053 35.732211zM597.962105 390.251789l-46.672842-26.947368 43.11579-74.64421 46.672842 26.947368zM615.639579 728.764632l41.121684-34.816 83.536842 98.735157-41.121684 34.816z" fill="#444A5C" ></path><path d="M501.221053 765.305263c-118.568421 0-215.578947-97.010526-215.578948-215.578947s97.010526-215.578947 215.578948-215.578948 215.578947 97.010526 215.578947 215.578948-97.010526 215.578947-215.578947 215.578947z m0-377.263158c-91.621053 0-161.684211 70.063158-161.684211 161.684211s70.063158 161.684211 161.684211 161.68421 161.684211-70.063158 161.68421-161.68421-75.452632-161.684211-161.68421-161.684211zM167.073684 452.715789c-59.284211 0-107.789474-48.505263-107.789473-107.789473s48.505263-107.789474 107.789473-107.789474 107.789474 48.505263 107.789474 107.789474-48.505263 107.789474-107.789474 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894737 53.894737-21.557895 53.894737-53.894737-26.947368-53.894737-53.894737-53.894737zM253.305263 948.547368c-59.284211 0-107.789474-48.505263-107.789474-107.789473s48.505263-107.789474 107.789474-107.789474 107.789474 48.505263 107.789474 107.789474-48.505263 107.789474-107.789474 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894737 53.894737-21.557895 53.894737-53.894737-21.557895-53.894737-53.894737-53.894737zM856.926316 576.673684c-59.284211 0-107.789474-48.505263-107.789474-107.789473s48.505263-107.789474 107.789474-107.789474 107.789474 48.505263 107.789473 107.789474-48.505263 107.789474-107.789473 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894736 53.894737-21.557895 53.894737-53.894736-21.557895-53.894737-53.894737-53.894737zM662.905263 350.315789C592.842105 350.315789 528.168421 291.031579 528.168421 215.578947s59.284211-134.736842 134.736842-134.736842 134.736842 59.284211 134.736842 134.736842-59.284211 134.736842-134.736842 134.736842z m0-215.578947c-43.115789 0-80.842105 37.726316-80.842105 80.842105s37.726316 80.842105 80.842105 80.842106 80.842105-37.726316 80.842105-80.842106-32.336842-80.842105-80.842105-80.842105zM749.136842 921.6c-43.115789 0-80.842105-37.726316-80.842105-80.842105s37.726316-80.842105 80.842105-80.842106 80.842105 37.726316 80.842105 80.842106-37.726316 80.842105-80.842105 80.842105z m0-107.789474c-16.168421 0-26.947368 10.778947-26.947368 26.947369s10.778947 26.947368 26.947368 26.947368 26.947368-10.778947 26.947369-26.947368-10.778947-26.947368-26.947369-26.947369z" fill="#444A5C" ></path></symbol><symbol id="icon-tupian" viewBox="0 0 1024 1024"><path d="M938.666667 553.92V768c0 64.8-52.533333 117.333333-117.333334 117.333333H202.666667c-64.8 0-117.333333-52.533333-117.333334-117.333333V256c0-64.8 52.533333-117.333333 117.333334-117.333333h618.666666c64.8 0 117.333333 52.533333 117.333334 117.333333v297.92z m-64-74.624V256a53.333333 53.333333 0 0 0-53.333334-53.333333H202.666667a53.333333 53.333333 0 0 0-53.333334 53.333333v344.48A290.090667 290.090667 0 0 1 192 597.333333a286.88 286.88 0 0 1 183.296 65.845334C427.029333 528.384 556.906667 437.333333 704 437.333333c65.706667 0 126.997333 16.778667 170.666667 41.962667z m0 82.24c-5.333333-8.32-21.130667-21.653333-43.648-32.917333C796.768 511.488 753.045333 501.333333 704 501.333333c-121.770667 0-229.130667 76.266667-270.432 188.693334-2.730667 7.445333-7.402667 20.32-13.994667 38.581333-7.68 21.301333-34.453333 28.106667-51.370666 13.056-16.437333-14.634667-28.554667-25.066667-36.138667-31.146667A222.890667 222.890667 0 0 0 192 661.333333c-14.464 0-28.725333 1.365333-42.666667 4.053334V768a53.333333 53.333333 0 0 0 53.333334 53.333333h618.666666a53.333333 53.333333 0 0 0 53.333334-53.333333V561.525333zM320 480a96 96 0 1 1 0-192 96 96 0 0 1 0 192z m0-64a32 32 0 1 0 0-64 32 32 0 0 0 0 64z"  ></path></symbol><symbol id="icon-juhejiedian" viewBox="0 0 1024 1024"><path d="M533.333333 725.333333a64 64 0 1 1-64 64 64 64 0 0 1 64-64m0-85.333333a149.333333 149.333333 0 1 0 149.333334 149.333333 149.333333 149.333333 0 0 0-149.333334-149.333333z" fill="#666666" ></path><path d="M533.333333 277.333333m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M277.333333 320m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M789.333333 320m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M512 341.333333h42.666667v384h-42.666667z" fill="#666666" ></path><path d="M741.290667 357.504l30.165333 30.165333-225.066667 225.066667-30.165333-30.165333z" fill="#666666" ></path><path d="M558.08 582.016l-30.165333 30.165333-228.693334-228.693333 30.165334-30.165333z" fill="#666666" ></path></symbol><symbol id="icon-ziyuan" viewBox="0 0 1024 1024"><path d="M236.615854 752.86913h-0.484162A241.500139 241.500139 0 0 1 0.538332 527.733676a238.78883 238.78883 0 0 1 64.684079-180.011531 242.081134 242.081134 0 0 1 149.025146-74.367324 298.534454 298.534454 0 0 1 596.003751 25.951097V300.95207a221.262156 221.262156 0 0 1 213.031398 233.075715 222.714643 222.714643 0 0 1-221.262156 209.1581h-3.098639a27.500417 27.500417 0 0 1 0-54.904001h2.711309A167.520145 167.520145 0 0 0 968.378705 531.219644a166.261323 166.261323 0 0 0-166.16449-175.363573 151.058627 151.058627 0 0 0-18.204502 1.065157 27.500417 27.500417 0 0 1-30.211725-30.308558 240.822312 240.822312 0 0 0 1.549319-27.306752 243.727285 243.727285 0 0 0-487.357738 0 27.500417 27.500417 0 0 1-27.403584 27.500417 185.627813 185.627813 0 0 0-185.240484 197.538205A186.30564 186.30564 0 0 0 237.100016 697.965129a27.500417 27.500417 0 0 1-0.484162 54.904001z"  ></path><path d="M513.266174 1021.869686a27.500417 27.500417 0 0 1-27.500417-27.403584v-484.162268a27.500417 27.500417 0 1 1 54.904001 0v484.162268a27.403584 27.403584 0 0 1-27.403584 27.403584z"  ></path><path d="M513.266174 1024a27.500417 27.500417 0 0 1-19.366491-8.037094L342.260061 864.129619a27.500417 27.500417 0 1 1 38.732981-38.732981L513.266174 957.766602l130.530147-130.336483a27.500417 27.500417 0 0 1 38.732981 38.732982L532.632664 1015.962906a27.403584 27.403584 0 0 1-19.36649 8.037094z"  ></path></symbol><symbol id="icon-add-select" viewBox="0 0 1024 1024"><path d="M544 213.333333v266.666667H810.666667v64H544V810.666667h-64V544H213.333333v-64h266.666667V213.333333z"  ></path></symbol><symbol id="icon-sami-select" viewBox="0 0 1024 1024"><path d="M810.666667 480v64H213.333333v-64z"  ></path></symbol><symbol id="icon-icon_shuaxin" viewBox="0 0 1024 1024"><path d="M512 938.666667c-55.371852 0-109.226667-10.903704-159.857778-32.237037-48.924444-20.66963-92.823704-50.251852-130.465185-87.988149-37.736296-37.736296-67.318519-81.635556-87.988148-130.465185-21.428148-50.631111-32.237037-104.391111-32.237037-159.857777s10.903704-109.226667 32.237037-159.857778c20.66963-48.924444 50.251852-92.823704 87.988148-130.465185 37.736296-37.736296 81.635556-67.318519 130.465185-87.988149 50.631111-21.428148 104.391111-32.237037 159.857778-32.237037 63.81037 0 125.060741 14.222222 181.854815 42.382223 54.139259 26.832593 102.684444 66.085926 140.325926 113.682963 7.300741 9.197037 5.783704 22.660741-3.508148 29.961481-9.197037 7.300741-22.660741 5.783704-29.961482-3.508148-70.257778-88.936296-175.502222-139.946667-288.711111-139.946667-202.808889 0-367.881481 165.072593-367.881481 367.881482s165.072593 367.881481 367.881481 367.881481 367.881481-165.072593 367.881481-367.881481c0-11.757037 9.576296-21.333333 21.333334-21.333334S922.548148 516.361481 922.548148 528.118519c0 55.371852-10.903704 109.226667-32.237037 159.857777-20.66963 48.924444-50.251852 92.823704-87.988148 130.465185-37.736296 37.736296-81.635556 67.318519-130.465185 87.988149-50.631111 21.428148-104.485926 32.237037-159.857778 32.237037z"  ></path><path d="M817.398519 308.242963c-11.757037 0-21.333333-9.576296-21.333334-21.333333V106.666667c0-11.757037 9.576296-21.333333 21.333334-21.333334s21.333333 9.576296 21.333333 21.333334v180.242963c0 11.757037-9.481481 21.333333-21.333333 21.333333z"  ></path><path d="M817.398519 308.242963H637.155556c-11.757037 0-21.333333-9.576296-21.333334-21.333333s9.576296-21.333333 21.333334-21.333334h180.242963c11.757037 0 21.333333 9.576296 21.333333 21.333334s-9.481481 21.333333-21.333333 21.333333z"  ></path></symbol><symbol id="icon-lianjiezhong" viewBox="0 0 1024 1024"><path d="M883.396923 298.141538a99.721846 99.721846 0 0 1-142.414769 0 103.187692 103.187692 0 0 1 0-144.423384 99.721846 99.721846 0 0 1 142.414769 0 103.187692 103.187692 0 0 1 0 144.423384zM285.144615 760.438154a87.276308 87.276308 0 0 0-124.652307 0 90.269538 90.269538 0 0 0 0 126.385231c34.422154 34.894769 90.230154 34.894769 124.652307 0a90.269538 90.269538 0 0 0 0-126.424616z m482.579693 108.307692a64.472615 64.472615 0 0 1 0-90.269538 62.345846 62.345846 0 0 1 89.00923 0c24.576 24.930462 24.576 65.378462 0 90.269538a62.345846 62.345846 0 0 1-89.00923 0zM294.006154 298.141538a103.187692 103.187692 0 0 0 0-144.423384 99.721846 99.721846 0 0 0-142.454154 0 103.187692 103.187692 0 0 0 0 144.423384 99.721846 99.721846 0 0 0 142.454154 0z m324.214154-196.01723c0 56.438154-45.095385 102.163692-100.745846 102.163692-55.611077 0-100.706462-45.725538-100.706462-102.163692C416.768 45.725538 461.863385 0 517.474462 0c55.650462 0 100.745846 45.725538 100.745846 102.124308zM517.474462 870.793846c-41.747692 0-75.539692 34.264615-75.539693 76.603077 0 42.299077 33.831385 76.603077 75.539693 76.603077 41.747692 0 75.539692-34.264615 75.539692-76.603077 0-42.299077-33.792-76.603077-75.539692-76.603077z m416.768-294.990769c-27.805538 0-50.333538-22.843077-50.333539-51.042462 0-28.199385 22.528-51.042462 50.333539-51.042461 27.844923 0 50.412308 22.843077 50.372923 51.042461 0 28.199385-22.567385 51.081846-50.372923 51.081847zM201.452308 524.8c0-56.398769-45.095385-102.124308-100.745846-102.124308C45.095385 422.596923 0 468.283077 0 524.760615c0 56.398769 45.095385 102.124308 100.706462 102.124308 55.650462 0 100.745846-45.686154 100.745846-102.124308z"  ></path></symbol><symbol id="icon-loading" viewBox="0 0 1024 1024"><path d="M563.2 819.2a102.4 102.4 0 1 1 0 204.8 102.4 102.4 0 0 1 0-204.8z m-320.4608-153.6a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m592.7936 25.6a102.4 102.4 0 1 1 0 204.8 102.4 102.4 0 0 1 0-204.8zM947.2 477.1328a76.8 76.8 0 1 1 0 153.6 76.8 76.8 0 0 1 0-153.6zM128 307.2a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m782.6432-40.6016a51.2 51.2 0 1 1 0 102.4 51.2 51.2 0 0 1 0-102.4zM409.6 0a153.6 153.6 0 1 1 0 307.2 153.6 153.6 0 0 1 0-307.2z m384 153.6a25.6 25.6 0 1 1 0 51.2 25.6 25.6 0 0 1 0-51.2z" fill="#555555" ></path></symbol><symbol id="icon-tupushujuyuan" viewBox="0 0 1024 1024"><path d="M851.456 588.288c-13.312 0-25.6 2.048-37.888 5.12l-90.112-155.648 55.296-31.744c18.944 17.92 44.032 29.184 72.192 29.184 57.344 0 103.936-46.592 103.936-103.936s-46.592-103.936-103.936-103.936c-57.344 0-103.936 46.592-103.936 103.936 0 5.12 0.512 10.24 1.536 15.36l-58.368 33.792-82.944-143.872c26.112-25.088 41.984-59.904 41.984-98.816 0-75.776-61.44-137.216-137.216-137.216s-137.216 61.44-137.216 137.216c0 38.912 15.872 73.728 41.984 98.816l-84.992 146.944-56.832-32.768c1.024-6.144 2.048-12.8 2.048-19.456 0-57.344-46.592-103.936-103.936-103.936-57.344 0-103.936 46.592-103.936 103.936s46.592 103.936 103.936 103.936c26.624 0 51.2-10.24 69.12-26.624l56.32 32.768-88.064 152.576c-11.776-3.584-24.576-5.12-37.888-5.12-75.776 0-137.216 61.44-137.216 137.216s61.44 137.216 137.216 137.216c64.512 0 118.272-44.544 133.12-103.936h173.056v61.44c-40.96 13.824-70.656 52.736-70.656 98.816 0 57.344 46.592 103.936 103.936 103.936s103.936-46.592 103.936-103.936c0-46.08-29.696-84.48-70.656-98.816v-61.44h173.056c14.848 59.904 69.12 103.936 133.12 103.936 75.776 0 137.216-61.44 137.216-137.216s-61.44-137.728-137.216-137.728z m-410.112-450.048c0-38.912 31.744-70.656 70.656-70.656s70.656 31.744 70.656 70.656c0 13.824-4.096 26.624-10.752 37.376-12.288 19.456-33.28 32.256-57.856 33.28h-5.12c-24.576-1.024-45.568-13.824-57.856-33.28-6.144-10.752-9.728-24.064-9.728-37.376z m32.768 132.096c11.776 3.584 24.576 5.12 37.888 5.12s25.6-2.048 37.888-5.12l82.944 143.872-124.416 72.192-118.784-68.608 84.48-147.456z m-301.568 526.336c-38.912 0-70.656-31.744-70.656-70.656 0-38.912 31.744-70.656 70.656-70.656h2.56c24.576 1.024 45.568 13.824 57.856 33.28 1.024 1.536 1.536 2.56 2.56 4.096 5.12 9.728 8.192 20.992 8.192 33.28 0 11.776-3.072 23.552-8.192 33.28-12.288 22.016-35.84 37.376-62.976 37.376z m133.12-103.936c-6.144-25.6-19.456-48.128-37.888-65.536l88.064-152.576 122.88 70.656v146.944h-173.056z m239.616-151.552l120.832-69.632 90.112 155.648c-18.432 17.408-31.744 39.936-37.888 65.536h-173.056v-151.552z m306.176 255.488c-27.136 0-50.688-15.36-62.464-37.376-5.12-9.728-8.192-21.504-8.192-33.28 0-12.288 3.072-23.552 8.192-33.28 0.512-1.536 1.536-3.072 2.56-4.096 12.288-19.456 33.28-32.768 57.856-33.28h2.56c38.912 0 70.656 31.744 70.656 70.656-0.512 38.912-32.256 70.656-71.168 70.656z"  ></path></symbol><symbol id="icon-jiedian" viewBox="0 0 1024 1024"><path d="M882.1914 744.849921c-60.501005 0-112.097749 38.645092-131.425292 92.560342H244.912146c-80.468136 0-145.955927-62.61964-145.955926-139.570043 0-77.000371 65.487791-139.570043 145.955926-139.570043h136.312143c19.497433 53.585462 70.934281 91.950735 131.205434 91.950735 60.241173 0 111.688014-38.375266 131.205434-91.950735h136.452052C914.210763 558.280171 1023.340425 453.92743 1023.340425 325.660102S914.210763 93.040033 780.077216 93.040033H273.093982c-19.197627-54.165089-70.944274-93.040033-131.595182-93.040033C64.508422 0 1.928757 62.569672 1.928757 139.560049c0 76.950403 62.579665 139.570043 139.570043 139.570043 60.640915 0 112.377569-38.894931 131.585189-93.040033h506.993227c80.468136 0 145.955927 62.61964 145.955927 139.570043 0 77.000371-65.487791 139.570043-145.955927 139.570043H644.414655c-18.887826-54.734722-70.924287-94.139324-131.974938-94.139325-61.090625 0-113.097105 39.394609-131.974938 94.139325H244.912146c-134.133547 0-243.263209 104.352741-243.263209 232.620069 0 128.267328 109.129663 232.620069 243.263209 232.620069h505.524174c19.057717 54.394941 70.9043 93.529717 131.75508 93.529717 76.950403 0 139.570043-62.61964 139.570043-139.570043 0.009994-77.000371-62.61964-139.580036-139.570043-139.580036zM141.428845 207.036558c-37.166045 0-67.376574-30.230515-67.376574-67.376573 0-37.166045 30.210528-67.376574 67.376574-67.376574 37.146058 0 67.376574 30.210528 67.376573 67.376574 0 37.146058-30.230515 67.376574-67.376573 67.376573z m371.000878 236.257725c37.146058 0 67.376574 30.210528 67.376574 67.376574 0 37.146058-30.230515 67.376574-67.376574 67.376573-37.166045 0-67.376574-30.230515-67.376574-67.376573 0.009994-37.176039 30.210528-67.376574 67.376574-67.376574z m369.761677 508.502254c-37.166045 0-67.376574-30.230515-67.376574-67.376573 0-37.166045 30.210528-67.376574 67.376574-67.376574 37.146058 0 67.376574 30.210528 67.376574 67.376574 0 37.146058-30.230515 67.376574-67.376574 67.376573z"  ></path></symbol><symbol id="icon-shitujiedianxianshi" viewBox="0 0 1367 1024"><path d="M1235.403267 512.03593a130.596433 130.596433 0 0 0-42.68749 7.796802l-193.295715-290.430872A149.113837 149.113837 0 1 0 724.647767 149.48464a151.777744 151.777744 0 0 0 37.229729 97.849864l-194.920048 357.873209a220.519548 220.519548 0 0 0-55.162374-8.511508 207.914718 207.914718 0 0 0-114.807909 34.046035L240.401393 443.683967a126.763005 126.763005 0 0 0-75.564005-182.380192 127.737605 127.737605 0 1 0 12.99467 239.816633l157.625345 188.422713A213.307506 213.307506 0 1 0 643.23616 643.282096l190.956674-350.856087a164.187654 164.187654 0 0 0 39.56877 6.172468 143.591102 143.591102 0 0 0 60.555162-12.99467l192.516034 288.026859a121.760057 121.760057 0 0 0-18.582377 64.973349 128.127445 128.127445 0 1 0 127.152844-126.568085zM129.621832 448.362048a68.157044 68.157044 0 1 1 68.157044-68.092071A68.157044 68.157044 0 0 1 129.621832 448.362048z m528.948039 365.670011a145.86517 145.86517 0 1 1-145.86517-145.86517 145.86517 145.86517 0 0 1 145.86517 145.86517z m215.12676-577.937944a87.389155 87.389155 0 1 1 87.389155-87.389155 87.389155 87.389155 0 0 1-87.389155 87.389155z m365.085251 474.305451a68.157044 68.157044 0 1 1 68.222017-68.416937 68.157044 68.157044 0 0 1-68.222017 68.157044z"  ></path></symbol><symbol id="icon-shituxianshiquanbujiedian" viewBox="0 0 1367 1024"><path d="M1235.403267 512.03593a130.596433 130.596433 0 0 0-42.68749 7.796802l-193.295715-290.430872A149.113837 149.113837 0 1 0 724.647767 149.48464a151.777744 151.777744 0 0 0 37.229729 97.849864l-194.920048 357.873209a220.519548 220.519548 0 0 0-55.162374-8.511508 207.914718 207.914718 0 0 0-114.807909 34.046035L240.401393 443.683967a126.763005 126.763005 0 0 0-75.564005-182.380192 127.737605 127.737605 0 1 0 12.99467 239.816633l157.625345 188.422713A213.307506 213.307506 0 1 0 643.23616 643.282096l190.956674-350.856087a164.187654 164.187654 0 0 0 39.56877 6.172468 143.591102 143.591102 0 0 0 60.555162-12.99467l192.516034 288.026859a121.760057 121.760057 0 0 0-18.582377 64.973349 128.127445 128.127445 0 1 0 127.152844-126.568085zM129.621832 448.362048a68.157044 68.157044 0 1 1 68.157044-68.092071A68.157044 68.157044 0 0 1 129.621832 448.362048z m528.948039 365.670011a145.86517 145.86517 0 1 1-145.86517-145.86517 145.86517 145.86517 0 0 1 145.86517 145.86517z m215.12676-577.937944a87.389155 87.389155 0 1 1 87.389155-87.389155 87.389155 87.389155 0 0 1-87.389155 87.389155z m365.085251 474.305451a68.157044 68.157044 0 1 1 68.222017-68.416937 68.157044 68.157044 0 0 1-68.222017 68.157044z"  ></path></symbol><symbol id="icon-suoxiao" viewBox="0 0 1024 1024"><path d="M768 448a320 320 0 1 0-320 320 320 320 0 0 0 320-320z m64 0A384 384 0 1 1 448 64a384 384 0 0 1 384 384z"  ></path><path d="M681.28 726.72a32 32 0 0 1 45.44-45.44l160 160a32 32 0 0 1-45.44 45.44zM288 480a32 32 0 0 1 0-64h320a32 32 0 0 1 0 64z"  ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1024 1024"><path d="M922.243 97.755c11.49 11.489 11.673 30.002 0.547 41.713l-0.547 0.562-109.119 109.1c57.22 78.348 42.673 195.388-35.778 273.839l-92.83 92.585c-11.572 11.54-30.264 11.653-41.97 0.253l-45.746-44.55-18.089 18.086a29.891 29.891 0 0 1-7.171 5.3l48.764 47.489c11.947 11.638 12.06 30.804 0.248 42.585l-95.875 95.629c-77.416 77.417-192.412 92.603-270.72 38.004L144.04 928.245c-11.676 11.673-30.606 11.673-42.282 0-11.49-11.489-11.673-30.002-0.547-41.713l0.547-0.562 109.677-109.657c-55.981-78.335-41.131-194.413 36.833-272.377l92.831-92.585c11.571-11.54 30.263-11.653 41.969-0.254l42.587 41.474a29.935 29.935 0 0 1 3.678-4.741l0.548-0.562 19.54-19.538-44.11-42.957c-11.828-11.522-12.057-30.422-0.6-42.23l0.351-0.355 95.875-95.63c76.927-76.926 190.96-92.408 269.23-39.03L879.961 97.755c11.676-11.673 30.606-11.673 42.282 0zM362.451 474.49l-71.916 71.727-1.884 1.911c-61.822 63.545-67.916 156.289-16.185 208.02C324.72 808.4 418.82 801.655 482.43 738.044l74.422-74.234-194.401-189.32z m129.807-5.04l-20.096 20.094a30.035 30.035 0 0 1-4.643 3.8l63.25 61.595a29.82 29.82 0 0 1 5.113-7.308l0.547-0.561 17.532-17.531-61.703-60.089z m260.889-198.691c-52.254-52.254-146.353-45.509-209.964 18.102l-74.422 74.234 194.4 189.322 71.939-71.75 1.862-1.888c61.822-63.545 67.916-156.29 16.185-208.02z" fill="#333333" ></path></symbol><symbol id="icon-xiantiao" viewBox="0 0 1024 1024"><path d="M827.076923 157.538462a39.384615 39.384615 0 1 1-14.375385 76.051692L233.590154 812.701538a39.384615 39.384615 0 1 1-22.291692-22.291692L790.409846 211.298462A39.384615 39.384615 0 0 1 827.076923 157.538462z" fill="#333333" ></path></symbol></svg>', r = (r = document.getElementsByTagName("script"))[r.length - 1].getAttribute("data-injectcss");
  if (r && !e.__iconfont__svg__cssinject__) {
    e.__iconfont__svg__cssinject__ = !0;
    try {
      document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
    } catch (f) {
      console && console.log(f);
    }
  }
  function c() {
    s || (s = !0, o());
  }
  i = function() {
    var f, u, h, g;
    (g = document.createElement("div")).innerHTML = l, l = null, (h = g.getElementsByTagName("svg")[0]) && (h.setAttribute("aria-hidden", "true"), h.style.position = "absolute", h.style.width = 0, h.style.height = 0, h.style.overflow = "hidden", f = h, (u = document.body).firstChild ? (g = f, (h = u.firstChild).parentNode.insertBefore(g, h)) : u.appendChild(f));
  }, document.addEventListener ? ~["complete", "loaded", "interactive"].indexOf(document.readyState) ? setTimeout(i, 0) : (t = function() {
    document.removeEventListener("DOMContentLoaded", t, !1), i();
  }, document.addEventListener("DOMContentLoaded", t, !1)) : document.attachEvent && (o = i, n = e.document, s = !1, (a = function() {
    try {
      n.documentElement.doScroll("left");
    } catch (f) {
      return void setTimeout(a, 50);
    }
    c();
  })(), n.onreadystatechange = function() {
    n.readyState == "complete" && (n.onreadystatechange = null, c());
  });
})(window);
const ye = (e) => (e = e.replace("#", ""), e = e.replace("(", ""), e = e.replace(")", ""), e = e.replace(/,/, "-"), e), Z = (e) => {
  try {
    if ("touches" in e && e.touches || "targetTouches" in e && e.targetTouches)
      return !0;
  } catch (i) {
  }
  return !1;
}, ut = (e) => e instanceof TouchEvent ? {
  clientX: e.touches[0].clientX,
  clientY: e.touches[0].clientY
} : {
  clientX: e.clientX,
  clientY: e.clientY
}, d = (...e) => {
  typeof window != "undefined" && window.relationGraphDebug && console.log("[relation-graph:debug]", ...e);
}, yt = (e, i, t) => e ? e.classList.contains(i) ? e : e.classList.contains(t) ? null : yt(e.parentElement, i, t) : null, Mt = (e) => w(void 0, null, function* () {
  return new Promise((i, t) => {
    setTimeout(() => {
      i();
    }, e);
  });
}), I = (e) => typeof e == "string" ? Number.parseInt(e) : e, at = (e, i) => {
  if (e.id === void 0)
    throw console.log("node must has id:", e), new Error("node must has option[id]:");
  const t = {
    id: e.id,
    text: e.text !== void 0 ? e.text : "",
    type: e.type !== void 0 ? e.type : "node",
    isShow: !0,
    isHide: e.isHide !== void 0 ? e.isHide : !1,
    expanded: e.expanded !== void 0 ? e.expanded : !0,
    junctionPoint: e.junctionPoint !== void 0 ? e.junctionPoint : void 0,
    alignItems: e.alignItems !== void 0 ? e.alignItems : void 0,
    selected: e.selected !== void 0 ? e.selected : !1,
    flashing: void 0,
    dragging: !1,
    styleClass: e.styleClass !== void 0 ? e.styleClass : "",
    className: e.className !== void 0 ? e.className : "",
    targetNodes: [],
    targetFrom: [],
    targetTo: [],
    nodeShape: e.nodeShape !== void 0 ? e.nodeShape : void 0,
    borderWidth: e.borderWidth !== void 0 ? e.borderWidth : void 0,
    borderColor: e.borderColor !== void 0 ? e.borderColor : void 0,
    fontColor: e.fontColor !== void 0 ? e.fontColor : void 0,
    color: e.color !== void 0 ? e.color : void 0,
    opacity: e.opacity !== void 0 ? e.opacity : 1,
    fixed: e.fixed !== void 0 ? e.fixed : !1,
    width: e.width !== void 0 ? e.width : void 0,
    height: e.height !== void 0 ? e.height : void 0,
    force_weight: e.force_weight,
    x: e.x !== void 0 ? e.x : 0,
    y: e.y !== void 0 ? e.y : 0,
    Fx: 0,
    Fy: 0,
    offset_x: e.offset_x !== void 0 ? e.offset_x : 0,
    offset_y: e.offset_y !== void 0 ? e.offset_y : 0,
    expandHolderPosition: e.expandHolderPosition !== void 0 ? e.expandHolderPosition : void 0,
    innerHTML: e.innerHTML !== void 0 ? e.innerHTML : void 0,
    html: e.html !== void 0 ? e.html : void 0,
    disableDefaultClickEffect: e.disableDefaultClickEffect !== void 0 ? e.disableDefaultClickEffect : void 0,
    disableDrag: e.disableDrag !== void 0 ? e.disableDrag : !1,
    singleNode: !1,
    data: e.data !== void 0 ? e.data : {}
  };
  return t.lot = {
    childs: [],
    parent: void 0,
    eached: !1,
    strength: 0
  }, t.el === void 0 && (t.el = {
    offsetWidth: 50,
    offsetHeight: 50
  }, i && (i.defaultNodeWidth && (t.el.offsetWidth = i.defaultNodeWidth + 16), i.defaultNodeHeight && (t.el.offsetHeight = i.defaultNodeHeight + 16))), t.width && (t.el.offsetWidth = t.width), t.height && (t.el.offsetHeight = t.height), t;
}, me = [
  "Fx",
  "Fy",
  "appended",
  "dragging",
  "el",
  "targetFrom",
  "targetNodes",
  "targetTo",
  "type",
  "lot",
  "seeks_id"
], mt = (e) => {
  if (!e)
    return;
  const i = {};
  return Object.keys(e).forEach((t) => {
    me.includes(t) || e[t] !== void 0 && (i[t] = e[t]);
  }), i;
}, _e = {
  json2Node: at,
  transNodeToJson: mt
}, ve = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json2Node: at,
  transNodeToJson: mt,
  default: _e
}, Symbol.toStringTag, { value: "Module" })), st = (e) => {
  if (e.from === void 0)
    throw console.log("error,line must has option[from]:", e), new Error("error,line must has option[from]:");
  if (e.to === void 0)
    throw console.log("error,line must has option[to]:", e), new Error("error,line must has option[to]:");
  if (typeof e.from != "string")
    throw console.log("error line from, must be string:", e), new TypeError("error line from, must be string:");
  if (typeof e.to != "string")
    throw console.log("error line to, must be string:", e), new TypeError("error line to, must be string:");
  const i = {
    from: e.from,
    to: e.to,
    text: e.text !== void 0 ? e.text : "",
    textOffset_x: e.textOffset_x !== void 0 ? e.textOffset_x : void 0,
    textOffset_y: e.textOffset_y !== void 0 ? e.textOffset_y : void 0,
    color: e.color !== void 0 ? e.color : void 0,
    opacity: e.opacity !== void 0 ? e.opacity : 1,
    fontColor: e.fontColor !== void 0 ? e.fontColor : void 0,
    lineWidth: e.lineWidth !== void 0 ? e.lineWidth : void 0,
    lineShape: e.lineShape !== void 0 ? e.lineShape : void 0,
    styleClass: e.styleClass !== void 0 ? e.styleClass : void 0,
    className: e.className !== void 0 ? e.className : void 0,
    isHide: e.isHide !== void 0 ? e.isHide : !1,
    arrow: e.arrow !== void 0 ? e.arrow : void 0,
    animation: e.animation !== void 0 ? e.animation : 0,
    dashType: e.dashType !== void 0 ? e.dashType : 0,
    disableDefaultClickEffect: e.disableDefaultClickEffect !== void 0 ? e.disableDefaultClickEffect : !1,
    showStartArrow: e.showStartArrow !== void 0 ? e.showStartArrow : !1,
    showEndArrow: e.showEndArrow !== void 0 ? e.showEndArrow : !0,
    useTextPath: e.useTextPath !== void 0 ? e.useTextPath : void 0,
    placeText: e.placeText !== void 0 ? e.placeText : void 0,
    forDisplayOnly: e.forDisplayOnly || e.from === e.to,
    fromJunctionPoint: e.fromJunctionPoint,
    toJunctionPoint: e.toJunctionPoint,
    force_elastic: e.force_elastic,
    polyLineStartDistance: e.polyLineStartDistance,
    isHideArrow: e.isHideArrow !== void 0 ? e.isHideArrow : void 0,
    hidden: !1,
    lineDirection: e.lineDirection !== void 0 ? e.lineDirection : void 0,
    reverseText: e.reverseText !== void 0 ? e.reverseText : void 0,
    data: e.data !== void 0 ? e.data : {}
  };
  return i.isHideArrow && (i.showEndArrow = !1, i.isHideArrow = !1), i;
}, xe = ["arrow", "id", "reverseText", "isReverse"], _t = (e, i) => {
  !e || e.relations.forEach((t) => {
    const o = {};
    Object.keys(t).forEach((n) => {
      xe.includes(n) || t[n] !== void 0 && (o[n] = t[n]);
    }), i.push(o);
  });
}, j = {
  border: "border",
  ltrb: "ltrb",
  tb: "tb",
  lr: "lr",
  left: "left",
  right: "right",
  top: "top",
  bottom: "bottom"
}, we = {
  json2Line: st,
  transLinkToJson: _t
}, Ce = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json2Line: st,
  transLinkToJson: _t,
  JUNCTION_POINT_STYLE: j,
  default: we
}, Symbol.toStringTag, { value: "Module" })), m = {
  analysisNodes(e, i, t, o) {
    i.length > o.max_length && (o.max_length = i.length), t > o.max_deep && (o.max_deep = t);
    const n = {
      level: t,
      all_size: i.length,
      all_strength: 0
    };
    t === 0 && i.forEach((a) => {
      a.lot.parent = void 0;
    });
    const s = [];
    i.forEach((a) => {
      e.push(a), a.targetNodes && a.targetNodes.forEach((l) => {
        e.includes(l) || (e.push(l), l.lot.parent = a, s.push(l));
      });
    }), n.all_strength > o.max_strength && (o.max_strength = n.all_strength), s.length > 0 && m.analysisNodes(e, s, t + 1, o);
  },
  analysisNodes4Didirectional(e, i, t, o, n) {
    i.length > o.max_length && (o.max_length = i.length), t > o.max_deep && (o.max_deep = t);
    const s = {
      level: t,
      all_size: i.length,
      all_strength: 0
    }, a = [];
    i.forEach((r) => {
      r.lot || (r.lot = { childs: [] }), r.lot.eached = !0, r.lot.subling = s, r.lot.level = t, e.push(r);
    });
    let l = 0;
    i.forEach((r) => {
      let c = 0;
      if (n === 0) {
        let f = 0;
        r.targetNodes.forEach((u) => {
          u.lot || (u.lot = { eached: !1, childs: [] }), u.lot.eached || (m.isAllowShowNode(u) ? (u.lot.eached = !0, u.lot.parent = r, u.lot.index_of_parent = f++, r.lot.childs.push(u), a.push(u), c++) : r.lot.childs.push(u));
        });
      } else if (n === -1) {
        let f = 0;
        r.targetFrom.forEach((u) => {
          u.lot || (u.lot = { eached: !1, childs: [] }), u.lot.eached || (m.isAllowShowNode(u) ? (u.lot.eached = !0, u.lot.parent = r, u.lot.index_of_parent = f++, r.lot.childs.push(u), a.push(u), c++) : r.lot.childs.push(u));
        });
      } else {
        let f = 0;
        r.targetTo.forEach((u) => {
          u.lot || (u.lot = { eached: !1, childs: [] }), u.lot.eached || (m.isAllowShowNode(u) ? (u.lot.eached = !0, u.lot.parent = r, u.lot.index_of_parent = f++, r.lot.childs.push(u), a.push(u), c++) : r.lot.childs.push(u));
        });
      }
      r.lot.strength = c > 0 ? c : 1, s.all_strength += r.lot.strength, r.lot.strength_plus = s.all_strength, r.lot.index_of_level = l, r.lot.childs_size = c, l++;
    }), s.all_strength > o.max_strength && (o.max_strength = s.all_strength), a.length > 0 ? m.analysisNodes4Didirectional(e, a, t + (n === -1 ? -1 : 1), o, n) : (e.forEach((r) => {
      r.lot.childs_size > 0 && (r.lot.strengthWithChilds = 0);
    }), e.forEach((r) => {
      r.lot.childs_size === 0 && (r.lot.strengthWithChilds = 1, m.conductStrengthToParents(r));
    }), m.analysisDataTree([e[0]], 0, n));
  },
  conductStrengthToParents(e) {
    e.lot.parent && Math.abs(e.lot.level) - 1 === Math.abs(e.lot.parent.lot.level) && (e.lot.parent.lot.strengthWithChilds += 1, m.conductStrengthToParents(e.lot.parent));
  },
  analysisDataTree(e, i, t = 1) {
    const o = [];
    let n = 0;
    e.forEach((s) => {
      (s.lot.level === 0 || t === (s.lot.level < 0 ? -1 : 1)) && (s.lot.childs_size > 0 && s.lot.childs.forEach((a) => {
        o.push(a);
      }), s.lot.parent && n < s.lot.parent.lot.strengthWithChilds_from && (n = s.lot.parent.lot.strengthWithChilds_from), s.lot.strengthWithChilds_from = n, n += s.lot.strengthWithChilds);
    }), o.length > 0 && m.analysisDataTree(o, i + t, t);
  },
  conductStrengthToParents4Folder(e) {
    e.lot.parent && (e.lot.parent.lot.strengthWithChilds += 1, m.conductStrengthToParents4Folder(e.lot.parent));
  },
  analysisDataFolder(e, i, t) {
    const o = [];
    let n = 0, s = null;
    e.forEach((a) => {
      if (a.lot.level === 0 || t === (a.lot.level < 0 ? -1 : 1)) {
        a.lot.childs_size > 0 && a.lot.childs.forEach((r) => {
          o.push(r);
        });
        let l = 0;
        a.lot.parent && (s ? s !== a.lot.parent && (n += 1, s = a.lot.parent) : (l = a.lot.parent.lot.strengthWithChilds_from, n = l, s = a.lot.parent)), a.lot.strengthWithChilds_from = 1 + n, n += a.lot.strengthWithChilds;
      }
    }), o.length > 0 && m.analysisDataFolder(o, i + t, t);
  },
  isAllowShowNode(e, i = 0) {
    return i > 15 ? !0 : (!e.lot || !e.lot.parent || m.isAllowShowNode(e.lot.parent, i + 1) && e.lot.parent.expanded !== !1) && e.isShow && e.isHide !== !0;
  },
  getNodeWidth(e, i) {
    return e.el.offsetWidth || e.width || i && i.defaultNodeWidth || 50;
  },
  getNodeHeight(e, i) {
    return e.el.offsetHeight || e.height || i && i.defaultNodeHeight || 50;
  },
  getNodeXByLotX(e, i) {
    return (i.offset_x || 0) + this.getNodeXByCenterX(e, i, i.lot.x || 0);
  },
  getNodeYByLotY(e, i) {
    return (i.offset_y || 0) + this.getNodeYByCenterY(e, i, i.lot.y || 0);
  },
  getNodeXByCenterX(e, i, t) {
    return i.alignItems === "right" ? t - m.getNodeWidth(i, e) : i.alignItems === "left" ? t : t - m.getNodeWidth(i, e) / 2;
  },
  getNodeYByCenterY(e, i, t) {
    return i.alignItems === "top" ? t : i.alignItems === "bottom" ? t - m.getNodeHeight(i, e) : t - m.getNodeHeight(i, e) / 2;
  },
  getCenterXByNodeX(e, i, t) {
    return t + m.getNodeHeight(i, e) / 2;
  },
  getCenterYByNodeY(e, i, t) {
    return t + m.getNodeHeight(i, e) / 2;
  },
  getLotXByNodeX(e, i) {
    const t = i.offset_x || 0;
    return this.getCenterXByNodeX(e, i, i.x || 0) - t;
  },
  getLotYByNodeY(e, i) {
    const t = i.offset_y || 0;
    return this.getCenterYByNodeY(e, i, i.y || 0) - t;
  },
  isRectangleOverlap(e, i) {
    const t = e.x + A, o = i.x + A, n = e.el.offsetWidth - A * 2, s = i.el.offsetWidth - A * 2, a = e.y + A, l = i.y + A, r = e.el.offsetHeight - A * 2, c = i.el.offsetHeight - A * 2;
    return !(o >= t + n || o + s <= t || l >= a + r || l + c <= a);
  },
  isXOverlap(e, i, t, o) {
    return !(i >= e + t || i + o <= e);
  },
  isYOverlap(e, i, t, o) {
    return !(i >= e + t || i + o <= e);
  },
  shapesOverlap(e, i, t = 1, o = 1) {
    return this.isRectangleOverlap(e, i);
  },
  getNoOverlapLimitedPosition(e, i, t, o) {
    const n = e.x + A, s = e.y + A, a = i + A, l = o.x + A, r = e.el.offsetWidth - A * 2, c = o.el.offsetWidth - A * 2, f = t + A, u = o.y + A, h = e.el.offsetHeight - A * 2, g = o.el.offsetHeight - A * 2;
    let p = e.x, y = e.y;
    const v = this.isXOverlap(n, l, r, c), x = this.isYOverlap(s, u, h, g);
    return v ? f < u ? (p = i, y = u - h - A) : f > u && (p = i, y = u + g - A) : x && (a < l ? (p = l - r - A, y = t) : a > l && (p = l + c - A, y = t)), { x: p, y };
  },
  flatNodeData(e, i, t, o) {
    e.forEach((n) => {
      t.push(n), i && o.push({
        from: i.id,
        to: n.id
      });
      const s = n.childs || n.children;
      s && s.length > 0 && this.flatNodeData(s, n, t, o);
    });
  }
}, A = 8, be = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  RGNodesAnalytic: m,
  default: m
}, Symbol.toStringTag, { value: "Module" }));
class nt {
  constructor(i, t) {
    _(this, "graphOptions");
    _(this, "layoutOptions");
    _(this, "allNodes", []);
    _(this, "isMainLayouer", !0);
    _(this, "requireLinks", !1);
    _(this, "allLinks", []);
    _(this, "rootNode");
    _(this, "currentAnimationStep", 1);
    _(this, "allAnimationStep", 30);
    this.layoutOptions = i, this.graphOptions = t;
  }
  setLinks(i) {
    d("setLinks:", i.length), this.allLinks = i;
  }
  refresh() {
    this.placeNodes(this.allNodes, this.rootNode);
  }
  placeNodes(i, t) {
    this.allNodes = i, this.rootNode = t;
  }
  snapshotBeforeAnimation() {
    this.allNodes.forEach((i) => {
      !m.isAllowShowNode(i) || (i.lot.to_x = m.getNodeXByLotX(this.graphOptions, i), i.lot.to_y = m.getNodeYByLotY(this.graphOptions, i), i.lot.from_x = i.x || 0, i.lot.from_y = i.y || 0, i.lot.placed = !0);
    });
  }
  animationLayout(i = !0) {
    return w(this, null, function* () {
      i && this.snapshotBeforeAnimation();
      const t = this.rootNode;
      t && d("debug0910:create rootNode coordinates:2.1", t.x, t.y), this.currentAnimationStep = 1, this.allAnimationStep = 10, d("[LayoutAnimationEffect]start play...");
      let o = !1;
      return new Promise((n, s) => {
        this.playAnimation(() => {
          o || (o = !0, d("[LayoutAnimationEffect]played!"), this.allNodes.forEach((a) => {
            !m.isAllowShowNode(a) || (a.lot.from_x = a.x, a.lot.from_y = a.y, a.x = a.lot.to_x, a.y = a.lot.to_y);
          }), n());
        });
      });
    });
  }
  playAnimation(i) {
    if (d("[LayoutAnimationEffect]", this.currentAnimationStep, this.allAnimationStep), this.currentAnimationStep > this.allAnimationStep) {
      i();
      return;
    }
    this.allNodes.forEach((t) => {
      if (!t.lot.placed)
        return;
      const { from_x: o, from_y: n, to_x: s, to_y: a } = t.lot;
      if (o !== void 0 && n !== void 0 && s !== void 0 && a !== void 0) {
        const l = (s - o) / this.allAnimationStep, r = (a - n) / this.allAnimationStep, c = Math.floor(o + this.currentAnimationStep * l), f = Math.floor(n + this.currentAnimationStep * r);
        (t.x !== c || t.y !== f) && (t.x = c, t.y = f);
      }
    }), this.currentAnimationStep++, requestAnimationFrame(this.playAnimation.bind(this, i));
  }
}
class Zt extends nt {
  constructor(t, o) {
    super(t, o);
    _(this, "enableGatherNodes", !1);
    _(this, "layoutOptions");
    _(this, "levelDistanceArr", []);
    this.layoutOptions = t, d("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((n) => Number.parseInt(n)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.enableGatherNodes = this.layoutOptions.enableGatherNodes;
  }
  refresh() {
    return w(this, null, function* () {
      d("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), yield this.placeNodes(this.allNodes, this.rootNode);
    });
  }
  analysisNodes4Didirectional(t, o, n, s, a) {
    d(`${a} level ${n} size: ${o.length}`), o.length > s.max_length && (s.max_length = o.length), n > s.max_deep && (s.max_deep = n);
    const l = {
      level: n,
      all_size: o.length,
      all_strength: 0
    }, r = [];
    o.forEach((f) => {
      f.lot || (f.lot = { childs: [] }), f.lot.eached = !0, f.lot.subling = l, f.lot.level = n, t.push(f);
    });
    let c = 0;
    o.forEach((f) => {
      let u = 0, h = a === -1 ? f.targetFrom : f.targetTo;
      n !== 0 && (h = f.targetNodes);
      let g = 0;
      h.forEach((p) => {
        p.lot || (p.lot = { eached: !1, childs: [] }), p.lot.eached || (p.lot.parent = f, m.isAllowShowNode(p) ? (p.lot.eached = !0, p.lot.index_of_parent = g++, f.lot.childs.push(p), r.push(p), u++) : f.lot.childs.push(p));
      }), f.lot.strength = u > 0 ? u : 1, l.all_strength += f.lot.strength, f.lot.strength_plus = l.all_strength, f.lot.index_of_level = c, f.lot.childs_size = u, c++;
    }), l.all_strength > s.max_strength && (s.max_strength = l.all_strength), r.length > 0 ? this.analysisNodes4Didirectional(t, r, n + a, s, a) : (t.forEach((f) => {
      f.lot.childs_size > 0 && (f.lot.strengthWithChilds = 0);
    }), t.forEach((f) => {
      f.lot.childs_size === 0 && (f.lot.strengthWithChilds = 1, m.conductStrengthToParents(f));
    }), m.analysisDataTree([t[0]], 0, a));
  }
  placeNodes(t, o) {
    return w(this, null, function* () {
      if (d("SeeksBidirectionalTreeLayouter:placeNodes"), o)
        d("layout by root:", o);
      else {
        console.error("root is null");
        return;
      }
      this.rootNode = o, this.allNodes = t, d("allNodes:", t.length), t.forEach((a) => {
        a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.strengthWithChilds_from = 0, a.lot.strengthWithChilds = 0, a.lot.placed = !1;
      });
      let n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      };
      m.analysisNodes(n, [this.rootNode], 0, s), n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      }, this.analysisNodes4Didirectional(n, [this.rootNode], 0, s, -1), this.placeNodesPosition(this.rootNode, n, s), n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      }, this.analysisNodes4Didirectional(n, [this.rootNode], 0, s, 1), this.placeNodesPosition(this.rootNode, n, s), d("allNodes:", n.length), this.graphOptions.useAnimationWhenExpanded ? (d("Play layout animation....."), yield this.animationLayout(), d("create rootNode coordinates:3", o.x, o.y)) : (this.allNodes.forEach((a) => {
        if (a.fixed === !0) {
          a.lot.placed = !0;
          return;
        }
        !m.isAllowShowNode(a) || (Number.isNaN(a.lot.x) && (d("bad lot x:", a.text, a.lot.x), a.lot.x = 0), Number.isNaN(a.lot.y) && (d("bad lot y:", a.text, a.lot.y), a.lot.y = 0), a.x = m.getNodeXByLotX(this.graphOptions, a), a.y = m.getNodeYByLotY(this.graphOptions, a), a.lot.placed = !0);
      }), d("create rootNode coordinates:1", o.x, o.y));
    });
  }
  placeNodesPosition(t, o, n) {
    if (t.fixed !== !0) {
      const s = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      t.lot.x = s, t.lot.y = a, this.layoutOptions.fixedRootNode ? (t.lot.x = m.getLotXByNodeX(this.graphOptions, t), t.lot.y = m.getLotYByNodeY(this.graphOptions, t)) : this.layoutOptions.from === "top" ? t.lot.y -= this.graphOptions.viewSize.height / 2 - 100 : this.layoutOptions.from === "bottom" ? t.lot.y += this.graphOptions.viewSize.height / 2 - 200 : this.layoutOptions.from === "right" ? t.lot.x += this.graphOptions.viewSize.width / 2 - 100 : t.lot.x -= this.graphOptions.viewSize.width / 2 - 100, d("debug0910:Graph center:", t.lot.x, t.lot.y, { _center_offset_x: s, _center_offset_y: a });
    } else
      t.origin_x === void 0 && (t.origin_x = t.x, t.origin_y = t.y), t.lot.x = t.origin_x, t.lot.y = t.origin_y, d("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", t.text, t.x, t.y);
    t.lot.placed = !0, this.placeRelativePosition(t, o, n);
  }
  placeRelativePosition(t, o, n) {
    const s = this.graphOptions.viewSize;
    if (this.layoutOptions.from === "left" || this.layoutOptions.from === "right") {
      const a = I(this.layoutOptions.min_per_height) || 80, l = I(this.layoutOptions.max_per_height) || 400, r = I(this.layoutOptions.min_per_width) || 430, c = I(this.layoutOptions.max_per_width) || 650;
      let f = Math.round((s.width - 10) / (n.max_deep + 2));
      f < r && (f = r), f > c && (f = c);
      let u = Math.round(s.height / (n.max_strength + 1));
      u < a && (u = a), u > l && (u = l), o.forEach((h) => {
        h.fixed !== !0 && h.lot.placed !== !0 && h !== t && (this.layoutOptions.from === "right" ? h.lot.x = t.lot.x - this.getLevelDistance(h, h.lot.subling.level, f) : h.lot.x = t.lot.x + this.getLevelDistance(h, h.lot.subling.level, f));
      }), o.forEach((h) => {
        h.fixed !== !0 && h.lot.level !== 0 && (this.layoutOptions.layoutExpansionDirection === "left" || this.layoutOptions.layoutExpansionDirection === "top" ? h.lot.y = t.lot.y - u * h.lot.strengthWithChilds_from : this.layoutOptions.layoutExpansionDirection === "right" || this.layoutOptions.layoutExpansionDirection === "bottom" ? h.lot.y = t.lot.y + u * h.lot.strengthWithChilds_from : h.lot.y = t.lot.y + u * (n.max_strength / -2 + h.lot.strengthWithChilds_from + h.lot.strengthWithChilds / 2));
      }), this.gatherNodes(o, "h", u);
    } else {
      const a = I(this.layoutOptions.min_per_height) || 350, l = I(this.layoutOptions.max_per_height) || 400, r = I(this.layoutOptions.min_per_width) || 250, c = I(this.layoutOptions.max_per_width) || 500;
      let f = Math.round((s.width - 10) / (n.max_strength + 2));
      f < r && (f = r), f > c && (f = c);
      let u = Math.round((s.height - 10) / (n.max_deep + 2));
      u < a && (u = a), u > l && (u = l), o.forEach((h) => {
        h.fixed !== !0 && h.lot.placed !== !0 && h !== t && (this.layoutOptions.from === "bottom" ? h.lot.y = t.lot.y - this.getLevelDistance(h, h.lot.subling.level, u) : h.lot.y = t.lot.y + this.getLevelDistance(h, h.lot.subling.level, u));
      }), o.forEach((h) => {
        h.fixed !== !0 && h.lot.level !== 0 && (this.layoutOptions.layoutExpansionDirection === "left" || this.layoutOptions.layoutExpansionDirection === "top" ? h.lot.x = t.lot.x - f * h.lot.strengthWithChilds_from : this.layoutOptions.layoutExpansionDirection === "right" || this.layoutOptions.layoutExpansionDirection === "bottom" ? h.lot.x = t.lot.x + f * h.lot.strengthWithChilds_from : h.lot.x = t.lot.x + f * (n.max_strength / -2 + h.lot.strengthWithChilds_from + h.lot.strengthWithChilds / 2));
      }), this.gatherNodes(o, "v", f);
    }
  }
  gatherNodes(t, o, n) {
    if (!this.enableGatherNodes)
      return;
    const s = {};
    t.forEach((a) => {
      const l = a.lot.level + "";
      s[l] || (s[l] = []), s[l].push(a), a.lot.movedNodeSizeBefore = 1, a.lot.movedNodeSizeAfter = 1;
    }), t.forEach((a) => {
      if (a.fixed !== !0 && a.lot.level !== 0) {
        const l = a.lot.level + "", r = s[l];
        if (a.lot.strengthWithChilds === 1 && a.lot.childs_size <= 1) {
          const c = this.getBloomingNearByParent(a, a.lot.parent, r, o);
          c && (o === "h" ? a.lot.y - c.lot.y > 0 ? (a.lot.y = c.lot.y + n * c.lot.movedNodeSizeAfter, c.lot.movedNodeSizeAfter++) : (a.lot.y = c.lot.y - n * c.lot.movedNodeSizeBefore, c.lot.movedNodeSizeBefore++) : a.lot.x - c.lot.x > 0 ? (a.lot.x = c.lot.x + n * c.lot.movedNodeSizeAfter, c.lot.movedNodeSizeAfter++) : (a.lot.x = c.lot.x - n * c.lot.movedNodeSizeBefore, c.lot.movedNodeSizeBefore++));
        }
      }
    });
  }
  getBloomingNearByParent(t, o, n, s) {
    let a = 9999, l;
    for (const r of n)
      if (r.lot.childs_size > 1 && r.lot.parent === o) {
        const c = s === "h" ? r.lot.y - o.lot.y : r.lot.x - o.lot.x;
        Math.abs(c) < a && (a = Math.abs(c), l = r);
      }
    if (l && l !== t)
      return l;
  }
  getLevelDistance(t, o, n) {
    const s = Math.abs(o);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let l = 0; l < s; l++) {
        const r = l >= this.levelDistanceArr.length ? this.levelDistanceArr[this.levelDistanceArr.length - 1] : this.levelDistanceArr[l];
        a += r;
      }
      return o > 0 ? a : a * -1;
    } else
      return o * n;
  }
}
function Le(e, i, t, o, n, s, a, l, r) {
  const c = n - e, f = s - i, u = Math.sqrt(c * c + f * f), h = r * f / u, g = -(r * c) / u, p = e + h, y = i + g, v = e - t / 2, x = e + t / 2, z = i - o / 2, S = i + o / 2;
  let P = [];
  if (c !== 0) {
    let $ = (v - p) / c, C = y + $ * f;
    C >= z && C <= S && P.push({ x: v, y: C });
    let M = (x - p) / c, O = y + M * f;
    O >= z && O <= S && P.push({ x, y: O });
  }
  if (f !== 0) {
    let $ = (z - y) / f, C = p + $ * c;
    C >= v && C <= x && P.push({ x: C, y: z });
    let M = (S - y) / f, O = p + M * c;
    O >= v && O <= x && P.push({ x: O, y: S });
  }
  let B = null, D = 1 / 0;
  return P.forEach(($) => {
    const C = Math.sqrt(($.x - n) ** 2 + ($.y - s) ** 2);
    C < D && (D = C, B = $);
  }), B;
}
const V = {
  getRectPoint(e, i, t, o, n, s, a, l, r = !1, c = 1, f = 1, u = 14) {
    const h = f - (c - 1) / 2, g = e + n / 2, p = i + s / 2, y = t + a / 2, v = o + l / 2;
    if (c > 1) {
      const M = u * h, O = Le(
        g,
        p,
        n,
        s,
        y,
        v,
        a,
        l,
        M
      );
      if (O)
        return O;
    }
    const x = g < y ? 1 : -1, z = p < v ? 1 : -1;
    if (v === p)
      return { x: g + x * n / 2, y: p };
    const S = Math.abs((y - g) / (v - p)), P = n / s;
    let B = 0, D = 0;
    S < P ? (B = x * s / 2 * S + z * P, D = z * s / 2) : (B = x * n / 2, D = z * n / 2 / S + x * P);
    const $ = g + B, C = p + D;
    return { x: $, y: C };
  },
  getRectPointBasic(e, i, t, o, n, s, a, l) {
    const r = e + n / 2, c = i + s / 2, f = t + a / 2, u = o + l / 2;
    let h = u === c ? 0 : (f - r) / (u - c);
    h === 0 && (h = (f - r) / (u - c + 1));
    const g = n / l;
    let p = 0, y = 0, v = "1";
    return -1 * g < h && h < g ? (v = "2", c < u ? (p = s / 2 * h, y = s / 2) : (p = -1 * s / 2 * h, y = -1 * s / 2)) : (r < f ? (p = 1 * n / 2, y = 1 * n / 2 / h) : (p = -1 * n / 2, y = -1 * n / 2 / h), v = "3"), { x: r + p, y: c + y, _case: v };
  },
  getRectJoinPoint(e, i, t, o, n, s, a, l) {
    const r = e + n / 2, c = i + s / 2, f = t + a / 2, u = o + l / 2, h = Math.round(Math.atan2(u - c, f - r) * 180 / 3.14) + 135;
    return h >= 0 && h < 90 ? { x: e + n / 2, y: i - 5 } : h >= 90 && h < 180 ? { x: e + n + 5, y: i + s / 2 } : h >= 180 && h < 270 ? { x: e + n / 2, y: i + s + 5 } : { x: e - 5, y: i + s / 2 };
  },
  getRectHJoinPoint(e, i, t, o, n, s, a) {
    const l = s / 2;
    return e + n < t ? { x: e + n + 5, y: i + l } : e + n < t + a ? { x: e - 5, y: i + l } : { x: e - 5, y: i + l };
  },
  getRectLeftJoinPoint(e, i, t, o, n, s, a) {
    const l = s / 2;
    return { x: e, y: i + l };
  },
  getRectRightJoinPoint(e, i, t, o, n, s, a) {
    const l = s / 2;
    return { x: e + n, y: i + l };
  },
  getRectTopJoinPoint(e, i, t, o, n, s, a) {
    return { x: e + n / 2, y: i };
  },
  getRectBottomJoinPoint(e, i, t, o, n, s, a, l, r, c, f, u, h = 14, g) {
    return g !== void 0 ? { x: e + g, y: i + s } : { x: e + n / 2, y: i + s };
  },
  getRectVJoinPoint(e, i, t, o, n, s, a, l) {
    const r = n / 2;
    return i + s < o ? { y: i + s + 5, x: e + r } : i + s < o + l ? { y: i - 5, x: e + r } : { y: i - 5, x: e + r };
  },
  getBorderPoint(e, i, t, o, n, s, a, l, r) {
    return r === 0 ? this.getCirclePoint(e, i, t, o, n, s, a, l) : this.getRectPoint(e, i, t, o, n, s, a, l);
  },
  getBorderPoint4MultiLine(e, i, t, o, n, s, a, l, r, c, f, u, h = 14) {
    return r === 0 ? this.getCirclePoint4MultiLine(e, i, t, o, n, s, a, l, c, f, u, h) : this.getRectPoint(e, i, t, o, n, s, a, l, c, f, u, h);
  },
  getCirclePoint(e, i, t, o, n, s, a, l) {
    const r = t + a / 2, c = o + l / 2, f = e + n / 2, u = i + s / 2, h = r - f;
    if (h === 0)
      return { x: f, y: u - s / 2 * (c < u ? 1 : -1) };
    const p = (c - u) / h, y = Math.sqrt(1 / (1 / (n / 2) ** 2 + p ** 2 / (s / 2) ** 2)) * (r < f ? 1 : -1), v = p * y;
    return { x: f - y, y: u - v };
  },
  getCirclePoint4MultiLine(e, i, t, o, n, s, a, l, r, c, f, u, h = 0) {
    let g = t + a / 2;
    const p = o + l / 2;
    let y = e + n / 2;
    const v = i + s / 2;
    let x = g - y;
    x > -1 && x < 1 && (g = g - 2, y = y + 2, x = -4);
    const P = (f - (c - 1) / 2) * u, B = p - v, D = Math.sqrt(x ** 2 + B ** 2) * P / x, $ = B / x, C = n / 2, M = s / 2, O = y < g ? -1 : 1, E = (-1 * C ** 2 * $ * D + C * M * Math.sqrt(Math.abs(M ** 2 + $ ** 2 * C ** 2 - D ** 2)) / O) / (M ** 2 + C ** 2 * $ ** 2), N = $ * E + D;
    return { x: y - E, y: v - N };
  },
  getCirclePointBasic(e, i, t, o, n, s, a, l, r) {
    const c = e + n / 2, f = i + s / 2, u = t + a / 2, h = o + l / 2, g = u - c, p = h - f, y = Math.sqrt(g * g + p * p), v = y - r, x = v * g / y * -1, z = v * p / y * -1;
    return { x: u + x, y: h + z };
  },
  getCirclePointPlus(e, i, t, o, n, s, a, l) {
    const r = e + n / 2, c = i + s / 2, f = t + a / 2, u = o + l / 2, h = f - r, g = u - c, p = Math.sqrt(h * h + g * g), y = (p - n / 2) * h / p * -1, v = (p - s / 2) * g / p * -1;
    return { x: f + y, y: u + v };
  },
  getOvalPoint(e, i, t, o, n, s = 180) {
    const a = o * (360 / n), l = (180 - s + a) * Math.PI / 180;
    return {
      x: e + t * Math.sin(l),
      y: i + t * Math.cos(l) * -1
    };
  },
  getAngleType(e, i) {
    if (e >= 0 && i >= 0)
      return 1;
    if (e < 0 && i >= 0)
      return 2;
    if (e < 0 && i < 0)
      return 3;
    if (e >= 0 && i < 0)
      return 4;
  },
  getTextAngle(e, i, t, o) {
    let n = Math.atan2(o - i, t - e) * 180 / Math.PI;
    return n < 0 && (n += 360), n > 90 && n <= 270 && (n += 180), n >= 360 && (n -= 360), Math.round(n);
  },
  getTreePointFromTop(e, i, t, o, n, s) {
    return e ? {
      x: e - 300 + Math.max(600 / ((n === 1 ? 2 : n) - 1), 80) * o,
      y: i + t
    } : {
      x: (s.canvas_width - s.node_width) / 2,
      y: (s.canvas_height - s.node_height) / 2 - 200
    };
  },
  getTreePointFromRight(e, i, t, o, n, s) {
    return e ? {
      x: e - t,
      y: i - 200 + Math.max(400 / ((n === 1 ? 2 : n) - 1), 80) * o
    } : {
      x: (s.canvas_width - s.node_width) / 2 + 300,
      y: (s.canvas_height - s.node_height) / 2
    };
  },
  getTreePointFromBottom(e, i, t, o, n, s) {
    return e ? {
      x: e - 300 + Math.max(600 / ((n === 1 ? 2 : n) - 1), 80) * o,
      y: i - t
    } : {
      x: (s.canvas_width - s.node_width) / 2,
      y: (s.canvas_height - s.node_height) / 2 + 200
    };
  },
  getTreePointFromLeft(e, i, t, o, n, s) {
    return e ? {
      x: e + t,
      y: i - 200 + Math.max(400 / ((n === 1 ? 2 : n) - 1), 80) * o
    } : {
      x: (s.canvas_width - s.node_width) / 2 - 300,
      y: (s.canvas_height - s.node_height) / 2
    };
  }
};
class it extends nt {
  constructor(t, o, n) {
    super(t, o);
    _(this, "layoutOptions");
    _(this, "fastStart", !1);
    _(this, "maxLayoutTimes", 300);
    _(this, "byNode", !0);
    _(this, "byLine", !0);
    _(this, "lockX", !1);
    _(this, "lockY", !1);
    _(this, "force_node_repulsion", 1);
    _(this, "force_line_elastic", 1);
    _(this, "justLayoutSingleNode", !1);
    _(this, "layoutTimes", 0);
    _(this, "prev10", []);
    _(this, "visibleNodes", []);
    _(this, "viewUpdate");
    _(this, "calcNodeMap", /* @__PURE__ */ new WeakMap());
    _(this, "forCalcNodes", []);
    _(this, "maxVaildLineLength", 300);
    _(this, "minVaildLineLength", 30);
    _(this, "zeroEffectNodeDistance", 400);
    _(this, "minNodeDistance", 30);
    _(this, "maxMoveSpeed", 100);
    this.layoutOptions = t, this.layoutOptions.fastStart !== void 0 && (this.fastStart = this.layoutOptions.fastStart), this.layoutOptions.maxLayoutTimes !== void 0 && (this.maxLayoutTimes = this.layoutOptions.maxLayoutTimes), this.layoutOptions.byNode !== void 0 && (this.byNode = this.layoutOptions.byNode), this.layoutOptions.byLine !== void 0 && (this.byLine = this.layoutOptions.byLine), this.layoutOptions.force_node_repulsion !== void 0 && (this.force_node_repulsion = this.layoutOptions.force_node_repulsion), this.layoutOptions.force_line_elastic !== void 0 && (this.force_line_elastic = this.layoutOptions.force_line_elastic), this.layoutOptions.force_x_coefficient === void 0 && (this.layoutOptions.force_x_coefficient = 1), this.layoutOptions.force_y_coefficient === void 0 && (this.layoutOptions.force_y_coefficient = 1), this.layoutOptions.disableLiveChanges === void 0 && (this.layoutOptions.disableLiveChanges = !1), this.requireLinks = !0, n && this.setGraphInstance(n);
  }
  refresh() {
    this.placeNodes(this.allNodes, this.rootNode);
  }
  placeNodes(t, o) {
    if (d("!!!SeeksForceLayouter.placeNodes"), o)
      d("layout by root:", o);
    else {
      d("root is null:", o);
      return;
    }
    if (this.allNodes = t, this.rootNode = o, this.layoutOptions.fixedRootNode) {
      if (!Number.isNaN(o.x) || o.x === void 0)
        o.lot.x = m.getLotXByNodeX(this.graphOptions, o), o.lot.y = m.getLotYByNodeY(this.graphOptions, o);
      else {
        const s = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
        o.lot.x = 0 + s, o.lot.y = 0 + a;
      }
      const n = this.easyAnalysisNodes(o);
      this.easyPlaceRelativePosition(o, n), n.forEach((s) => {
        if (s.fixed === !0 || !m.isAllowShowNode(s))
          return;
        const a = s.offset_x || 0, l = s.offset_y || 0;
        s.x = s.lot.x + a - m.getNodeWidth(s, this.graphOptions) / 2, s.y = s.lot.y + l - m.getNodeHeight(s, this.graphOptions) / 2, s.lot.placed = !0;
      });
    } else
      this.fastStart ? (d("!!!initNodesPosition fastStart"), this.allNodes.forEach((n) => {
        n.fixed !== !0 && (n.lot.placed || (n.x || (n.x = Math.floor(Math.random() * 200) - 100), n.x || (n.y = Math.floor(Math.random() * 200) - 100), n.lot.placed = !0));
      })) : (d("!!!initNodesPosition....."), this.easyPlaceGroupNodes(this.rootNode).forEach((s) => {
        if (s.fixed === !0 || !m.isAllowShowNode(s))
          return;
        const a = s.offset_x || 0, l = s.offset_y || 0;
        s.x = s.lot.x + a - m.getNodeWidth(s, this.graphOptions) / 2, s.y = s.lot.y + l - m.getNodeHeight(s, this.graphOptions) / 2, s.lot.placed = !0;
      }));
    if (d("Start Auto Layout....."), this.updateVisibleNodes(), this.isMainLayouer && this.graphOptions.autoLayouting) {
      d("!!!autoLayouting.....");
      return;
    }
    this.autoLayout(!0);
  }
  easyPlaceGroupNodes(t) {
    if (d("[layout canvasOffset]", this.graphOptions.viewSize, this.graphOptions.canvasSize), t) {
      t.fixed ? (t.origin_x === void 0 && (t.origin_x = t.x, t.origin_y = t.y), t.lot.x = t.origin_x, t.lot.y = t.origin_y, d("root fixed position:", t.lot.x, t.lot.y)) : this.layoutOptions.fixedRootNode ? (t.lot.x = m.getLotXByNodeX(this.graphOptions, t), t.lot.y = m.getLotYByNodeY(this.graphOptions, t)) : (t.lot.x = 0, t.lot.y = 0, d("root position:", t.lot.x, t.lot.y));
      const o = this.easyAnalysisNodes(t);
      return this.easyPlaceRelativePosition(t, o), o;
    }
    return [];
  }
  easyAnalysisNodes(t) {
    this.allNodes.forEach((s) => {
      s.lot.eached = !1, s.lot.notLeafNode = !1, s.lot.childs = [], s.lot.parent = void 0, s.lot.index_of_parent = 0, s.lot.strength = 0, s.lot.placed = !1;
    });
    const o = [], n = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    return m.analysisNodes4Didirectional(o, [t], 0, n, 0), o;
  }
  easyPlaceRelativePosition(t, o) {
    o.forEach((s) => {
      if (s.lot.subling.level === 1) {
        const a = s.lot.subling;
        if (a) {
          const l = V.getOvalPoint(t.lot.x, t.lot.y, a.level * 50, s.lot.strength_plus - s.lot.strength / 2, a.all_strength, this.layoutOptions.startAngle);
          s.lot.x = l.x, s.lot.y = l.y;
        }
      }
    }), o.forEach((s) => {
      const a = s.lot.subling;
      if (a && a.level > 1) {
        const l = s.lot.parent.lot.strength_plus - s.lot.parent.lot.strength, c = (s.lot.parent.lot.strength_plus - l) / (s.lot.parent.lot.childs.length + 1) * (s.lot.index_of_parent + 1), f = V.getOvalPoint(t.lot.x, t.lot.y, (a.level - 1) * (100 + (a.level - 1) * 60) + 50, l + c, s.lot.parent.lot.subling.all_strength, this.layoutOptions.startAngle);
        s.lot.x = f.x, s.lot.y = f.y;
      }
    });
  }
  updateVisibleNodes(t) {
    this.visibleNodes = [], t && (this.allNodes = t), this.allNodes.forEach((o) => {
      m.isAllowShowNode(o) && (o.lot ? o.lot.placed = !0 : (d("node miss lot:", o.text), o.lot = {
        placed: !0,
        childs: []
      }), this.visibleNodes.push(o));
    }), this.resetCalcNodes(), d("visibleNodes:", this.visibleNodes.length);
  }
  autoLayout(t = !1) {
    this.layoutTimes = 0, this.updateVisibleNodes(), d("Layout set viewUpdate:", this.viewUpdate), this.doForceLayout(0);
  }
  layoutFinished() {
    this.isMainLayouer && (this.graphOptions.autoLayouting = !1), d("Layout finished"), this.layoutOptions.disableLiveChanges && (this.visibleNodes.forEach((t) => {
      const o = this.calcNodeMap.get(t);
      t.x = o.x, t.y = o.y;
    }), this.viewUpdate && this.viewUpdate(), d("Layout apply finished"));
  }
  resetCalcNodes() {
    d("resetCalcNodes:", this.visibleNodes.length), this.forCalcNodes = [], this.calcNodeMap = /* @__PURE__ */ new WeakMap(), this.visibleNodes.forEach((t) => {
      const o = {
        rgNode: t,
        Fx: 0,
        Fy: 0,
        x: t.x,
        y: t.y,
        ignoreForce: t.dragging || this.justLayoutSingleNode && !t.singleNode,
        force_weight: t.force_weight || 1,
        forceCenterOffset_X: (t.width || t.el.offsetWidth || 60) / 2,
        forceCenterOffset_Y: (t.height || t.el.offsetHeight || 60) / 2,
        fixed: t.fixed || !1
      };
      this.forCalcNodes.push(o), this.calcNodeMap.set(t, o);
    });
  }
  doForceLayout(t) {
    if (this.graphOptions.instanceDestroyed) {
      d("stop layout:instanceDestroyed");
      return;
    }
    let o = "0";
    if (t > 0 ? (this.prev10.length >= 10 && (this.prev10.splice(0, 1), o = (1e3 / ((this.prev10[this.prev10.length - 1] - this.prev10[0]) / 10)).toFixed(1)), this.prev10.push(t)) : this.visibleNodes.length === 0 && this.updateVisibleNodes(), d("this.layoutTimes:", this.layoutTimes, "of", this.maxLayoutTimes, "Current refresh rate:", o, "Hz", this.visibleNodes.length), this.layoutTimes > this.maxLayoutTimes) {
      this.layoutFinished();
      return;
    }
    this.isMainLayouer && (this.graphOptions.autoLayouting = !0), this.layoutTimes++, this.calcNodesPosition();
    for (const n of this.forCalcNodes)
      this.applyToNodePosition(n);
    this.layoutOptions.disableLiveChanges ? requestAnimationFrame(this.doForceLayout.bind(this)) : (this.viewUpdate && this.viewUpdate(), requestAnimationFrame(this.doForceLayout.bind(this)));
  }
  setGraphInstance(t) {
    this.viewUpdate = () => {
      t._dataUpdated();
    }, t.addEventListener((o, n) => {
      if (o === "node-drag-start") {
        const s = this.calcNodeMap.get(n.node);
        s && (s.ignoreForce = !0);
      } else if (o === "node-dragging") {
        const s = this.calcNodeMap.get(n.node);
        s && (s.x = n.x, s.y = n.y);
      } else if (o === "node-drag-end") {
        const s = this.calcNodeMap.get(n.node);
        s && (s.ignoreForce = !1);
      }
    });
  }
  calcNodesPosition() {
    if (this.byNode)
      for (let t = 0; t < this.forCalcNodes.length; t++) {
        const o = this.forCalcNodes[t];
        if (!o.ignoreForce && !o.fixed) {
          for (let n = 0; n < this.forCalcNodes.length; n++)
            if (t !== n) {
              const s = this.forCalcNodes[n];
              if (s.ignoreForce)
                continue;
              this.addGravityByNode(o, s);
            }
        }
      }
    if (this.byLine) {
      if (this.allLinks && this.allLinks.length > 0) {
        for (const t of this.allLinks)
          if (!t.forDisplayOnly) {
            let o = 1;
            for (const n of t.relations)
              n.force_elastic && n.force_elastic !== 1 && (o = n.force_elastic);
            if (this.visibleNodes.includes(t.fromNode) && this.visibleNodes.includes(t.toNode)) {
              const n = this.calcNodeMap.get(t.fromNode), s = this.calcNodeMap.get(t.toNode);
              this.addElasticByLine(
                n,
                s,
                o
              );
            }
          }
      } else
        for (const t of this.visibleNodes)
          if (t.lot && t.lot.parent) {
            const o = this.calcNodeMap.get(t.lot.parent), n = this.calcNodeMap.get(t);
            this.addElasticByLine(
              o,
              n,
              1
            );
          }
    }
  }
  stop() {
    d("[SeeksForceLayouter]stop:", this.graphOptions.autoLayouting), this.layoutTimes = 1e6;
  }
  addElasticByLine(t, o, n = 1) {
    const s = t.x, a = t.y, l = o.x, r = o.y;
    let c = Math.sqrt((a - r) ** 2 + (s - l) ** 2);
    if (c < this.minVaildLineLength)
      return;
    c > this.maxVaildLineLength && (c = this.maxVaildLineLength);
    const f = (c - this.minVaildLineLength) * 0.05 * this.force_line_elastic * n, u = f, h = f, g = (s - l) / c, p = (a - r) / c;
    this.addFtoNode(t, g * u * -1, p * u * -1), this.addFtoNode(o, g * h, p * h);
  }
  addGravityByNode(t, o) {
    const n = t.x, s = t.y, a = o.x, l = o.y;
    if (Math.abs(n - a) > this.zeroEffectNodeDistance || Math.abs(s - l) > this.zeroEffectNodeDistance)
      return;
    const r = Math.sqrt((s - l) ** 2 + (n - a) ** 2);
    if (r > this.zeroEffectNodeDistance)
      return;
    let c = (this.zeroEffectNodeDistance - r) * 0.05 * this.force_node_repulsion;
    r < this.minNodeDistance && (c = c * 2);
    const f = (n - a) / r, u = (s - l) / r;
    this.addFtoNode(t, f * c, u * c);
  }
  addFtoNode(t, o, n) {
    if (t.ignoreForce || Number.isNaN(o) || Number.isNaN(n))
      return;
    o > 50 && (o = 50), n > 50 && (n = 50), o < -50 && (o = -50), n < -50 && (n = -50);
    const s = t.force_weight || 1;
    this.lockX || (t.Fx += o * (1 / s)), this.lockY || (t.Fy += n * (1 / s));
  }
  applyToNodePosition(t) {
    if (t.fixed)
      return;
    let o = t.Fx, n = t.Fy;
    if (o > this.maxMoveSpeed && (o = this.maxMoveSpeed), n > this.maxMoveSpeed && (n = this.maxMoveSpeed), o < -this.maxMoveSpeed && (o = -this.maxMoveSpeed), n < -this.maxMoveSpeed && (n = -this.maxMoveSpeed), t.x = t.x + o * this.layoutOptions.force_x_coefficient, t.y = t.y + n * this.layoutOptions.force_y_coefficient, !this.layoutOptions.disableLiveChanges) {
      const s = t.rgNode;
      t.ignoreForce || (s.x = t.x, s.y = t.y);
    }
    t.Fx = t.Fx * 0.7, t.Fy = t.Fy * 0.7;
  }
}
class Jt extends it {
  constructor(t, o, n) {
    super(t, o, n);
    _(this, "layoutOptions");
    this.layoutOptions = t;
  }
  refresh() {
    return w(this, null, function* () {
      d("SeeksCenterLayouter:refresh"), yield this.placeNodes(this.allNodes, this.rootNode);
    });
  }
  placeNodes(t, o) {
    return w(this, null, function* () {
      if (d("SeeksCenterLayouter:placeNodes"), !o) {
        d("root is null:", o);
        return;
      }
      d("layout by root:", o), this.allNodes = t, this.rootNode = o, t.forEach((a) => {
        a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.placed = !1;
      });
      let n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      };
      if (m.analysisNodes(n, [this.rootNode], 0, s), n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      }, m.analysisNodes4Didirectional(n, [this.rootNode], 0, s, 0), o.fixed)
        o.origin_x === void 0 && (o.origin_x = o.x, o.origin_y = o.y), o.lot.x = o.origin_x, o.lot.y = o.origin_y, d("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", o.text, o.x, o.y);
      else if (this.layoutOptions.fixedRootNode)
        o.lot.x = m.getLotXByNodeX(this.graphOptions, o), o.lot.y = m.getLotYByNodeY(this.graphOptions, o);
      else {
        const a = this.layoutOptions.centerOffset_x || 0, l = this.layoutOptions.centerOffset_y || 0;
        o.lot.x = 0 + a, o.lot.y = 0 + l;
      }
      d("root position:", o.lot.x, o.lot.y), this.placeRelativePosition(this.rootNode, n, s), this.graphOptions.useAnimationWhenExpanded ? (d("Play layout animation....."), yield this.animationLayout()) : n.forEach((a) => {
        if (a.fixed === !0 || !m.isAllowShowNode(a))
          return;
        const l = a.offset_x || 0, r = a.offset_y || 0, c = -m.getNodeWidth(a, this.graphOptions) / 2, f = -m.getNodeHeight(a, this.graphOptions) / 2;
        a.x = a.lot.x + l + c, a.y = a.lot.y + r + f, a.lot.placed = !0;
      });
    });
  }
  getLevelDistanceArr() {
    let t = [];
    if (this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? t = this.layoutOptions.levelDistance.split(",").map((o) => Number.parseInt(o)) : Array.isArray(this.layoutOptions.levelDistance) && (t = this.layoutOptions.levelDistance), t.length > 0 && t.length < 10))
      for (let o = t.length; o < 10; o++)
        t.push(t[t.length - 1]);
    return t;
  }
  getLevelR(t, o) {
    if (t.length === 0)
      return;
    let n = 0;
    for (let s = 0; s < o && s < t.length; s++)
      n += t[s];
    return n;
  }
  placeRelativePosition(t, o, n) {
    const s = this.layoutOptions.distance_coefficient === void 0 ? 1 : this.layoutOptions.distance_coefficient, a = this.getLevelDistanceArr(), l = Math.min(this.graphOptions.viewSize.height, this.graphOptions.viewSize.width) * 0.4;
    let r = Math.min(Math.max(l, 150), 400) * s;
    d("analyticResult:", this.layoutOptions, n, l, r, s, a);
    let c = 0;
    o.forEach((u) => {
      const h = u.lot.subling;
      if (h && h.level === 1) {
        c = Math.round(h.all_size * 60 / Math.PI / 2), c < r && (c = r);
        const g = this.getLevelR(a, h.level) || h.level * c, p = V.getOvalPoint(t.lot.x, t.lot.y, g, u.lot.strength_plus - u.lot.strength / 2, h.all_strength, this.layoutOptions.startAngle);
        u.lot.x = p.x, u.lot.y = p.y;
      }
    });
    const f = Math.round(300 * s);
    o.forEach((u) => {
      const h = u.lot.subling;
      if (h && h.level > 1) {
        const g = u.lot.parent.lot.strength_plus - u.lot.parent.lot.strength, y = (u.lot.parent.lot.strength_plus - g) / (u.lot.parent.lot.childs_size + 1) * (u.lot.index_of_parent + 1), v = this.getLevelR(a, h.level) || (h.level - 1) * f + c, x = V.getOvalPoint(t.lot.x, t.lot.y, v, g + y, u.lot.parent.lot.subling.all_strength, this.layoutOptions.startAngle);
        u.lot.x = x.x, u.lot.y = x.y;
      }
    });
  }
}
class qt extends it {
  constructor(i, t, o) {
    super(i, t, o);
  }
  refresh() {
    return w(this, null, function* () {
      yield this.placeNodes(this.allNodes, this.rootNode);
    });
  }
  placeNodes(i, t) {
    return w(this, null, function* () {
      if (t)
        d("layout by root:", t);
      else {
        d("root is null:", t);
        return;
      }
      this.allNodes = i, this.rootNode = t, i.forEach((r) => {
        r.lot.eached = !1, r.lot.notLeafNode = !1, r.lot.childs = [], r.lot.parent = void 0, r.lot.index_of_p_childs = 0, r.lot.strength = 0;
      });
      const o = this.layoutOptions.centerOffset_x || 0, n = this.layoutOptions.centerOffset_y || 0, s = {
        x: o,
        y: n
      }, a = this.allNodes.length;
      let l = a * 90 / Math.PI / 2;
      l < 200 && (l = 200), l > 800 && (l = 800), this.allNodes.forEach((r, c) => {
        const f = V.getOvalPoint(s.x, s.y, l, c, a);
        r.lot.x = f.x, r.lot.y = f.y;
      }), this.graphOptions.useAnimationWhenExpanded ? (d("Play layout animation....."), yield this.animationLayout()) : this.allNodes.forEach((r) => {
        if (r.fixed === !0 || !m.isAllowShowNode(r))
          return;
        const c = r.offset_x || 0, f = r.offset_y || 0, u = -m.getNodeWidth(r, this.graphOptions) / 2, h = -m.getNodeHeight(r, this.graphOptions) / 2;
        r.x = r.lot.x + c + u, r.y = r.lot.y + f + h, r.lot.placed = !0;
      });
    });
  }
}
class Kt extends nt {
  constructor(t, o) {
    super(t, o);
    _(this, "graphOptions");
    _(this, "layoutOptions");
    _(this, "allNodes", []);
    _(this, "__origin_nodes", []);
    this.layoutOptions = t, this.graphOptions = o;
  }
  refresh() {
    this.placeNodes(this.__origin_nodes, this.rootNode);
  }
  placeNodes(t, o) {
    if (o)
      d("layout by root:", o);
    else {
      d("root is null:", o);
      return;
    }
    d("allNodes:", t.length), this.__origin_nodes = t, this.rootNode = o, t.forEach((s) => {
      s.lot.eached = !1, s.lot.notLeafNode = !1, s.lot.childs = [], s.lot.parent = void 0, s.lot.index_of_parent = 0, s.lot.strength = 0, s.lot.placed = !1, s.x || (s.x = 0), s.y || (s.y = 0), Number.isNaN(s.x) && (s.x = 0), Number.isNaN(s.y) && (s.y = 0);
    }), this.allNodes = [];
    const n = {
      max_strength: 1,
      max_deep: 1,
      max_length: 1
    };
    m.analysisNodes4Didirectional(this.allNodes, [this.rootNode], 0, n, 0), d("[layout canvasOffset]", this.graphOptions.viewSize, this.graphOptions.canvasSize);
  }
}
class ke extends nt {
  constructor(t, o, n) {
    super(t, o);
    _(this, "graphInstance");
    _(this, "layoutOptions");
    _(this, "levelDistanceArr", []);
    this.layoutOptions = t, d("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((s) => Number.parseInt(s)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.requireLinks = !0, this.graphInstance = n;
  }
  refresh() {
    return w(this, null, function* () {
      d("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), yield this.placeNodes(this.allNodes, this.rootNode);
    });
  }
  analysisNodes4Didirectional(t, o, n, s) {
    this.analysisBothWay(t, o, n, s);
    const a = {};
    t.forEach((c) => {
      const f = c.lot.level + "";
      a[f] || (a[f] = []), a[f].push(c), c.lot.subling = {
        level: c.lot.level,
        all_size: 0,
        all_strength: 0
      };
    }), t.forEach((c) => {
      const f = c.lot.level + "", u = a[f], h = u.length;
      c.lot.index_of_level = u.indexOf(c), c.lot.subling.all_size = h, c.lot.subling.all_strength += c.lot.strength || 1, c.lot.strength_plus = c.lot.subling.all_strength;
    }), t.forEach((c) => {
      c.lot.childs_size > 0 && (c.lot.strengthWithChilds = 0);
    }), t.forEach((c) => {
      c.lot.childs_size === 0 && (c.lot.strengthWithChilds = 1, m.conductStrengthToParents(c));
    });
    const l = Object.keys(a).map((c) => Number.parseInt(c)).sort(), r = (c) => {
      const f = c + "", u = a[f];
      let h = 0;
      u.forEach((g) => {
        g.lot.parent && h < g.lot.parent.lot.strengthWithChilds_from && (h = g.lot.parent.lot.strengthWithChilds_from), c === 0 ? h += 1 : g.lot.strengthWithChilds_from = h, d("levels:", c, h, g.text, g.lot.strengthWithChilds), h += g.lot.strengthWithChilds;
      });
    };
    [0].forEach(r), l.filter((c) => c > 0).forEach(r), l.filter((c) => c < 0).forEach(r);
  }
  analysisBothWay(t, o, n, s) {
    d(`level ${n} size: ${o.length}`), o.length > s.max_length && (s.max_length = o.length), n > s.max_deep && (s.max_deep = n);
    const a = {
      level: n,
      all_size: o.length,
      all_strength: 0
    };
    o.forEach((r) => {
      r.lot || (r.lot = { childs: [] }), r.lot.eached = !0, r.lot.subling = a, r.lot.level = n, t.push(r);
    });
    let l = 0;
    o.forEach((r) => {
      let c = 0, f = 0, u = [];
      r.targetFrom.forEach((h) => {
        h.lot || (h.lot = { eached: !1, childs: [] }), h.lot.eached || (h.lot.parent = r, m.isAllowShowNode(h) ? (h.lot.eached = !0, h.lot.index_of_parent = f++, r.lot.childs.push(h), u.push(h), c++) : r.lot.childs.push(h));
      }), this.analysisBothWay(t, u, n - 1, s), u = [], r.targetTo.forEach((h) => {
        h.lot || (h.lot = { eached: !1, childs: [] }), h.lot.eached || (h.lot.parent = r, m.isAllowShowNode(h) ? (h.lot.eached = !0, h.lot.index_of_parent = f++, r.lot.childs.push(h), u.push(h), c++) : r.lot.childs.push(h));
      }), this.analysisBothWay(t, u, n + 1, s), r.lot.strength = c > 0 ? c : 1, a.all_strength += r.lot.strength, r.lot.strength_plus = a.all_strength, r.lot.index_of_level = l, r.lot.childs_size = c, l++;
    }), a.all_strength > s.max_strength && (s.max_strength = a.all_strength);
  }
  placeNodes(t, o) {
    return w(this, null, function* () {
      if (d("SeeksBidirectionalTreeLayouter:placeNodes"), o)
        d("layout by root:", o);
      else {
        console.error("root is null");
        return;
      }
      this.rootNode = o, this.allNodes = t, d("allNodes:", t.length), t.forEach((c) => {
        c.lot.eached = !1, c.lot.notLeafNode = !1, c.lot.childs = [], c.lot.parent = void 0, c.lot.index_of_parent = 0, c.lot.strength = 0, c.lot.strengthWithChilds_from = 0, c.lot.strengthWithChilds = 0, c.lot.placed = !1;
      });
      let n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      };
      m.analysisNodes(n, [this.rootNode], 0, s), n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      }, this.analysisNodes4Didirectional(n, [this.rootNode], 0, s), this.placeNodesPosition(this.rootNode, n, s), d("allNodes:", n.length), this.graphOptions.useAnimationWhenExpanded ? (d("Play layout animation....."), yield this.animationLayout(), d("create rootNode coordinates:3", o.x, o.y)) : (this.allNodes.forEach((c) => {
        if (c.fixed === !0) {
          c.lot.placed = !0;
          return;
        }
        !m.isAllowShowNode(c) || (Number.isNaN(c.lot.x) && (d("bad lot x:", c.text, c.lot.x), c.lot.x = 0), Number.isNaN(c.lot.y) && (d("bad lot y:", c.text, c.lot.y), c.lot.y = 0), c.x = m.getNodeXByLotX(this.graphOptions, c), c.y = m.getNodeYByLotY(this.graphOptions, c), c.lot.placed = !0);
      }), d("create rootNode coordinates:1", o.x, o.y));
      const a = n.filter((c) => c.lot.level === 0), l = [];
      this.allLinks.forEach((c) => {
        a.includes(c.fromNode) && !a.includes(c.toNode) && l.push(c.toNode), a.includes(c.toNode) && !a.includes(c.fromNode) && l.push(c.fromNode);
      }), l.forEach((c) => {
        c.fixed = !0;
      }), a.push(...l);
      const r = new it({
        layoutName: "force",
        maxLayoutTimes: 100,
        force_node_repulsion: 0.1,
        force_line_elastic: 1,
        fixedRootNode: !0
      }, this.graphOptions, this.graphInstance);
      r.isMainLayouer = !1, r.requireLinks = !0, this.layoutOptions.from === "left" || this.layoutOptions.from === "right" ? r.lockX = !0 : r.lockY = !0, r.visibleNodes = a, r.setLinks(this.allLinks), r.viewUpdate = this.viewUpdate, r.resetCalcNodes(), r.doForceLayout(0);
    });
  }
  placeNodesPosition(t, o, n) {
    if (t.fixed !== !0) {
      const s = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      t.lot.x = s, t.lot.y = a, this.layoutOptions.fixedRootNode ? (t.lot.x = m.getLotXByNodeX(this.graphOptions, t), t.lot.y = m.getLotYByNodeY(this.graphOptions, t)) : this.layoutOptions.from === "top" ? t.lot.y -= this.graphOptions.viewSize.height / 2 - 100 : this.layoutOptions.from === "bottom" ? t.lot.y += this.graphOptions.viewSize.height / 2 - 200 : this.layoutOptions.from === "right" ? t.lot.x += this.graphOptions.viewSize.width / 2 - 100 : t.lot.x -= this.graphOptions.viewSize.width / 2 - 100, d("debug0910:Graph center:", t.lot.x, t.lot.y, { _center_offset_x: s, _center_offset_y: a });
    } else
      t.origin_x === void 0 && (t.origin_x = t.x, t.origin_y = t.y), t.lot.x = t.origin_x, t.lot.y = t.origin_y, d("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", t.text, t.x, t.y);
    t.lot.placed = !0, this.placeRelativePosition(t, o, n);
  }
  placeRelativePosition(t, o, n) {
    const s = this.graphOptions.viewSize;
    if (this.layoutOptions.from === "left" || this.layoutOptions.from === "right") {
      const a = I(this.layoutOptions.min_per_height) || 80, l = I(this.layoutOptions.max_per_height) || 400, r = I(this.layoutOptions.min_per_width) || 430, c = I(this.layoutOptions.max_per_width) || 650;
      let f = Math.round((s.width - 10) / (n.max_deep + 2));
      f < r && (f = r), f > c && (f = c);
      let u = Math.round(s.height / (n.max_strength + 1));
      u < a && (u = a), u > l && (u = l), o.forEach((h) => {
        h.fixed !== !0 && h.lot.placed !== !0 && h !== t && (this.layoutOptions.from === "right" ? h.lot.x = t.lot.x - this.getLevelDistance(h, h.lot.subling.level, f) : h.lot.x = t.lot.x + this.getLevelDistance(h, h.lot.subling.level, f));
      }), o.forEach((h) => {
        h.fixed !== !0 && (h.lot.level === 0 ? h !== t && (h.lot.y = t.lot.y + u * h.lot.index_of_level) : h.lot.y = t.lot.y + u * (n.max_strength / -2 + h.lot.strengthWithChilds_from + h.lot.strengthWithChilds / 2));
      });
    } else {
      const a = I(this.layoutOptions.min_per_height) || 350, l = I(this.layoutOptions.max_per_height) || 400, r = I(this.layoutOptions.min_per_width) || 250, c = I(this.layoutOptions.max_per_width) || 500;
      let f = Math.round((s.width - 10) / (n.max_strength + 2));
      f < r && (f = r), f > c && (f = c);
      let u = Math.round((s.height - 10) / (n.max_deep + 2));
      u < a && (u = a), u > l && (u = l), o.forEach((h) => {
        h.fixed !== !0 && h.lot.placed !== !0 && h !== t && (this.layoutOptions.from === "bottom" ? h.lot.y = t.lot.y - this.getLevelDistance(h, h.lot.subling.level, u) : h.lot.y = t.lot.y + this.getLevelDistance(h, h.lot.subling.level, u));
      }), o.forEach((h) => {
        h.fixed !== !0 && h.lot.level !== 0 && (h.lot.x = t.lot.x + f * (n.max_strength / -2 + h.lot.strengthWithChilds_from + h.lot.strengthWithChilds / 2));
      });
    }
  }
  getLevelDistance(t, o, n) {
    const s = Math.abs(o);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let l = 0; l < s; l++) {
        const r = this.levelDistanceArr[l] || 100;
        a += r;
      }
      return o > 0 ? a : a * -1;
    } else
      return o * n;
  }
}
class Se extends nt {
  constructor(t, o) {
    super(t, o);
    _(this, "enableGatherNodes", !1);
    _(this, "layoutOptions");
    _(this, "levelDistanceArr", []);
    this.layoutOptions = t, d("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((n) => Number.parseInt(n)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.enableGatherNodes = this.layoutOptions.enableGatherNodes;
  }
  refresh() {
    return w(this, null, function* () {
      d("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), yield this.placeNodes(this.allNodes, this.rootNode);
    });
  }
  analysisNodes4Didirectional(t, o, n, s, a) {
    d(`${a} level ${n} size: ${o.length}`), o.length > s.max_length && (s.max_length = o.length), n > s.max_deep && (s.max_deep = n);
    const l = {
      level: n,
      all_size: o.length,
      all_strength: 0
    }, r = [];
    o.forEach((f) => {
      f.lot || (f.lot = { childs: [] }), f.lot.eached = !0, f.lot.subling = l, f.lot.level = n, t.push(f);
    });
    let c = 0;
    o.forEach((f) => {
      let u = 0, h = a === -1 ? f.targetFrom : f.targetTo;
      n !== 0 && (h = f.targetNodes);
      let g = 0;
      h.forEach((p) => {
        p.lot || (p.lot = { eached: !1, childs: [] }), p.lot.eached || (p.lot.parent = f, m.isAllowShowNode(p) ? (p.lot.eached = !0, p.lot.index_of_parent = g++, f.lot.childs.push(p), r.push(p), u++) : f.lot.childs.push(p));
      }), f.lot.strength = u > 0 ? u : 1, l.all_strength += f.lot.strength, f.lot.strength_plus = l.all_strength, f.lot.index_of_level = c, f.lot.childs_size = u, c++;
    }), l.all_strength > s.max_strength && (s.max_strength = l.all_strength), r.length > 0 ? this.analysisNodes4Didirectional(t, r, n + a, s, a) : (t.forEach((f) => {
      f.lot.strengthWithChilds = 1, m.conductStrengthToParents4Folder(f);
    }), m.analysisDataFolder([t[0]], 0, a));
  }
  placeNodes(t, o) {
    return w(this, null, function* () {
      if (d("SeeksBidirectionalTreeLayouter:placeNodes"), o)
        d("layout by root:", o);
      else {
        console.error("root is null");
        return;
      }
      this.rootNode = o, this.allNodes = t, d("allNodes:", t.length), t.forEach((a) => {
        a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.strengthWithChilds_from = 0, a.lot.strengthWithChilds = 0, a.lot.placed = !1;
      });
      let n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      };
      m.analysisNodes(n, [this.rootNode], 0, s), n = [], s = {
        max_deep: 1,
        max_length: 1,
        max_strength: 1
      }, this.analysisNodes4Didirectional(n, [this.rootNode], 0, s, 1), this.placeNodesPosition(this.rootNode, n, s), d("allNodes:", n.length), this.graphOptions.useAnimationWhenExpanded ? (d("Play layout animation....."), yield this.animationLayout(), d("create rootNode coordinates:3", o.x, o.y)) : (this.allNodes.forEach((a) => {
        if (a.fixed === !0) {
          a.lot.placed = !0;
          return;
        }
        !m.isAllowShowNode(a) || (Number.isNaN(a.lot.x) && (d("bad lot x:", a.text, a.lot.x), a.lot.x = 0), Number.isNaN(a.lot.y) && (d("bad lot y:", a.text, a.lot.y), a.lot.y = 0), a.x = m.getNodeXByLotX(this.graphOptions, a), a.y = m.getNodeYByLotY(this.graphOptions, a), a.lot.placed = !0);
      }), d("create rootNode coordinates:1", o.x, o.y));
    });
  }
  placeNodesPosition(t, o, n) {
    if (t.fixed !== !0) {
      const s = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      t.lot.x = s, t.lot.y = a, this.layoutOptions.fixedRootNode ? (t.lot.x = m.getLotXByNodeX(this.graphOptions, t), t.lot.y = m.getLotYByNodeY(this.graphOptions, t)) : this.layoutOptions.from === "right" ? t.lot.x += this.graphOptions.viewSize.width / 2 - 100 : t.lot.x -= this.graphOptions.viewSize.width / 2 - 100, d("debug0910:Graph center:", t.lot.x, t.lot.y, { _center_offset_x: s, _center_offset_y: a });
    } else
      t.origin_x === void 0 && (t.origin_x = t.x, t.origin_y = t.y), t.lot.x = t.origin_x, t.lot.y = t.origin_y, d("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", t.text, t.x, t.y);
    t.lot.placed = !0, this.placeRelativePosition(t, o, n);
  }
  placeRelativePosition(t, o, n) {
    const s = I(this.layoutOptions.min_per_width) || 50, a = I(this.layoutOptions.min_per_height) || 40;
    o.forEach((l) => {
      l.fixed !== !0 && l.lot.placed !== !0 && l !== t && (this.layoutOptions.from === "right" ? l.lot.x = t.lot.x - this.getLevelDistance(l, l.lot.subling.level, s) : l.lot.x = t.lot.x + this.getLevelDistance(l, l.lot.subling.level, s));
    }), o.forEach((l) => {
      l.fixed !== !0 && l.lot.level !== 0 && (l.lot.y = t.lot.y + a * (l.lot.strengthWithChilds_from - 1));
    }), this.gatherNodes(o, "h", a);
  }
  gatherNodes(t, o, n) {
    if (!this.enableGatherNodes)
      return;
    const s = {};
    t.forEach((a) => {
      const l = a.lot.level + "";
      s[l] || (s[l] = []), s[l].push(a), a.lot.movedNodeSizeBefore = 1, a.lot.movedNodeSizeAfter = 1;
    }), t.forEach((a) => {
      if (a.fixed !== !0 && a.lot.level !== 0) {
        const l = a.lot.level + "", r = s[l];
        if (a.lot.strengthWithChilds === 1 && a.lot.childs_size <= 1) {
          const c = this.getBloomingNearByParent(a, a.lot.parent, r, o);
          c && (o === "h" ? a.lot.y - c.lot.y > 0 ? (a.lot.y = c.lot.y + n * c.lot.movedNodeSizeAfter, c.lot.movedNodeSizeAfter++) : (a.lot.y = c.lot.y - n * c.lot.movedNodeSizeBefore, c.lot.movedNodeSizeBefore++) : a.lot.x - c.lot.x > 0 ? (a.lot.x = c.lot.x + n * c.lot.movedNodeSizeAfter, c.lot.movedNodeSizeAfter++) : (a.lot.x = c.lot.x - n * c.lot.movedNodeSizeBefore, c.lot.movedNodeSizeBefore++));
        }
      }
    });
  }
  getBloomingNearByParent(t, o, n, s) {
    let a = 9999, l;
    for (const r of n)
      if (r.lot.childs_size > 1 && r.lot.parent === o) {
        const c = s === "h" ? r.lot.y - o.lot.y : r.lot.x - o.lot.x;
        Math.abs(c) < a && (a = Math.abs(c), l = r);
      }
    if (l && l !== t)
      return l;
  }
  getLevelDistance(t, o, n) {
    const s = Math.abs(o);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let l = 0; l < s; l++) {
        const r = l >= this.levelDistanceArr.length ? this.levelDistanceArr[this.levelDistanceArr.length - 1] : this.levelDistanceArr[l];
        a += r;
      }
      return o > 0 ? a : a * -1;
    } else
      return o * n;
  }
}
const rt = (e, i, t) => {
  t || (console.warn("\u6CE8\u610F\uFF0C\u5728relation-graph@2.1.32\u4EE5\u53CA\u66F4\u6539\u7248\u672C\u4E2D\u4F7F\u7528createLayout\u65B9\u6CD5\u65F6\uFF0C\u9700\u8981\u63D0\u4F9B\u7B2C\u4E09\u4E2A\u53C2\u6570: graphInstance"), console.warn("Note that when using the createLayout method in relation-graph@2.1.32 and changed versions, you need to provide a third parameter: graphInstance")), lt(e);
  let o = null;
  if (e.layoutName === "tree" ? o = new Zt(e, i) : e.layoutName === "center" ? o = new Jt(e, i, t) : e.layoutName === "circle" ? o = new qt(e, i, t) : e.layoutName === "force" ? o = new it(e, i, t) : e.layoutName === "fixed" ? o = new Kt(e, i) : e.layoutName === "smart-tree" ? o = new ke(e, i, t) : e.layoutName === "folder" && (o = new Se(e, i)), !o)
    throw new Error("unknown layout: " + e.layoutName);
  return i.isNeedShowAutoLayoutButton = e.allowAutoLayoutIfSupport !== !1 && o.autoLayout !== void 0, o;
}, lt = (e) => {
  if (typeof e.centerOffset_x == "string" && (e.centerOffset_x = parseInt(e.centerOffset_x)), typeof e.centerOffset_y == "string" && (e.centerOffset_y = parseInt(e.centerOffset_y)), e.layoutName === "center") {
    const i = e;
    i.layoutDirection === void 0 && (i.layoutDirection = "h"), i.centerOffset_x === void 0 && (i.centerOffset_x = 0), i.centerOffset_y === void 0 && (i.centerOffset_y = 0), i.layoutDirection = void 0;
  } else if (e.layoutName.includes("tree")) {
    const i = e;
    i.layoutDirection === void 0 && (i.layoutDirection = "h"), i.centerOffset_x === void 0 && (i.centerOffset_x = 0), i.centerOffset_y === void 0 && (i.centerOffset_y = 0), i.from === void 0 && (i.from = "top"), i.levelDistance === void 0 && (i.levelDistance = ""), (i.from === "top" || i.from === "bottom") && (i.layoutDirection = "v", d("set layoutDirection=v"), d("set defaultJunctionPoint=tb"), i.min_per_width === void 0 && (i.min_per_width = 100), i.max_per_width === void 0 && (i.max_per_width = 500), i.min_per_height === void 0 && (i.min_per_height = 300), i.max_per_height === void 0 && (i.max_per_height = 500)), (i.from === "left" || i.from === "right") && (i.layoutDirection = "h", d("set defaultJunctionPoint=lr"), i.min_per_width === void 0 && (i.min_per_width = 300), i.max_per_width === void 0 && (i.max_per_width = 500), i.min_per_height === void 0 && (i.min_per_height = 100), i.max_per_height === void 0 && (i.max_per_height = 500));
  } else
    (e.layoutName === "fixed" || e.layoutName === "force") && (e.layoutDirection = void 0);
}, Me = {
  createLayout: rt,
  appendDefaultOptions4Layout: lt
}, Oe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createLayout: rt,
  appendDefaultOptions4Layout: lt,
  default: Me
}, Symbol.toStringTag, { value: "Module" })), vt = {
  id: "rg-newNodeTemplate",
  x: 0,
  y: 0,
  text: "",
  styleClass: ""
};
let Ee = 0;
const ct = (e) => {
  !e.backgroundImage && (e.backgroundImage = e.backgrounImage), !e.backgroundImageNoRepeat && (e.backgroundImageNoRepeat = e.backgrounImageNoRepeat), typeof e.graphOffset_x == "string" && (e.graphOffset_x = parseInt(e.graphOffset_x)), typeof e.graphOffset_y == "string" && (e.graphOffset_y = parseInt(e.graphOffset_y)), e.defaultPloyLineRadius && (e.defaultPolyLineRadius = e.defaultPloyLineRadius);
  const i = {
    instanceId: "",
    debug: !0,
    graphLoading: !1,
    graphLoadingText: "",
    showMaskWhenLayouting: !1,
    instanceDestroyed: !1,
    useHorizontalView: !1,
    oldVueVersion: !1,
    ovUseNodeSlot: !1,
    ovUseLineSlot: !1,
    ovUseToolbarSlot: !1,
    ovUseNodeExpandHolderSlot: !1,
    showDebugPanel: !1,
    backgroundColor: void 0,
    backgroundImage: void 0,
    backgroundImageNoRepeat: void 0,
    downloadImageFileName: "",
    disableZoom: !1,
    disableDragNode: !1,
    disableDragLine: !0,
    moveToCenterWhenRefresh: !0,
    zoomToFitWhenRefresh: !0,
    useAnimationWhenRefresh: !1,
    defaultFocusRootNode: !0,
    disableNodeClickEffect: !1,
    disableLineClickEffect: !1,
    allowShowFullscreenMenu: !0,
    allowShowZoomMenu: !0,
    allowAutoLayoutIfSupport: !0,
    allowShowRefreshButton: !0,
    allowShowDownloadButton: !0,
    backgrounImageNoRepeat: !1,
    allowShowMiniToolBar: !0,
    toolBarVersion: "v2",
    toolBarDirection: "v",
    toolBarPositionH: "right",
    toolBarPositionV: "center",
    allowSwitchLineShape: !1,
    allowSwitchJunctionPoint: !1,
    isMoveByParentNode: !1,
    defaultExpandHolderPosition: "hide",
    defaultExpandHolderColor: void 0,
    defaultNodeBorderWidth: void 0,
    defaultNodeColor: "#409EFF",
    defaultNodeBorderColor: "#0c7ff6",
    defaultNodeFontColor: "#ffffff",
    defaultLineColor: "#cccccc",
    checkedLineColor: "#FD8B37",
    defaultLineFontColor: void 0,
    defaultLineWidth: 1,
    defaultLineShape: void 0,
    defaultLineTextOffset_x: void 0,
    defaultLineTextOffset_y: void 0,
    defaultNodeShape: void 0,
    defaultNodeWidth: void 0,
    defaultNodeHeight: void 0,
    defaultShowLineLabel: !0,
    hideNodeContentByZoom: !1,
    defaultJunctionPoint: void 0,
    defaultBottomJuctionPoint_X: void 0,
    defaultPolyLineRadius: void 0,
    disableDragCanvas: !1,
    placeSingleNode: !0,
    placeOtherGroup: !1,
    lineUseTextPath: !1,
    lineTextMaxLength: 66,
    multiLineDistance: 14,
    graphOffset_x: 0,
    graphOffset_y: 0,
    viewSize: { width: 300, height: 300 },
    viewELSize: { width: 1300, height: 800, left: 0, top: 100 },
    viewNVInfo: { width: 1300, height: 800, x: 0, y: 100 },
    canvasNVInfo: { width: 1300, height: 800, x: 0, y: 100 },
    defaultLineMarker: {
      markerWidth: 12,
      markerHeight: 12,
      refX: 6,
      refY: 6,
      color: void 0,
      data: "M2,2 L10,6 L2,10 L6,6 L2,2"
    },
    allowShowMiniView: !1,
    allowShowSettingPanel: !1,
    allowShowMiniNameFilter: !0,
    fullscreen: !1,
    checkedNodeId: "",
    checkedLineId: "",
    checkedLinkId: "",
    layouts: [],
    layoutLabel: "",
    layoutName: "tree",
    layoutClassName: "",
    layoutDirection: "h",
    useAnimationWhenExpanded: !1,
    reLayoutWhenExpandedOrCollapsed: !1,
    autoLayouting: !1,
    layouter: void 0,
    isNeedShowAutoLayoutButton: !1,
    canvasZoom: 100,
    showEasyView: !1,
    performanceMode: !1,
    canvasOpacity: 1,
    showSingleNode: !0,
    showNodeLabel: !0,
    showNodeShortLabel: !0,
    canvasSize: {
      width: 10,
      height: 10
    },
    canvasOffset: {
      x: 25,
      y: 27,
      zoom_buff_x: 0,
      zoom_buff_y: 0
    },
    creatingSelection: !1,
    selectionView: {
      x: 25,
      y: 27,
      width: 0,
      height: 0
    },
    creatingNodePlot: !1,
    showTemplateNode: !0,
    newNodeTemplate: at(JSON.parse(JSON.stringify(vt))),
    creatingLinePlot: !1,
    newLineTemplate: {
      from: "newRelationTemplate-from",
      to: "newRelationTemplate-to",
      color: "",
      text: "new line"
    },
    newLinkTemplate: {
      fromNode: null,
      toNodeObject: null,
      toNode: {
        nothing: !0,
        x: 400,
        y: 400,
        el: {
          offsetWidth: 30,
          offsetHeight: 30
        }
      },
      relations: [{}]
    },
    data: {}
  };
  if (i.newLineTemplate = st(i.newLineTemplate), e.layout && e.layouts)
    throw new Error("Graph options cannot have both layout and layouts properties !");
  const t = e.debug === !0;
  t && d("RGOptions:user instance options:", e), window && (window.relationGraphDebug = t);
  const o = Object.keys(i);
  e && Object.keys(e).forEach((s) => {
    if (s === "layouts" || s === "layout")
      return;
    const a = e[s];
    if (!o.includes(s)) {
      d("RGOptions: unknow option key:", s);
      return;
    }
    if (typeof a == "object") {
      d("RGOptions:user setting object:", s, a);
      const l = i[s];
      if (l && !Array.isArray(l) && a)
        Object.keys(l).forEach((r) => {
          l[r] = a[r];
        });
      else if (Array.isArray(l)) {
        const r = [];
        a.forEach((c) => {
          c && typeof c == "object" ? r.push(JSON.parse(JSON.stringify(c))) : r.push(c);
        }), i[s] = r;
      } else
        i[s] = a;
    } else
      i[s] = a;
  });
  let n = [];
  return !e.layouts || !Array.isArray(e.layouts) || e.layouts.length === 0 ? e.layout ? n = [e.layout] : n = [{
    label: "\u4E2D\u5FC3",
    layoutName: "center",
    layoutDirection: "v"
  }] : n = e.layouts, d("final layouts:", n), i.layouts = n.map((s) => JSON.parse(JSON.stringify(s))), i.disableNodeClickEffect && (i.defaultFocusRootNode = !1), lt(i.layouts[0]), ht(i.layouts[0], i), i;
}, ht = (e, i) => {
  d("applyDefaultOptionsByLayout", e.layoutName, i), e.layoutName === "SeeksCenterLayouter" || e.layoutName === "center" ? (i.defaultNodeShape === void 0 && (i.defaultNodeShape = 0), i.defaultLineShape === void 0 && (i.defaultLineShape = 1), i.defaultJunctionPoint === void 0 && (i.defaultJunctionPoint = "border")) : e.layoutName === "SeeksBidirectionalTreeLayouter" || e.layoutName.includes("tree") ? (i.defaultNodeBorderWidth === void 0 && (i.defaultNodeBorderWidth = 0), i.defaultNodeShape === void 0 && (i.defaultNodeShape = 1), i.defaultLineShape === void 0 && (i.defaultLineShape = 4), (e.from === "top" || e.from === "bottom") && (i.layoutDirection = "v", d("set layoutDirection=v"), i.defaultLineShape === 4 && (i.defaultJunctionPoint === void 0 && (i.defaultJunctionPoint = "tb"), d("set defaultJunctionPoint=tb"))), (e.from === "left" || e.from === "right") && (i.layoutDirection = "h", d("set layoutDirection=h"), i.defaultLineShape === 4 && (i.defaultJunctionPoint === void 0 && (i.defaultJunctionPoint = "lr"), d("set defaultJunctionPoint=lr")))) : (e.layoutName === "fixed" || e.layoutName === "force") && (i.moveToCenterWhenRefresh = !1, i.zoomToFitWhenRefresh = !1), i.defaultNodeShape === void 0 && (i.defaultNodeShape = 0), i.defaultLineShape === void 0 && (i.defaultLineShape = 1), i.defaultJunctionPoint === void 0 && (i.defaultJunctionPoint = "border");
}, dt = (e) => {
  const i = ct(e);
  return d("RGOptions:new RGOptions:by:", e), d("RGOptions:new RGOptions:", i), i.instanceId || (i.instanceId = `RGIns-${Ee++}`), i;
}, Pe = {
  newInstanceOptions: dt,
  createDefaultConfig: ct,
  applyDefaultOptionsByLayout: ht
}, Ne = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  newNodeTemplate: vt,
  createDefaultConfig: ct,
  applyDefaultOptionsByLayout: ht,
  newInstanceOptions: dt,
  default: Pe
}, Symbol.toStringTag, { value: "Module" }));
class ze {
  constructor(i, t) {
    _(this, "options");
    _(this, "listeners");
    _(this, "isReact", !1);
    _(this, "updateViewHook", () => {
    });
    _(this, "_dataUpdating", !1);
    _(this, "_dataUpdatingNext", !1);
    _(this, "eventHandlers", []);
    this.listeners = t, this.options = dt(i), d("new RelationGraph:", this);
  }
  enableDebugLog(i) {
    this.options.debug = i, window && (window.relationGraphDebug = i);
  }
  setUpdateViewHook(i) {
    this.isReact = !0, this.updateViewHook = i;
  }
  _dataUpdated() {
    if (this._dataUpdating) {
      this._dataUpdatingNext = !0;
      return;
    }
    this._dataUpdating = !0, requestAnimationFrame(this._doSomethingAfterDataUpdated.bind(this));
  }
  _doSomethingAfterDataUpdated() {
    d("_dataUpdated:", this._dataUpdatingNext), this._dataUpdating = !0, this.updateVisbleViewNodes(), this.updateEasyView(), this.updateViewHook(), this._dataUpdating = !1, this._dataUpdatingNext && (this._dataUpdatingNext = !1, requestAnimationFrame(this._doSomethingAfterDataUpdated.bind(this)));
  }
  addEventListener(i) {
    this.eventHandlers.push(i);
  }
  removeEventListener(i) {
    const t = this.eventHandlers.indexOf(i);
    t !== -1 && this.eventHandlers.splice(t, 1);
  }
  emitEvent(i, t) {
    for (const o of this.eventHandlers)
      o(i, t);
  }
}
class $e extends ze {
  constructor(t, o) {
    super(t, o);
    _(this, "$dom");
    _(this, "$canvasDom");
    _(this, "resizeObserver");
    _(this, "resizeListenerMap", /* @__PURE__ */ new WeakMap());
    _(this, "nodeMap", /* @__PURE__ */ new WeakMap());
    this.resizeObserver = new ResizeObserver((n, s) => {
      for (const a of n) {
        const l = this.resizeListenerMap.get(a.target);
        l ? l(a.borderBoxSize[0].inlineSize, a.borderBoxSize[0].blockSize) : this._onNodeResize(a.target, a.borderBoxSize[0].inlineSize, a.borderBoxSize[0].blockSize);
      }
    });
  }
  setDom(t) {
    d("setDom"), this.$dom = t, this.addResizeListener(this.$dom, (o, n) => {
      d("resizeListener:this.$dom"), this.refreshNVAnalysisInfo(), this.updateEasyView(), setTimeout(() => {
        d("resizeListener:updateVisbleViewNodes"), this.zoom(-1), this.zoom(1), this.emitEvent("view-resize", { width: o, height: n });
      }, 500);
    });
  }
  setCanvasDom(t) {
    this.$canvasDom = t;
  }
  getBoundingClientRect() {
    return this.$dom.getBoundingClientRect();
  }
  addResizeListener(t, o) {
    this.resizeListenerMap.set(t, o), this.resizeObserver.observe(t);
  }
  _onNodeResize(t, o, n) {
    if (o === 0 || n === 0)
      return;
    const s = this.nodeMap.get(t);
    s && this.updateNodeOffsetSize(s, o, n);
  }
  addNodeResizeListener(t, o) {
    this.nodeMap.set(t, o), this.resizeObserver.observe(t);
  }
  removeNodeResizeListener(t) {
    this.nodeMap.delete(t), this.resizeObserver.unobserve(t);
  }
  removeResizeListener(t) {
    this.resizeListenerMap.delete(t), this.resizeObserver.unobserve(t);
  }
}
class De extends $e {
  constructor(t, o) {
    super(t, o);
    _(this, "graphData", {
      rootNode: void 0,
      nodes: [],
      links: [],
      elementLines: []
    });
    _(this, "seeksNodeIdIndex", 0);
    _(this, "allLineColors", []);
    _(this, "userLayouerClass");
    _(this, "layouter");
    _(this, "reactiveData");
    _(this, "disableNextLayoutAnimation", !1);
    _(this, "elLineUpdating", !1);
  }
  setReactiveData(t, o) {
    this.reactiveData = o, this.graphData = t, this.allLineColors = o.allLineColors, Object.assign(o.options, this.options), this.options = o.options;
  }
  setReactiveDataVue3(t, o) {
    this.reactiveData = o, this.graphData = t, this.allLineColors = o.allLineColors, Object.assign(o.options, this.options), this.options = o.options;
  }
  _setOptions(t) {
    const o = dt(t);
    Object.assign(this.reactiveData.options, o);
  }
  _initLayoutByLayoutOptions(t) {
    this.options.layoutClassName = t.layoutClassName, this.options.layoutLabel = t.label, this.options.layoutName = t.layoutName, this.options.layoutDirection = t.layoutDirection, this.layouter = rt(t, this.options, this);
  }
  initLayouter() {
    if (this.userLayouerClass)
      d("Use user layouter:", this.userLayouerClass), this.layouter = this.userLayouerClass;
    else if (this.options.layouts && this.options.layouts.length > 0) {
      const t = this.options.layouts[0];
      d("[change layout]Create default layouter\uFF1A", this.options.layoutName), this._initLayoutByLayoutOptions(t);
    } else
      d("Not set option: layout/layouts\uFF01");
    d("Layouter instance:", this.layouter);
  }
  _setJsonData(t, o = !1) {
    return w(this, null, function* () {
      yield this.clearGraph(), d("set jsonData:", t), this.loadGraphJsonData(t);
    });
  }
  clearGraph() {
    return w(this, null, function* () {
      this.graphData.nodes = [], this.graphData.links = [], this.graphData.elementLines = [], this.graphData.rootNode = void 0;
    });
  }
  clearElementLines() {
    return w(this, null, function* () {
      this.graphData.elementLines = [];
    });
  }
  generateNewNodeId(t = 1) {
    const o = "N" + (this.graphData.nodes.length + t);
    return this.getNodeById(o) ? this.generateNewNodeId(t + 1) : (d("generateNewNodeId:", t, o), o);
  }
  loadNodes(t) {
    const o = {};
    this.graphData.nodes.forEach((s) => {
      o[s.id] = s;
    });
    const n = [];
    t.forEach((s) => {
      let a = o[s.id];
      a || (a = at(s, this.options), a && (a.seeks_id = this.seeksNodeIdIndex++, o[a.id] = a, n.push(a)));
    }), this.graphData.nodes.push(...n);
  }
  loadLines(t) {
    const o = {};
    this.graphData.nodes.forEach((a) => {
      o[a.id] = a;
    });
    const n = {};
    this.graphData.links.forEach((a) => {
      n[a.seeks_id] = a;
    });
    const s = [];
    t.forEach((a) => {
      let l = !1, r, c;
      if (typeof a.from == "object" ? r = a.from : r = o[a.from], typeof a.to == "object" ? c = a.to : c = o[a.to], !r) {
        console.error("Can not found from node:", a);
        return;
      }
      if (!c) {
        console.error("Can not found to node:", a);
        return;
      }
      const f = `${r.seeks_id}-${c.seeks_id}`, u = `${c.seeks_id}-${r.seeks_id}`, h = st(a);
      let g = n[f], p = !1;
      g || (g = n[u], g ? p = !0 : (l = !0, g = {
        seeks_id: f,
        fromNode: r,
        toNode: c,
        appended: !1,
        forDisplayOnly: !0,
        relations: []
      }));
      let y = h.arrow;
      h.isHideArrow || (y = this.getLineArrow(h.color)), r.targetNodes || (r.targetNodes = []), c.targetNodes || (c.targetNodes = []), h.forDisplayOnly || (r.targetNodes.includes(c) || r.targetNodes.push(c), c.targetNodes.includes(r) || c.targetNodes.push(r), r.targetTo.includes(c) || r.targetTo.push(c), c.targetFrom.includes(r) || c.targetFrom.push(r), g.forDisplayOnly = !1);
      let v = !1;
      for (let x = 0; x < g.relations.length; x++)
        if ((g.relations[x].id || h.id) && g.relations[x].id === h.id) {
          v = !0;
          break;
        }
      v === !1 && (h.id || (h.id = `${g.seeks_id}-${g.relations.length}`), h.isReverse = p, h.arrow = y, g.relations.push(h)), l && (s.push(g), n[g.seeks_id] = g, g.appended = !1);
    }), this.graphData.links.push(...s);
  }
  flatNodeData(t, o, n, s) {
    m.flatNodeData(t, o, n, s);
  }
  loadGraphJsonData(t) {
    t.lines || (t.lines = t.relations, console.warn("[relation-graph] For compatibility with older versionsm, Use jsonData.relations as jsonData.lines, It is recommended that you define your data using")), t.lines || (t.lines = t.links, console.warn("[relation-graph] For compatibility with older versionsm, Use jsonData.links as jsonData.lines, It is recommended that you define your data using"));
    const o = t.nodes, n = [], s = [];
    this.flatNodeData(o, null, n, s), t.lines.forEach((a) => {
      s.push(a);
    }), this.loadNodes(n), d("Nodes is initialized"), this.loadLines(s), this._dataUpdated(), setTimeout(() => {
      t.elementLines && this.addElementLines(t.elementLines);
    }, 500);
  }
  getLineArrow(t, o = !1, n = !1) {
    const s = o ? "start-" : "";
    if (n)
      return `${this.options.instanceId}-${s}arrow-checked`;
    if (t) {
      const a = ye(t);
      return this.allLineColors.map((l) => l.id).includes(a) || this.allLineColors.push({ id: a, color: t }), `${this.options.instanceId}-${s}arrow-${a}`;
    } else
      return `${this.options.instanceId}-${s}arrow-default`;
  }
  getNodes() {
    return this.graphData.nodes;
  }
  getLinks() {
    return this.graphData.links;
  }
  getGraphJsonData() {
    const t = [], o = [];
    return this.graphData.nodes.forEach((n) => {
      const s = mt(n);
      s && t.push(s);
    }), this.graphData.links.forEach((n) => {
      _t(n, o);
    }), {
      rootId: this.graphData.rootNode ? this.graphData.rootNode.id : "",
      nodes: t,
      lines: o
    };
  }
  getGraphJsonOptions() {
    const t = {}, o = [
      "layouter",
      "autoLayouting",
      "canvasNVInfo",
      "canvasOffset",
      "canvasZoom",
      "fullscreen",
      "instanceId",
      "layoutClassName",
      "layoutDirection",
      "layoutLabel",
      "layoutName",
      "resetViewSize",
      "viewELSize",
      "viewNVInfo",
      "viewSize",
      "canvasSize",
      "newLinkTemplate",
      "newLineTemplate",
      "newNodeTemplate"
    ];
    return Object.keys(this.options).forEach((n) => {
      o.includes(n) || (t[n] = this.options[n]);
    }), t;
  }
  printGraphJsonData() {
    d("graph options:", JSON.stringify(this.getGraphJsonOptions())), d("graph json data:", JSON.stringify(this.getGraphJsonData()));
  }
  getNodeById(t) {
    for (let o = 0; o < this.graphData.nodes.length; o++)
      if (this.graphData.nodes[o].id === t)
        return this.graphData.nodes[o];
  }
  getLinkById(t) {
    for (let o = 0; o < this.graphData.links.length; o++)
      if (this.graphData.links[o].seeks_id === t)
        return this.graphData.links[o];
  }
  getLinkByLineId(t) {
    for (let o = 0; o < this.graphData.links.length; o++)
      if (this.graphData.links[o].relations.findIndex((n) => n.id === t) !== -1)
        return this.graphData.links[o];
  }
  addNodes(t) {
    d("addNodes:", t), this.loadNodes(t), this._dataUpdated();
  }
  addLines(t) {
    d("addLines:", t), this.loadLines(t), this._dataUpdated();
  }
  addElementLines(t) {
    d("addElementLines:", t), t.forEach((o) => {
      const n = document.getElementById(o.from), s = document.getElementById(o.to);
      n || console.error("Can not found from HTMLElement: #" + o.from), s || console.error("Can not found toHTMLElement: #" + o.to);
      const a = st(o);
      let l = a.arrow;
      a.isHideArrow || (l = this.getLineArrow(a.color)), a.forDisplayOnly = !0;
      let r = !1;
      for (const c of this.graphData.elementLines)
        if (c.relations[0].from === a.from && c.relations[0].to === a.to || c.relations[0].from === a.to && c.relations[0].to === a.from) {
          r = !0;
          break;
        }
      if (!r) {
        a.id || (a.id = `rg-ell-${a.from}-${a.to}`), a.arrow = l;
        const c = {
          type: "el",
          nodeShape: 1,
          junctionPoint: "lr",
          x: 0,
          y: 0,
          el: {
            offsetWidth: 10,
            offsetHeight: 10
          }
        }, f = {
          type: "el",
          nodeShape: 1,
          junctionPoint: "lr",
          x: 0,
          y: 0,
          el: {
            offsetWidth: 10,
            offsetHeight: 10
          }
        }, u = {
          seeks_id: "ell-" + this.graphData.elementLines.length,
          fromNode: c,
          toNode: f,
          relations: [a],
          appended: !0,
          forDisplayOnly: !0
        };
        this._updateElementLinePosition(n, u.fromNode), this._updateElementLinePosition(s, u.toNode), this.graphData.elementLines.push(u);
      }
    }), this.updateElementLines(), this._dataUpdated();
  }
  getElementLineById(t) {
    for (const o of this.graphData.elementLines)
      if (o.seeks_id === t)
        return o;
  }
  getElementLines() {
    return this.graphData.elementLines.map((t) => t.relations[0]);
  }
  removeElementLine(t) {
    d("removeElementLine:", t), this.removeELementLineById(t.relations[0].id);
  }
  removeELementLineById(t) {
    d("removeELementLineById:", t);
    for (let o = 0; o < this.graphData.elementLines.length; o++)
      this.graphData.elementLines[o].relations[0].id === t && (this.graphData.elementLines.splice(o, 1), o--);
  }
  updateElementLines() {
    d("updateElementLines:", this.graphData.elementLines.length), this.graphData.elementLines.length !== 0 && (this.elLineUpdating || (this.elLineUpdating = !0, setTimeout(() => {
      this.elLineUpdating = !1, this._updateElementLines();
    }, 50)));
  }
  _updateElementLines() {
    this.graphData.elementLines.forEach((t) => {
      const o = document.getElementById(t.relations[0].from), n = document.getElementById(t.relations[0].to);
      if (!o) {
        t.relations[0].isHide = !0;
        return;
      }
      if (!n) {
        t.relations[0].isHide = !0;
        return;
      }
      if (this._updateElementLinePosition(o, t.fromNode), this._updateElementLinePosition(n, t.toNode), t.fromNode.el.offsetWidth === 0 && t.fromNode.el.offsetHeight === 0) {
        t.relations[0].isHide = !0;
        return;
      }
      if (t.toNode.el.offsetWidth === 0 && t.toNode.el.offsetHeight === 0) {
        t.relations[0].isHide = !0;
        return;
      }
      t.relations[0].isHide = !1;
    }), this._dataUpdated();
  }
  _updateElementLinePosition(t, o) {
    if (!t)
      return;
    const n = t.getBoundingClientRect(), s = this.$canvasDom.getBoundingClientRect();
    o.x = (n.x - s.x) / (this.options.canvasZoom / 100), o.y = (n.y - s.y) / (this.options.canvasZoom / 100), o.el.offsetWidth = n.width / (this.options.canvasZoom / 100), o.el.offsetHeight = n.height / (this.options.canvasZoom / 100);
  }
  getElementPosition(t) {
    const n = document.getElementById(t).getBoundingClientRect(), s = this.$canvasDom.getBoundingClientRect(), a = (n.x - s.x) / (this.options.canvasZoom / 100), l = (n.y - s.y) / (this.options.canvasZoom / 100);
    return { x: a, y: l };
  }
  removeNodeById(t) {
    let o = 0;
    for (let s = 0; s < this.graphData.links.length; s++) {
      const a = this.graphData.links[s];
      (a.fromNode.id === t || a.toNode.id === t) && (this.removeLink(a), s--, o++);
    }
    d("Removed link\uFF1A", t, o);
    let n = 0;
    for (let s = 0; s < this.graphData.nodes.length; s++)
      if (this.graphData.nodes[s].id === t) {
        this.graphData.nodes.splice(s, 1), n++;
        break;
      }
    d("Removed node\uFF1A", t, n), this._dataUpdated();
  }
  removeNode(t) {
    this.removeNodeById(t.id), this._dataUpdated();
  }
  removeLinkByTwoNode(t, o) {
    for (const n of this.getLinks())
      if (n.fromNode.id === t && n.toNode.id === o || n.fromNode.id === t && n.toNode.id === o) {
        this.removeLink(n);
        break;
      }
    this._dataUpdated();
  }
  getGroupByNode(t, o = []) {
    o.includes(t) || o.push(t);
    for (const n of t.targetNodes)
      o.includes(n) || this.getGroupByNode(n, o);
    return o;
  }
  _clearItem(t, o) {
    for (let n = 0; n < t.length; n++)
      t[n] === o && (t.splice(n, 1), n--);
  }
  removeNodeRef(t, o) {
    t && (t.targetNodes && this._clearItem(t.targetNodes, o), t.targetFrom && this._clearItem(t.targetFrom, o), t.targetTo && this._clearItem(t.targetTo, o));
  }
  removeLinkById(t) {
    d("removeLinkById:", t);
    for (let o = 0; o < this.graphData.links.length; o++) {
      const n = this.graphData.links[o];
      n.seeks_id === t && (this.removeNodeRef(n.fromNode, n.toNode), this.removeNodeRef(n.toNode, n.fromNode), this.graphData.links.splice(o, 1), o--);
    }
    this._dataUpdated();
  }
  removeLink(t) {
    d("removeLink:", t), this.removeLinkById(t.seeks_id), this._dataUpdated();
  }
  removeLine(t, o) {
    d("removeLine:", t, o);
    for (let n = 0; n < t.relations.length; n++)
      t.relations[n] === o && t.relations.splice(n, 1);
    t.relations.length === 0 && this.removeLink(t), this._dataUpdated();
  }
  setNodePosition(t, o, n) {
    t.x = o, t.y = n;
  }
  getGraphOffet() {
    const t = this.options.graphOffset_x || 0, o = this.options.graphOffset_y || 0;
    return {
      offset_x: t,
      offset_y: o
    };
  }
  setCanvasCenter(t, o) {
    const n = this.options.viewSize.width / 2, s = this.options.viewSize.height / 2, a = this.getGraphOffet();
    this.setCanvasOffset(n - t + a.offset_x, s - o + a.offset_y), this._dataUpdated();
  }
  setCanvasOffset(t, o) {
    this.options.canvasOffset.x = t, this.options.canvasOffset.y = o, this._dataUpdated();
  }
  findGroupNodes(t, o) {
    o.push(t), t.targetNodes.forEach((n) => {
      o.includes(n) || this.findGroupNodes(n, o);
    });
  }
  resetViewSize() {
    !this.options || (this.options.viewSize.width = this.$dom.getBoundingClientRect().width, this.options.viewSize.height = this.$dom.getBoundingClientRect().height, this.options.canvasZoom = 100, this.setCanvasCenter(0, 0), d("resetViewSize:1:", this.options.viewSize.width, this.options.viewSize.height, this.options.canvasOffset.x, this.options.canvasOffset.y), this.refreshNVAnalysisInfo(), this._dataUpdated());
  }
  refreshNVAnalysisInfo() {
    if (!this.$dom) {
      console.error("cannot get view size !");
      return;
    }
    const t = {
      NMCanvasCenter: { x: 0, y: 0 }
    }, o = this.$dom.getBoundingClientRect();
    this.options.viewNVInfo.x = o.left, this.options.viewNVInfo.y = o.top, this.options.viewNVInfo.width = o.width, this.options.viewNVInfo.height = o.height, d("resetViewSize:", o.width, o.height, o.left, o.top);
    const n = this.options.canvasSize.width * (this.options.canvasZoom / 100), s = this.options.canvasSize.height * (this.options.canvasZoom / 100);
    t.NMCanvasCenter.x = this.options.canvasOffset.x + this.options.canvasSize.width / 2, t.NMCanvasCenter.y = this.options.canvasOffset.y + this.options.canvasSize.height / 2, this.options.canvasNVInfo.x = t.NMCanvasCenter.x - n / 2, this.options.canvasNVInfo.y = t.NMCanvasCenter.y - s / 2, this.options.canvasNVInfo.width = n, this.options.canvasNVInfo.height = s, this.options.viewELSize.width = o.width, this.options.viewELSize.height = o.height, this.options.viewELSize.left = o.left, this.options.viewELSize.top = o.top;
  }
  getStuffSize(t) {
    const o = t || this.graphData.nodes;
    let n = 9999999, s = 9999999, a = 0, l = 0;
    o.forEach((u) => {
      m.isAllowShowNode(u) && (u.x < n && (n = u.x), u.x > a && (a = u.x + u.el.offsetWidth), u.y < s && (s = u.y), u.y > l && (l = u.y + u.el.offsetHeight));
    });
    const r = 100, c = a - n + r, f = l - s + r;
    return {
      width: c,
      height: f,
      minX: n,
      maxX: a,
      minY: s,
      maxY: l
    };
  }
  getNodesCenter() {
    const t = this.getStuffSize();
    d("getStuffSize:", t);
    const o = t.minX + (t.width - 100) / 2, n = t.minY + (t.height - 100) / 2;
    return {
      x: o,
      y: n
    };
  }
  querySearchAsync(t) {
    if (d("fetch-suggestions", t), t = t.trim(), t === "")
      return;
    const o = [];
    return this.graphData.nodes.forEach((n) => {
      d("fetch:", n.text), n.text.includes(t) && o.push(n);
    }), d("fetched:", o.length), o;
  }
  printOptions() {
    const t = this.getGraphJsonOptions();
    console.log("options:", t), console.log("options-json-string:"), console.log(JSON.stringify(t));
  }
  printData() {
    const t = this.getGraphJsonData();
    console.log("data:", t), console.log("data-json-string:"), console.log(JSON.stringify(t));
  }
  loading(t = "") {
    this.options.graphLoading = !0, this.options.graphLoadingText = t;
  }
  clearLoading() {
    this.options.graphLoading = !1, this.options.graphLoadingText = "";
  }
  updateVisbleViewNodes(t = !1) {
    !t && (!this.options.performanceMode || this.options.showEasyView) || this._updateVisbleViewNodes();
  }
  _updateVisbleViewNodes() {
    const t = this.getBoundingClientRect(), o = this.getCanvasCoordinateByClientCoordinate({
      x: t.x,
      y: t.y
    }), n = this.getCanvasCoordinateByClientCoordinate({
      x: t.x + this.options.viewELSize.width,
      y: t.y + this.options.viewELSize.height
    });
    let s = 0;
    for (const a of this.graphData.nodes) {
      if (a.alwaysRender) {
        a.invisiable = !1;
        continue;
      }
      let l = !1;
      (a.x > n.x || a.y > n.y) && (l = !0), (a.x + a.el.offsetWidth < o.x || a.y + a.el.offsetHeight < o.y) && (l = !0), a.invisiable = l, !l && s++;
    }
    for (const a of this.graphData.links) {
      let l = !1;
      a.fromNode.invisiable && a.toNode.invisiable && (l = !0), a.invisiable = l;
    }
    d("updateVisbleViewNodes:", this.options.showEasyView, n.x, s);
  }
}
class Ge extends De {
  constructor(i, t) {
    super(i, t);
  }
  dataURLToBlob(i) {
    const t = i.split(","), o = t[0], n = o && o.match(/:(.*?);/)[1], s = atob(t[1]);
    let a = s.length;
    const l = new Uint8Array(a);
    for (; a--; )
      l[a] = s.charCodeAt(a);
    return new Blob([l], { type: n });
  }
  createGraphCanvas(i = "png") {
    return w(this, null, function* () {
      return new Promise((t, o) => {
        const n = this.options.canvasZoom, s = this.$canvasDom.clientWidth, a = this.$canvasDom.clientHeight, l = this.options.canvasOffset.x, r = this.options.canvasOffset.y;
        this.options.checkedNodeId = "", this.options.canvasZoom = 100;
        const c = this.$canvasDom;
        let f = 999999, u = 999999, h = 0, g = 0;
        const p = 200;
        this.loading("Generating..."), this.graphData.nodes.forEach((C) => {
          C.x < f && (f = C.x), C.x > h && (h = C.x + C.el.offsetWidth), C.y < u && (u = C.y), C.y > g && (g = C.y + C.el.offsetHeight);
        });
        const y = f - p, v = u - p;
        this.graphData.nodes.forEach((C) => {
          C.x = C.x - y, C.y = C.y - v;
        }), this.$canvasDom.querySelectorAll(".rel-canvas-slot").forEach((C) => {
          const M = C;
          M.style.left = -v + "px", M.style.top = -v + "px";
        }), this.updateElementLines(), this.$canvasDom.querySelectorAll(".rel-lines-svg-el-lines").forEach((C) => {
          const M = C;
          M.style.width = "4000px", M.style.height = "4000px";
        }), this.options.canvasOffset.x = p * -1, this.options.canvasOffset.y = p * -1;
        const S = h - f + 200 + p * 2, P = g - u + 100 + p * 2, B = window.devicePixelRatio;
        this.options.canvasSize.width = S * B, this.options.canvasSize.height = P * B, window.scrollTo(0, 0);
        const D = document.createElement("canvas");
        D.width = S * B, D.height = P * B, D.style.backgroundColor = getComputedStyle(c.parentElement, null).backgroundColor, d("canvas.style.backgroundColor:", D.style.backgroundColor), D.style.width = `${S * B}px`, D.style.height = `${P * B}px`, D.getContext("2d").scale(1, 1);
        const $ = {
          backgroundColor: D.style.backgroundColor,
          scale: B,
          canvas: D,
          logging: !0,
          width: S,
          height: P,
          useCORS: !0
        };
        setTimeout(() => {
          this.createImage(c, $, i, "", (C) => {
            this.options.canvasSize.width = s, this.options.canvasSize.height = a, this.options.canvasOffset.x = l, this.options.canvasOffset.y = r, this.options.canvasZoom = n, this.$canvasDom.querySelectorAll(".rel-canvas-slot").forEach((E) => {
              const N = E;
              N.style.left = "0px", N.style.top = "0px";
            }), this.graphData.nodes.forEach((E) => {
              E.x = E.x + y, E.y = E.y + v;
            }), this.$canvasDom.querySelectorAll(".rel-lines-svg-el-lines").forEach((E) => {
              const N = E;
              N.style.width = "1px", N.style.height = "1px";
            }), this.updateElementLines(), this.clearLoading(), t(C);
          });
        }, 1e3);
      });
    });
  }
  createImage(i, t, o, n, s) {
    d("createImage:", t), Yt(i, t).then((a) => {
      s && s(a);
    });
  }
  getImageBase64(i = "png") {
    return w(this, null, function* () {
      const t = yield this.createGraphCanvas(i), o = document.body.appendChild(t);
      o.style.display = "none";
      const n = o.toDataURL(`image/${i}`);
      return document.body.removeChild(o), n;
    });
  }
  downloadAsImage(i = "png", t) {
    return w(this, null, function* () {
      if (this.listeners.onImageDownload && this.listeners.onImageDownload(this.$canvasDom, i) === !1)
        return;
      if (this.graphData.nodes.length === 0)
        throw new Error("No nodes, no content to export!");
      t || (t = this.options.downloadImageFileName), t || (t = `relation-graph-${(Math.random() * 1e5).toFixed(0)}`);
      const o = yield this.createGraphCanvas(i);
      d("downloadImageAsFile:", i, t);
      let n = !0;
      this.listeners.onImageSaveAsFile && this.listeners.onImageSaveAsFile(
        o,
        i,
        t
      ) === !1 && (n = !1), n && (yield this.downloadImageAsFile(o, i, t));
    });
  }
  downloadImageAsFile(i, t, o) {
    return w(this, null, function* () {
      const n = document.body.appendChild(i);
      n.style.display = "none";
      const s = this.dataURLToBlob(n.toDataURL(`image/${t}`));
      document.body.removeChild(n);
      const a = document.createElement("a");
      a.style.display = "none";
      try {
        window.navigator.msSaveOrOpenBlob ? window.navigator.msSaveOrOpenBlob(s, `${o}.${t}`) : (a.setAttribute("href", URL.createObjectURL(s)), a.setAttribute("download", `${o}.${t}`), document.body.appendChild(a), a.click(), d("click ok!"), URL.revokeObjectURL(yield s.text()), d("revokeObjectURL ok!"), document.body.removeChild(a), d("removeChild ok!"));
      } catch (l) {
        d("[SEEKS Graph]Create and download image error:", l);
      }
    });
  }
}
class Ae extends Ge {
  constructor(i, t) {
    super(i, t);
  }
  createReturnValue(i, t) {
    return { path: i, textPosition: t };
  }
  createLinePath(i, t, o) {
    let n = i.fromNode;
    n || (n = {
      x: 0,
      y: 0,
      el: {
        offsetWidth: 10,
        offsetHeight: 10
      }
    });
    const s = i.toNode, a = i.relations.length;
    return o || (o = 0), this.createLinePathByTwoNode(n, s, t, o, a);
  }
  _getJunctionPoint(i, t) {
    return i === j.border ? V.getBorderPoint4MultiLine(...t) : i === j.ltrb ? V.getRectJoinPoint(...t) : i === j.tb ? V.getRectVJoinPoint(...t) : i === j.lr ? V.getRectHJoinPoint(...t) : i === j.left ? V.getRectLeftJoinPoint(...t) : i === j.right ? V.getRectRightJoinPoint(...t) : i === j.top ? V.getRectTopJoinPoint(...t) : i === j.bottom ? V.getRectBottomJoinPoint(...t, this.options.defaultBottomJuctionPoint_X) : V.getBorderPoint4MultiLine(...t);
  }
  createLinePathByTwoNode(i, t, o, n = 0, s = 1) {
    const a = o.lineShape || this.options.defaultLineShape || 1, l = o.lineDirection || this.options.layoutDirection || "h";
    let r = i, c = t, f = r.x, u = r.y, h = c.x, g = c.y;
    const p = { x: 0, y: 0, rotate: 0 };
    if (Number.isNaN(f) || Number.isNaN(u))
      return d("error start node:", r.text, r.x, r.y), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L -10 -10", p);
    if (Number.isNaN(h) || Number.isNaN(g))
      return d("error end point:", c.text, c.x, c.y), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L 10 -10", p);
    let y = r.el.offsetWidth || r.width || 60, v = r.el.offsetHeight || r.height || 60;
    if (Number.isNaN(y) || Number.isNaN(v))
      return p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L -10 10", p);
    let x = c.el.offsetWidth || c.width || 60, z = c.el.offsetHeight || c.height || 60;
    if (Number.isNaN(x) || Number.isNaN(z))
      return p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L 10 10", p);
    const S = r.nodeShape !== void 0 && r.nodeShape !== null ? r.nodeShape : this.options.defaultNodeShape, P = [
      f,
      u,
      h,
      g,
      y,
      v,
      x,
      z,
      S,
      !1,
      s,
      n,
      this.options.multiLineDistance || 14
    ], B = c.nodeShape !== void 0 && c.nodeShape !== null ? c.nodeShape : this.options.defaultNodeShape, D = [
      h,
      g,
      f,
      u,
      x,
      z,
      y,
      v,
      B,
      !1,
      s,
      s - n - 1,
      this.options.multiLineDistance || 14
    ], $ = this.options.defaultJunctionPoint || j.border, C = o.fromJunctionPoint || r.junctionPoint || $, M = o.toJunctionPoint || c.junctionPoint || $, O = this._getJunctionPoint(C, P), E = this._getJunctionPoint(M, D);
    if (!O || !E)
      return this.createReturnValue(
        "Unable to calculate the starting point and ending point of the line.",
        p
      );
    const N = O.x, G = O.y, k = E.x, L = E.y;
    if (r === c) {
      const H = f + y / 2, W = u + v / 2, wt = Math.atan2(G - W, N - H), J = Math.sin(wt + Math.PI) * 5, q = Math.cos(wt + Math.PI) * 5, Ct = { x: N - J, y: G - q }, bt = { x: J, y: q }, ae = -q * 5, re = -J * 5, le = -q * 5, ce = -J * 5, he = `M ${Ct.x},${Ct.y} c ${ae},${re} ${le},${ce} ${bt.x},${bt.y}`;
      return p.x = N - q / (q + J) * 20, p.y = G + J / (q + J) * 20, p.rotate = 0, this.createReturnValue(he, p);
    }
    if (Number.isNaN(N) || Number.isNaN(G))
      return d("error start point:", r.text), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L -10 0", p);
    if (Number.isNaN(k) || Number.isNaN(L))
      return d("error end point:", c.text), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L 10 0", p);
    const ot = f + y / 2, Y = u + v / 2, b = h + x / 2, F = g + z / 2, T = this.createLinePathData(
      o,
      p,
      s,
      n,
      l,
      a,
      N,
      G,
      ot,
      Y,
      y,
      v,
      k,
      L,
      b,
      F,
      x,
      z
    );
    return this.createReturnValue(T, p);
  }
  createLinePathData(i, t, o, n, s, a, l, r, c, f, u, h, g, p, y, v, x, z) {
    let S = g - l, P = p - r, B = g > l ? 1 : -1, D = p > r ? 1 : -1, $ = s === "v" ? D : B, C = "";
    if (a === 4) {
      const M = l - c, O = r - f, E = g - y, N = p - v;
      let G = this.options.defaultPolyLineRadius || 0;
      const k = Math.min(G, Math.abs(S)) * (l < g ? 1 : -1), L = Math.min(G, Math.abs(P)) * (r < p ? 1 : -1), ot = Math.abs(M) >= u / 2 ? "h" : "v", Y = Math.abs(E) >= x / 2 ? "h" : "v", b = [];
      if (ot === "v") {
        const F = i.polyLineStartDistance || Math.max(Math.min(30, Math.abs(p - r) / 2), 15), T = O > 0 ? F : -F;
        if (i.placeText === "start" ? (t.x = l, t.y = r + T - (O > 0 ? 20 : -5)) : i.placeText === "middle" ? (t.x = l + (g - l) / 2, t.y = r + T) : (t.x = g, t.y = r + T + (O > 0 ? 20 : -5)), b.push(`M ${l} ${r}`), b.push(`v ${T - L}`), Y === "v")
          b.push(`c ${0},${L},`), b.push(`${k},${L},`), b.push(`${k},${L}`), b.push(`h ${g - l - k * 2}`), b.push(`c ${k},${0},`), b.push(`${k},${L},`), b.push(`${k},${L}`), b.push(`v ${p - r - T - L}`);
        else {
          b.push(`c ${0},${L},`), b.push(`${k},${L},`), b.push(`${k},${L}`);
          const H = Math.min(30, Math.abs(g - l) / 2), W = E > 0 ? -H : H;
          b.push(`h ${g - l + W - k}`), b.push(`c ${k},${0},`), b.push(`${k},${L},`), b.push(`${k},${L}`), b.push(`v ${p - r - T - L}`), b.push(`h ${W - k}`);
        }
      } else {
        const F = i.polyLineStartDistance || Math.max(Math.min(30, Math.abs(g - l) / 2), 15), T = M > 0 ? F : -F;
        if (i.placeText === "start" ? (t.x = l + (M > 0 ? 10 : -50), t.y = r - 5) : i.placeText === "middle" ? (t.x = l + T, t.y = r + (p - r) / 2) : (t.x = l + T + (M > 0 ? 20 : -50), t.y = p - 5), b.push(`M ${l} ${r}`), b.push(`h ${T - k}`), Y === "v") {
          const H = Math.min(30, Math.abs(p - r) / 2), W = N > 0 ? -H : H;
          b.push(`c ${k},${0},`), b.push(`${k},${L},`), b.push(`${k},${L}`), b.push(`v ${p - r + W - L}`), b.push(`h ${g - l - T - k}`), b.push(`c ${0},${L},`), b.push(`${k},${L},`), b.push(`${k},${L}`), b.push(`v ${W - L}`);
        } else
          b.push(`c ${k},${0},`), b.push(`${k},${L},`), b.push(`${k},${L}`), b.push(`v ${p - r - L * 2}`), b.push(`c ${0},${L},`), b.push(`${k},${L},`), b.push(`${k},${L}`), b.push(`h ${g - l - T - k}`);
      }
      C = b.join(" ");
    } else if (a === 41) {
      const M = r - f;
      let O = this.options.defaultPolyLineRadius || 0;
      const E = Math.min(O, Math.abs(S)) * (l < g ? 1 : -1), N = Math.min(O, Math.abs(P)) * (r < p ? 1 : -1), G = [], k = i.polyLineStartDistance || Math.max(Math.min(30, Math.abs(p - r) / 2), 15), L = M > 0 ? k : -k;
      i.placeText === "start" ? (t.x = l, t.y = r + L - (M > 0 ? 20 : -5)) : i.placeText === "middle" ? (t.x = l + (g - l) / 2, t.y = r + L) : (t.x = g, t.y = r + L + (M > 0 ? 20 : -5)), G.push(`M ${l} ${r}`), G.push(`v ${p - r - N}`), G.push(`c ${0},${N},`), G.push(`${E},${N},`), G.push(`${E},${N}`), G.push(`h ${g - l - E}`), C = G.join(" ");
    } else if (a === 2 || a === 3 || a === 5 || a === 6 || a === 7 || a === 8) {
      const M = l - c, O = r - f, E = g - y, N = p - v, G = 1 / (o + 1) * (n + 1);
      let k, L;
      if (a === 2)
        k = s === "v" ? { x: 0, y: $ * 30 } : { x: $ * 30, y: 0 }, L = s === "v" ? { x: S * G, y: $ * -10 } : { x: $ * -10, y: P * G };
      else if (a === 3)
        k = s === "v" ? { x: 0, y: P * G } : { x: $ * 30, y: 0 }, L = s === "v" ? { x: 0, y: 0 } : { x: $ * -10, y: P * G };
      else if (a === 5)
        k = s === "v" ? { x: 0, y: 0 } : { x: 0, y: 0 }, L = s === "v" ? { x: 0, y: P * G } : { x: S * G, y: 0 };
      else if (a === 6) {
        const Y = Math.min(200, Math.max(100, Math.abs(S / 2))), b = Math.min(200, Math.max(100, Math.abs(P / 2))), F = M / (Math.abs(M) + Math.abs(O)) * Y, T = O / (Math.abs(M) + Math.abs(O)) * b;
        k = { x: F, y: T };
        const H = E / (Math.abs(E) + Math.abs(N)) * Y + S, W = N / (Math.abs(E) + Math.abs(N)) * b + P;
        L = { x: H, y: W };
      } else if (a === 7) {
        const F = M / (Math.abs(M) + Math.abs(O)) * 30, T = O / (Math.abs(M) + Math.abs(O)) * 30;
        k = { x: F, y: T };
        const H = E / (Math.abs(E) + Math.abs(N)) * 30 + S, W = N / (Math.abs(E) + Math.abs(N)) * 30 + P;
        L = { x: H, y: W };
      } else if (a === 8) {
        const F = M / (Math.abs(M) + Math.abs(O)) * 30, T = O / (Math.abs(M) + Math.abs(O)) * 30;
        k = { x: F, y: T };
        const H = E / (Math.abs(E) + Math.abs(N)) * 30 + S, W = N / (Math.abs(E) + Math.abs(N)) * 30 + P;
        L = { x: H, y: W };
      }
      const ot = this.calcCurveCenter(
        { x: l, y: r },
        { x: l + k.x, y: r + k.y },
        { x: l + L.x, y: r + L.y },
        { x: l + S, y: r + P },
        a < 6 ? 0.8 : 0.5
      );
      t.x = ot.x, t.y = ot.y, C = `M ${l},${r} c ${k.x},${k.y} ${L.x},${L.y} ${S},${P}`, a === 8 && (C = C + " Z");
    } else
      t.rotate = V.getTextAngle(l, r, g, p), t.x = Math.round(l + (g - l) / 2), t.y = Math.round(r + (p - r) / 2), Number.isNaN(t.rotate) && (t.rotate = 0), C = `M ${l} ${r} L ${g} ${p}`;
    return C;
  }
  calcCurveCenter(i, t, o, n, s = 0.5) {
    const a = { x: (1 - s) * i.x + s * t.x, y: (1 - s) * i.y + s * t.y }, l = { x: (1 - s) * t.x + s * o.x, y: (1 - s) * t.y + s * o.y }, r = { x: (1 - s) * o.x + s * n.x, y: (1 - s) * o.y + s * n.y }, c = { x: (1 - s) * a.x + s * l.x, y: (1 - s) * a.y + s * l.y }, f = { x: (1 - s) * l.x + s * r.x, y: (1 - s) * l.y + s * r.y };
    return { x: (1 - s) * c.x + s * f.x, y: (1 - s) * c.y + s * f.y };
  }
  createCheckedLinePath() {
    const i = this.options.checkedLineId;
    if (!!i)
      try {
        const t = this.getElementLineById(this.options.checkedLinkId);
        if (t) {
          const { path: l } = this.createLinePath(
            t,
            t.relations[0],
            0
          );
          return l;
        }
        const o = this.getLinkByLineId(i);
        if (!o) {
          d("Can not find link by checkedLineId:", i);
          return;
        }
        if (!m.isAllowShowNode(o.fromNode)) {
          d("from hide:", i);
          return;
        }
        if (!m.isAllowShowNode(o.toNode)) {
          d("to hide:", i);
          return;
        }
        const n = o.relations.findIndex((l) => l.id === i);
        if (n === -1) {
          d("Can not find checkedLineId:", i);
          return;
        }
        const s = o.relations[n], { path: a } = this.createLinePath(
          o,
          s,
          n
        );
        return a;
      } catch (t) {
        d(t);
      }
  }
  createCheckedLineStrokeWidth() {
    const i = this.options.checkedLineId;
    if (!i)
      return this.options.defaultLineWidth + 8;
    try {
      const t = this.getLinkByLineId(i);
      if (!t)
        return this.options.defaultLineWidth + 8;
      const o = t.relations.findIndex((s) => s.id === i);
      if (o === -1)
        return this.options.defaultLineWidth + 8;
      const n = t.relations[o];
      return n.lineWidth ? n.lineWidth + 8 : this.options.defaultLineWidth + 8;
    } catch (t) {
      d(t);
    }
  }
  getTextTransform(i, t, o, n) {
    if (Number.isNaN(t) || Number.isNaN(o))
      return "translate(0,0)";
    const s = i.lineShape === void 0 ? this.options.defaultLineShape : i.lineShape;
    return s === 1 || s === 4 ? `translate(${t},${o})rotate(${n || 0})` : `translate(${t},${o})`;
  }
  getArrow(i, t, o = !1) {
    if (o) {
      if (i.isReverse) {
        if (i.showEndArrow === !1)
          return;
      } else if (i.showStartArrow !== !0)
        return;
    } else if (i.isReverse) {
      if (i.showStartArrow !== !0)
        return;
    } else if (i.showEndArrow === !1)
      return;
    const n = !1;
    return i.isHideArrow ? "none" : `url('#${this.getLineArrow(
      i.color,
      o,
      n
    )}')`;
  }
  getLineTextStyle(i, t, o) {
    let n = t.text;
    if (!n)
      return null;
    let s = 0;
    const a = i.fromNode.x, l = i.toNode.x;
    n.length > this.options.lineTextMaxLength && (n = n.substring(0, this.options.lineTextMaxLength || 15) + "..."), (t.useTextPath !== void 0 ? t.useTextPath : this.options.lineUseTextPath) && a > l && (s = 180, n = n.split("").reverse().join(""));
    const c = t.textOffset_x || this.options.defaultLineTextOffset_x || 0, f = t.textOffset_y || this.options.defaultLineTextOffset_y || -8, u = `translate(${c},${f})`;
    let h = "middle";
    (t.lineShape === 4 || this.options.defaultLineShape === 4) && (h = "start");
    let g = "50%";
    if (t.lineShape === 4 || this.options.defaultLineShape === 4)
      if (t.placeText === "start")
        g = "10%", h = "start";
      else if (t.placeText === "end")
        g = "90%", h = "end";
      else if (t.placeText)
        g = t.placeText, h = "start";
      else if (this.options.layoutDirection === "v") {
        const p = i.fromNode.x, y = i.toNode.x;
        g = String(Math.abs(y - p) + 43);
      } else {
        const p = i.fromNode.y, y = i.toNode.y;
        g = String(Math.abs(y - p) + 43);
      }
    else
      t.placeText === "start" ? (g = "10%", h = "start") : t.placeText === "end" ? (g = "90%", h = "end") : t.placeText ? (g = t.placeText, h = "start") : (g = "50%", h = "middle");
    return {
      text: n,
      textOffset: u,
      textAnchor: h,
      textHPosition: g,
      textRotate: s
    };
  }
}
class Be extends Ae {
  constructor(t, o) {
    super(t, o);
    _(this, "zoomCenter_of_newSize", { x: 0, y: 0 });
  }
  zoom(t, o) {
    this.options.canvasZoom + t < 5 && (d("zoom:reset zoom=10"), t = 5 - this.options.canvasZoom);
    const n = this.options.canvasZoom, s = this.options.canvasZoom + t, a = this.showZoomCenter(o, t);
    this.options.canvasOffset.x += a.buff_x, this.options.canvasOffset.y += a.buff_y, this.options.canvasZoom = s, this.refreshNVAnalysisInfo(), this.listeners.onZoomEnd && this.listeners.onZoomEnd(), n <= 40 && s > 40 && (this.options.performanceMode && this.updateVisbleViewNodes(!0), this.options.showEasyView = !1, d("zoom:hide:showEasyView", n, s), setTimeout(() => {
      this.updateElementLines();
    }, 150)), n > 40 && s <= 40 && (d("zoom:show:showEasyView", n, s), this.options.performanceMode && (this.options.showEasyView = !0)), this._dataUpdated(), this.emitEvent("zoom", { canvasZoom: this.options.canvasZoom });
  }
  setZoom(t, o) {
    const n = Math.floor(t - this.options.canvasZoom);
    this.zoom(n, o);
  }
  getCanvasCoordinateByClientCoordinate(t) {
    const o = this.options.canvasZoom / 100, { NMCanvasStart: n, NMZoomCenter: s } = this.analysisByZoom(o, t), a = {
      x: s.x - n.x,
      y: s.y - n.y
    };
    return {
      x: a.x / o,
      y: a.y / o
    };
  }
  getClientCoordinateByCanvasCoordinate(t) {
    const o = this.options.canvasZoom / 100, { NMCanvasStart: n } = this.analysisByZoom(o), s = {
      x: t.x * o + n.x,
      y: t.y * o + n.y
    };
    return {
      x: s.x + this.options.canvasOffset.x,
      y: s.y + this.options.canvasOffset.y
    };
  }
  analysisByZoom(t, o) {
    const n = {
      NMViewPosition: { x: 0, y: 0 },
      NMViewCenter: { x: 0, y: 0 },
      NMCanvasCenter: { x: 0, y: 0 },
      NMCanvasStart: { x: 0, y: 0 },
      NMCanvasEnd: { x: 0, y: 0 },
      NMZoomCenter: { x: 0, y: 0 },
      NMViewBuff: { x: 0, y: 0 },
      NMCanvasOffsetBuff: { x: 0, y: 0 },
      NMCanvasSize: { width: 0, height: 0 }
    }, s = this.$dom.getBoundingClientRect();
    n.NMViewPosition.x = s.left, n.NMViewPosition.y = s.top, n.NMViewCenter.x = s.width / 2, n.NMViewCenter.y = s.height / 2;
    const a = this.options.canvasSize.width * t, l = this.options.canvasSize.height * t;
    n.NMCanvasCenter.x = this.options.canvasOffset.x + this.options.canvasSize.width / 2, n.NMCanvasCenter.y = this.options.canvasOffset.y + this.options.canvasSize.height / 2, n.NMCanvasStart.x = n.NMCanvasCenter.x - a / 2, n.NMCanvasStart.y = n.NMCanvasCenter.y - l / 2, n.NMCanvasEnd.x = n.NMCanvasCenter.x + a / 2, n.NMCanvasEnd.y = n.NMCanvasCenter.y + l / 2, n.NMZoomCenter.x = n.NMViewCenter.x, n.NMZoomCenter.y = n.NMViewCenter.y, o && (n.NMZoomCenter.x = o.x - n.NMViewPosition.x, n.NMZoomCenter.y = o.y - n.NMViewPosition.y);
    let r = n.NMViewCenter.x - n.NMCanvasCenter.x, c = n.NMViewCenter.y - n.NMCanvasCenter.y;
    return o && (r = n.NMZoomCenter.x - n.NMCanvasCenter.x, c = n.NMZoomCenter.y - n.NMCanvasCenter.y), n.NMViewBuff.x = r, n.NMViewBuff.y = c, n.NMCanvasSize.width = a, n.NMCanvasSize.height = l, n;
  }
  showZoomCenter(t, o) {
    if (!this.$dom)
      return { buff_x: 0, buff_y: 0 };
    const n = this.options.canvasZoom / 100, s = this.analysisByZoom(n, t), a = (this.options.canvasZoom + o) / 100, l = this.analysisByZoom(a, t), r = a / n, c = 0, f = 0, u = a / n, h = 0, g = 0;
    this.zoomCenter_of_newSize.x = r * s.NMViewBuff.x + f * s.NMViewBuff.y + h, this.zoomCenter_of_newSize.y = c * s.NMViewBuff.x + u * s.NMViewBuff.y + g;
    const p = s.NMViewBuff.x - this.zoomCenter_of_newSize.x, y = s.NMViewBuff.y - this.zoomCenter_of_newSize.y;
    this.zoomCenter_of_newSize.x += s.NMCanvasCenter.x, this.zoomCenter_of_newSize.y += s.NMCanvasCenter.y;
    let v = s.NMCanvasStart.x - s.NMCanvasCenter.x, x = s.NMCanvasStart.y - s.NMCanvasCenter.y, z = r * v + f * x + h, S = c * v + u * x + g;
    return l.NMCanvasStart.x = p + s.NMCanvasCenter.x + z, l.NMCanvasStart.y = p + s.NMCanvasCenter.y + S, v = s.NMCanvasEnd.x - s.NMCanvasCenter.x, x = s.NMCanvasEnd.y - s.NMCanvasCenter.y, z = r * v + f * x + h, S = c * v + u * x + g, l.NMCanvasEnd.x = p + s.NMCanvasCenter.x + z, l.NMCanvasEnd.y = p + s.NMCanvasCenter.y + S, s.NMCanvasOffsetBuff.x = p, s.NMCanvasOffsetBuff.y = y, {
      buff_x: p,
      buff_y: y
    };
  }
}
class Te extends Be {
  constructor(i, t) {
    super(i, t);
  }
  doLayout() {
    return w(this, null, function* () {
      if (!this.layouter) {
        d("no layouter");
        return;
      }
      if (!this.graphData.rootNode) {
        d("Cant find rootNode!");
        return;
      }
      this.options.showMaskWhenLayouting && this.loading(), yield Mt(300), this.options.canvasOpacity = 1, this._dataUpdated(), this.options.showMaskWhenLayouting && this.clearLoading(), d("node size\uFF1A", this.graphData.nodes.length);
      const i = this.options.useAnimationWhenExpanded;
      this.disableNextLayoutAnimation && (this.options.useAnimationWhenExpanded = !1), this.layouter.requireLinks && this.layouter.setLinks(this.getLinks()), this.layouter.viewUpdate = () => {
        this._dataUpdated();
      }, yield this.layouter.placeNodes(this.graphData.nodes, this.graphData.rootNode), this.options.useAnimationWhenExpanded = i, this.disableNextLayoutAnimation = !1, this.updateElementLines(), this._dataUpdated();
    });
  }
  refresh(i = !0) {
    return w(this, null, function* () {
      this.resetViewSize(), this.disableNextLayoutAnimation = !0, this._dataUpdated(), i && (yield this.doLayout()), d("placeOtherNodes"), yield this.placeOtherNodes(), d("placeOtherNodes ok!"), yield this.playShowEffect(), this.updateElementLines(), this._dataUpdated();
    });
  }
  playShowEffect() {
    return w(this, null, function* () {
      if (this.graphData.nodes.length === 0) {
        d("relation-graph:move to center: data not ready!");
        return;
      }
      if (d("playShowEffect:", this.options.moveToCenterWhenRefresh, this.options.zoomToFitWhenRefresh), this.graphData.rootNode && Number.isNaN(this.graphData.rootNode.x)) {
        d("rootNode.x is NaN, graph is currently hidden?");
        return;
      }
      this.options.moveToCenterWhenRefresh ? yield this.moveToCenter() : (this.setCanvasCenter(0, 0), this._dataUpdated()), yield this.zoomToFitWhenRefresh();
    });
  }
  moveToCenter() {
    return w(this, null, function* () {
      if (this.options.useAnimationWhenRefresh) {
        const i = this.getNodesCenter();
        d("center:", i.x, i.y);
        const t = this.getGraphOffet();
        d("centerOffset:", t.offset_x, t.offset_y);
        const o = this.options.viewSize.width / 2 - i.x + t.offset_x, n = this.options.viewSize.height / 2 - i.y + t.offset_y;
        yield this.animateGoto(o, n, 500), this._dataUpdated();
      } else {
        const i = this.getNodesCenter();
        d("center:", i.x, i.y), this.setCanvasCenter(i.x, i.y), this._dataUpdated();
      }
    });
  }
  zoomToFitWhenRefresh() {
    return w(this, null, function* () {
      this.options.zoomToFitWhenRefresh && (yield this.zoomToFit());
    });
  }
  placeOtherNodes() {
    return w(this, null, function* () {
      const i = [];
      this.graphData.rootNode && this.findGroupNodes(this.graphData.rootNode, i);
      const t = [], o = [];
      this.graphData.nodes.forEach((n) => {
        i.includes(n) || (this.options.placeSingleNode && (!n.targetNodes || n.targetNodes.length === 0) && n.fixed !== !0 ? (n.x = Math.floor(Math.random() * 200) - 100, n.y = Math.floor(Math.random() * 200) - 100, n.lot || (n.lot = { childs: [] }), n.lot.placed = !0, n.singleNode = !0, o.push(n)) : t.push(n));
      }), this.options.placeSingleNode && this.layouter.layoutOptions.layoutName !== "fixed" && this.placeSingleNodes(o), this.options.placeOtherGroup && this.layouter.layoutOptions.layoutName !== "fixed" && (yield this.placeOtherGroup(t, i), this._dataUpdated(), this.layouter.layoutOptions.layoutName === "force" && (this.stopAutoLayout(), setTimeout(() => {
        this.startAutoLayout();
      }, 500)));
    });
  }
  placeSingleNodes(i) {
    if (i.length > 0) {
      d("sigle nodes:", i.length);
      const t = new it({ layoutName: "force" }, this.options, this);
      t.allNodes = this.graphData.nodes, t.fastStart = !0, t.justLayoutSingleNode = !0, t.maxLayoutTimes = 100, t.byLine = !1, t.autoLayout(!0);
    }
  }
  placeOtherGroup(i, t) {
    return w(this, null, function* () {
      if (i.length > 0) {
        d("[placeOtherGroup]notPlacedNodes nodes:", i.length);
        const o = JSON.parse(JSON.stringify(this.layouter.layoutOptions)), n = i[0], s = rt(o, this.options, this);
        s.isMainLayouer = !1;
        const a = this.getStuffSize(t);
        d("[placeOtherGroup]placeOtherGroup:", s.layoutOptions.layoutName, "root:", n.text);
        let l = this.layouter.layoutOptions.layoutName.includes("tree") ? 300 : 600;
        if (s.layoutOptions.layoutName === "force") {
          const f = s;
          f.maxLayoutTimes = 0, l = 100;
        }
        n.x = a.maxX + l, n.y = 0, s.layoutOptions.fixedRootNode = !0;
        const r = [];
        this.findGroupNodes(n, r), d("[placeOtherGroup]thisGroupNodes:", i.length), this.layouter.requireLinks && this.layouter.setLinks(this.getLinks()), yield s.placeNodes(r, n), t.push(...r);
        const c = [];
        i.forEach((f) => {
          t.includes(f) || c.push(f);
        }), yield this.placeOtherGroup(c, t), this._dataUpdated();
      }
    });
  }
  zoomToFit(i) {
    return w(this, null, function* () {
      const t = this.getStuffSize(), o = this.options.viewSize.width / t.width, n = this.options.viewSize.height / t.height, s = Math.min(o, n, 1);
      d("zoomToFit:", { stuffSize: t, zoomPercent: s, zoomPercentX: o, zoomPercentY: n, viewSize: this.options.viewSize }), this.options.useAnimationWhenRefresh ? (yield this.animateToZoom(s * 100, 300), this._dataUpdated(), i && i()) : (this.setZoom(s * 100), this._dataUpdated(), i && i());
    });
  }
  animateGoto(i, t, o) {
    return w(this, null, function* () {
      return new Promise((n, s) => {
        d("animateGoto:", i, t);
        const a = i - this.options.canvasOffset.x, l = t - this.options.canvasOffset.y, r = o, c = 5, f = Math.round(a / c), u = Math.round(l / c), h = r / c;
        this.animateStepAction(0, h, c, () => {
          this.options.canvasOffset.x += f, this.options.canvasOffset.y += u, this._dataUpdated();
        }, () => {
          n();
        });
      });
    });
  }
  animateToZoom(i, t) {
    return w(this, null, function* () {
      return new Promise((o, n) => {
        const s = i - this.options.canvasZoom, a = t, l = 5, r = Math.round(s / l), c = a / l;
        d("animateToZoom:", s, r), this.animateStepAction(0, c, l, () => {
          this.zoom(r), this._dataUpdated();
        }, () => {
          this.setZoom(i), this._dataUpdated(), o();
        });
      });
    });
  }
  animateStepAction(i, t, o, n, s) {
    i < o ? (n(i, o), setTimeout(() => {
      this.animateStepAction(i + 1, t, o, n, s);
    }, t)) : s();
  }
  toggleAutoLayout() {
    this.options.autoLayouting = !this.options.autoLayouting, d("toggleAutoLayout:to:", this.options.autoLayouting), this.options.autoLayouting ? this.startAutoLayout() : this.stopAutoLayout();
  }
  startAutoLayout() {
    this.options.autoLayouting = !0, this.layouter.autoLayout ? (d("startAutoLayout:"), this.layouter.autoLayout(!0)) : d("Current layout not support autoLayout()");
  }
  stopAutoLayout() {
    this.options.autoLayouting = !1, this.layouter.stop ? this.layouter.stop() : d("Current layout not support stop()");
  }
  sleep(i) {
    return w(this, null, function* () {
      yield Mt(i);
    });
  }
}
let Q = { x: 0, y: 0 };
const tt = { x: 0, y: 0 }, et = { x: 0, y: 0 };
let pt, gt;
const Ot = (e) => {
  const i = {
    clientX: 0,
    clientY: 0
  };
  if (Z(e)) {
    const t = e.touches || e.targetTouches;
    if (!t)
      throw new Error("error targetTouches");
    i.clientX = t[0].clientX, i.clientY = t[0].clientY;
  } else
    i.clientX = e.clientX, i.clientY = e.clientY;
  return i;
}, U = {
  startDrag(e, i, t, o) {
    o ? pt = (n, s, a) => {
      const l = n - et.x, r = s - et.y;
      o(l, r, tt, et, a);
    } : pt = (n, s) => {
      Q.x = tt.x + (n - et.x), Q.y = tt.y + (s - et.y);
    }, gt = t, Q = i, tt.x = Q.x, tt.y = Q.y, d("[canvas]onDragStart...", Z(e), e);
    try {
      const n = Ot(e);
      et.x = n.clientX, et.y = n.clientY, Z(e) ? (document.body.addEventListener("touchmove", U.onNodeMove), document.body.addEventListener("touchend", U.onNodeDragend), e.preventDefault()) : (document.body.addEventListener("mousemove", U.onNodeMove), document.body.addEventListener("mouseup", U.onNodeDragend));
    } catch (n) {
      console.error(n.message);
    }
  },
  onNodeMove(e) {
    const i = Ot(e);
    pt(i.clientX, i.clientY, e);
  },
  onNodeDragend(e) {
    Z(e) ? (document.body.removeEventListener("touchmove", U.onNodeMove), document.body.removeEventListener("touchend", U.onNodeDragend)) : (document.body.removeEventListener("mousemove", U.onNodeMove), document.body.removeEventListener("mouseup", U.onNodeDragend)), d("[canvas]onDragend...", Z(e), e), gt && gt(
      Q.x - tt.x,
      Q.y - tt.y,
      e
    );
  }
}, Ie = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: U
}, Symbol.toStringTag, { value: "Module" }));
class Re extends Te {
  constructor(t, o) {
    super(t, o);
    _(this, "prevClickTime", 0);
    _(this, "movingListener");
    _(this, "step1EventTime", 0);
    _(this, "onCreateLineCallback");
  }
  setDefaultLineShape(t) {
    this.options.defaultLineShape = t;
  }
  setDefaultJunctionPoint(t) {
    this.options.defaultJunctionPoint = t;
  }
  setCheckedNode(t) {
    this.options.checkedNodeId = t;
  }
  setCheckedLinkAndLine(t, o) {
    this.options.checkedLinkId = t.seeks_id, this.options.checkedLineId = o ? o.id : "";
  }
  clearChecked() {
    this.options.checkedNodeId = "", this.options.checkedLineId = "", this.options.checkedLinkId = "";
  }
  selectNode(t, o) {
    t.selected = o;
  }
  flashNode(t, o) {
    t.flashing = o;
  }
  updateNodeOffsetSize(t, o, n) {
    t.el.offsetWidth = o, t.el.offsetHeight = n;
  }
  onNodeClick(t, o) {
    if (Date.now() - this.prevClickTime < 200) {
      d("[node]click abort : time < 200");
      return;
    }
    if (this.prevClickTime = Date.now(), this.options.creatingLinePlot) {
      this.onNodeClickWhenCreatingLinePlot(t);
      return;
    }
    d("[node]node click", t.text, this.options.creatingLinePlot), !o.shiftKey && this.options.disableNodeClickEffect !== !0 && t.disableDefaultClickEffect !== !0 && (this.options.checkedLinkId = "", this.options.checkedLineId = "", this.setCheckedNode(t.id)), this.listeners.onNodeClick && this.listeners.onNodeClick(t, o), this.prevClickTime = Date.now();
  }
  onNodeDragStart(t, o) {
    if (this.options.disableDragNode || t.disableDrag)
      return;
    isNaN(t.x) && (t.x = 0), isNaN(t.y) && (t.y = 0), t.dragging = !0, this.listeners.onNodeDragStart && this.listeners.onNodeDragStart(t, o), this.emitEvent("node-drag-start", { node: t });
    const n = (s, a, l) => {
      t.dragging = !1, this.onNodeDraged(t, s, a, l), this._dataUpdated();
    };
    U.startDrag(o, t, n, (s, a, l) => {
      let r = s / (this.options.canvasZoom / 100) + l.x, c = a / (this.options.canvasZoom / 100) + l.y;
      if (this.listeners.onNodeDragging) {
        const f = this.listeners.onNodeDragging(t, r, c, o);
        f && (typeof f.x == "number" && (r = f.x), typeof f.y == "number" && (c = f.y));
      }
      this.setNodePosition(t, r, c), this.options.useHorizontalView ? (r = a / (this.options.canvasZoom / 100) + l.x, c = -s / (this.options.canvasZoom / 100) + l.y, this.setNodePosition(t, r, c)) : this.setNodePosition(t, r, c), this.emitEvent("node-dragging", { node: t, x: r, y: c }), this.updateElementLines(), this._dataUpdated();
    });
  }
  onNodeDraged(t, o, n, s) {
    if (o === 0 && n === 0) {
      d("[node]node click by drag"), this.onNodeClick(t, s);
      return;
    }
    this.options.isMoveByParentNode && t.lot.childs.forEach((a) => {
      a.x += o, a.y += n;
    }), Math.abs(o) + Math.abs(n) > 6 ? (this.prevClickTime = Date.now(), setTimeout(() => {
      d("[node]onDragEnd2"), this.onNodeDragEnd(t, s);
    }, 100)) : (d("[node]onDragEnd1"), this.onNodeDragEnd(t, s));
  }
  onNodeDragEnd(t, o) {
    this.updateElementLines(), this.listeners.onNodeDragEnd && this.listeners.onNodeDragEnd(t, o), this.emitEvent("node-drag-end", { node: t });
  }
  onLineClick(t, o, n) {
    d("onLineClick:", "line:", t, "link:", o), this.options.disableLineClickEffect !== !0 && t.disableDefaultClickEffect !== !0 && (this.setCheckedNode(""), this.setCheckedLinkAndLine(o, t)), this.listeners.onLineClick && this.listeners.onLineClick(t, o, n);
  }
  expandOrCollapseNode(t, o) {
    return w(this, null, function* () {
      t.expanded === !1 ? yield this.expandNode(t, o) : yield this.collapseNode(t, o);
    });
  }
  setChildsFromPosition(t, o) {
    t.lot.childs.forEach((n) => {
      n.x = o.x, n.y = o.y, this.setChildsFromPosition(n, o);
    });
  }
  expandNode(t, o) {
    return w(this, null, function* () {
      d("onNodeExpand:", t), t.expanded = !0, this.options.useAnimationWhenExpanded && (yield this.layouter.snapshotBeforeAnimation(), this.setChildsFromPosition(t, t), yield this.layouter.animationLayout(!1)), d("relayout check:", this.options.reLayoutWhenExpandedOrCollapsed), this.options.reLayoutWhenExpandedOrCollapsed && (d("relayout..."), yield this.layouter.snapshotBeforeAnimation(), yield this.doLayout()), this.updateElementLines(), this._dataUpdated(), this.listeners.onNodeExpand && this.listeners.onNodeExpand(t, o);
    });
  }
  setChildsToPosition(t, o) {
    t.lot.childs.forEach((n) => {
      n.lot.from_x = n.x, n.lot.from_y = n.y, n.lot.to_x = o.x, n.lot.to_y = o.y, this.setChildsToPosition(n, o);
    });
  }
  collapseNode(t, o) {
    return w(this, null, function* () {
      d("onNodeCollapse:", t), this.options.useAnimationWhenExpanded && (yield this.layouter.snapshotBeforeAnimation(), this.setChildsToPosition(t, t), yield this.layouter.animationLayout(!1)), t.expanded = !1, d("relayout check:", this.options.reLayoutWhenExpandedOrCollapsed), this.options.reLayoutWhenExpandedOrCollapsed && (d("relayout..."), yield this.layouter.snapshotBeforeAnimation(), yield this.doLayout()), this.updateElementLines(), this._dataUpdated(), this.listeners.onNodeCollapse && this.listeners.onNodeCollapse(t, o);
    });
  }
  onCanvasDragEnd(t) {
    this.setCanvasOffset(this.options.canvasOffset.x + 1, this.options.canvasOffset.y + 1), this.listeners.onCanvasDragEnd && this.listeners.onCanvasDragEnd(t);
  }
  onCanvasClick(t) {
    this.options.creatingLinePlot && this.onCanvasClickWhenCreatingLinePlot(t), this.listeners.onCanvasClick && this.listeners.onCanvasClick(t);
  }
  clickGraphMask(t) {
    this.clearLoading();
  }
  onCanvasSelectionEnd(t, o) {
    this.listeners.onCanvasSelectionEnd && this.listeners.onCanvasSelectionEnd(t, o);
  }
  startCreatingNodePlot(t, o) {
    this.options.newNodeTemplate = at(JSON.parse(JSON.stringify(vt)), this.options), this.options.creatingNodePlot = !0;
    const n = Z(t);
    this.options.showTemplateNode = !n;
    let s = (p, y) => {
      this.options.newNodeTemplate.x = p, this.options.newNodeTemplate.y = y, this._dataUpdated();
    }, a = (p, y) => {
      const v = "s-" + Date.now();
      this.addNodes([{
        id: v,
        text: this.options.newNodeTemplate.text,
        x: p,
        y
      }]);
    };
    o && o.templateText && (this.options.newNodeTemplate.text = o.templateText), o && o.templateStyleClass && (this.options.newNodeTemplate.styleClass = o.templateStyleClass), o && o.templateNode && Object.keys(o.templateNode).forEach((p) => {
      this.options.newNodeTemplate[p] = o.templateNode[p];
    }), o && o.templateMove && (s = o.templateMove), o && o.onCreateNode && (a = o.onCreateNode);
    const l = this.$dom.getBoundingClientRect();
    d("[CreatingNodePlot]startCreatingNodePlot:");
    const r = ut(t), c = r.clientX - l.x + 10, f = r.clientY - l.y + 10;
    n || s(c, f);
    const u = (p) => {
      const y = this.$dom.getBoundingClientRect();
      d("[CreatingNodePlot]objectTemplateMove");
      const v = p.clientX - y.x + 10, x = p.clientY - y.y + 10;
      s(v, x);
    }, h = (p) => {
      d("[CreatingNodePlot]user abort!"), this.$dom.removeEventListener("mousemove", u), this.$dom.removeEventListener("click", g), this.$dom.removeEventListener("contextmenu", h), this.options.creatingNodePlot = !1;
    }, g = (p) => {
      let y = !1;
      if (this.options.creatingNodePlot || (y = !0), this.$dom.removeEventListener("mousemove", u), this.$dom.removeEventListener("click", g), this.$dom.removeEventListener("contextmenu", h), this.options.creatingNodePlot = !1, y) {
        d("[CreatingNodePlot]action be abort!");
        return;
      }
      const v = ut(p), x = v.clientX - l.x + 10, z = v.clientY - l.y + 10;
      if (o && o.disableClickCreate && Math.abs(c - x) < 5 && Math.abs(f - z) < 5) {
        d("[CreatingNodePlot]create node be abort!");
        return;
      }
      const S = this.getCanvasCoordinateByClientCoordinate({ x: v.clientX, y: v.clientY });
      d("[CreatingNodePlot]objectBePlaced:", S), a(S.x, S.y), this._dataUpdated();
    };
    setTimeout(() => {
      this.$dom.addEventListener("click", g), this.$dom.addEventListener("contextmenu", h);
    }, 300), n || this.$dom.addEventListener("mousemove", u);
  }
  startCreatingLinePlot(t, o) {
    const n = Z(t);
    o && o.onCreateLine && (this.onCreateLineCallback = o.onCreateLine), o && o.template && Object.assign(this.options.newLineTemplate, o.template), this.options.newLinkTemplate.fromNode = null, o && o.fromNode && (this.options.newLinkTemplate.toNode.x = o.fromNode.x + 50, this.options.newLinkTemplate.toNode.y = o.fromNode.y + 50, this.options.newLinkTemplate.fromNode = o.fromNode, this.step1EventTime = Date.now()), this.options.creatingLinePlot = !0, this.options.newLinkTemplate.toNodeObject = null, this.options.newLineTemplate.disableDefaultClickEffect = !0, this.options.newLinkTemplate.toNode.el.offsetWidth = 2, this.options.newLinkTemplate.toNode.el.offsetHeight = 2, d("[CreatingLinePlot]startCreatingLinePlot:", n), n || (d("[CreatingLinePlot]Listener move"), this.movingListener = this.onMovingWhenCreatingLinePlot.bind(this), this.$dom.addEventListener("mousemove", this.movingListener));
  }
  stopCreatingLinePlot() {
    d("[CreatingLinePlot]stop CreatingLinePlot!"), this.options.creatingLinePlot = !1, this.options.newLinkTemplate.fromNode = null, this.options.newLinkTemplate.toNodeObject = null, this.onCreateLineCallback = void 0, this.$dom.removeEventListener("mousemove", this.movingListener), this._dataUpdated();
  }
  onMovingWhenCreatingLinePlot(t) {
    if (d("[CreatingLinePlot]mousemove"), this.options.newLinkTemplate.fromNode) {
      const o = this.getCanvasCoordinateByClientCoordinate({
        x: t.clientX,
        y: t.clientY
      });
      this.options.newLinkTemplate.toNode.x = o.x, this.options.newLinkTemplate.toNode.y = o.y, this._dataUpdated();
    }
  }
  onCanvasClickWhenCreatingLinePlot(t) {
    if (Date.now() - this.step1EventTime < 500) {
      d("[CreatingLinePlot]step1EventTime:", this.step1EventTime);
      return;
    }
    if (!this.options.newLinkTemplate.fromNode) {
      d("[CreatingLinePlot]CreatingLinePlot:fromNode not set!");
      return;
    }
    if (!this.options.newLinkTemplate.toNodeObject) {
      d("[CreatingLinePlot]CreatingLinePlot:toNodeObject not set!");
      const o = ut(t), n = this.getCanvasCoordinateByClientCoordinate({ x: o.clientX, y: o.clientY });
      this.onCreateLine(this.options.newLinkTemplate.fromNode, n);
    }
    this.stopCreatingLinePlot();
  }
  onNodeClickWhenCreatingLinePlot(t) {
    this.options.newLinkTemplate.fromNode ? (d("[CreatingLinePlot]step 2: set toNodeObjecct:", this.options.newLinkTemplate.fromNode, t), this.options.newLinkTemplate.toNodeObject = t, this.onCreateLine(this.options.newLinkTemplate.fromNode, t), this.stopCreatingLinePlot()) : (d("[CreatingLinePlot]step 1: set fromNode:", t), this.options.newLinkTemplate.fromNode = t, this.options.newLinkTemplate.toNode.x = t.x + 50, this.options.newLinkTemplate.toNode.y = t.y + 50, this.step1EventTime = Date.now());
  }
  onCreateLine(t, o) {
    d("[CreatingLinePlot][fire-event]onCreateLine:", t, o), this.onCreateLineCallback && this.onCreateLineCallback(t, o, this.options.newLineTemplate);
  }
  isNode(t) {
    const o = yt(t, "rel-node-peel", "rel-map");
    return o ? this.getNodeById(o.dataset.id) : void 0;
  }
  isLink(t) {
    const o = yt(t, "rel-link-peel", "rel-map");
    return o ? this.getLinkById(o.dataset.id) : void 0;
  }
  onContextmenu(t) {
    let o = "canvas", n = this.isNode(t.target);
    n ? o = "node" : (n = this.isLink(t.target), n && (o = "link")), d("contextmenu:objectType", o, n), this.listeners.onContextmenu && this.listeners.onContextmenu(t, o, n);
  }
  fullscreen(t) {
    t === void 0 ? (this.options.fullscreen = !this.options.fullscreen, X.toggle(this.$dom).then(() => {
    })) : this.options.fullscreen = t, this.emitEvent("fullscreen", { fullscreen: this.options.fullscreen });
  }
  focusNodeById(t) {
    return w(this, null, function* () {
      let o;
      this.graphData.nodes.forEach((n) => {
        n.id === t && (o = n);
      }), o && (yield this.handleSelect(o));
    });
  }
  focusRootNode() {
    return w(this, null, function* () {
      d("relation-graph:focusRootNode"), this.graphData.rootNode && (yield this.handleSelect(this.graphData.rootNode));
    });
  }
  handleSelect(t) {
    return w(this, null, function* () {
      d("checked:", t), scrollTo({
        top: this.$dom.offsetTop
      }), yield this.animateToZoom(100, 300);
      const o = t.width || 50, n = t.height || 50, s = t.x * -1 + this.options.viewSize.width / 2 - o / 2, a = t.y * -1 + this.options.viewSize.height / 2 - n / 2;
      yield this.animateGoto(s, a, 500), this.options.checkedNodeId = t.id, this.refreshNVAnalysisInfo();
    });
  }
  onMouseWheel(t) {
    if (this.options.disableZoom)
      return t.cancelBubble = !1, !0;
    try {
      t.cancelBubble = !0, t.preventDefault(), t.stopPropagation();
    } catch (a) {
    }
    const o = {
      x: t.clientX,
      y: t.clientY
    };
    let n = t.deltaY;
    n === void 0 && (n = t.wheelDelta);
    const s = -1;
    n > 0 ? this.zoom(5 * s, o) : this.zoom(-5 * s, o);
  }
  onLineDragStart(t, o) {
    d("onLineDragStart...");
    const n = { x: t.fromNode.x, y: t.fromNode.y }, s = { x: t.toNode.x, y: t.toNode.y }, a = (l, r, c, f, u) => {
      t.fromNode.x = n.x + l / (this.options.canvasZoom / 100), t.fromNode.y = n.y + r / (this.options.canvasZoom / 100), t.toNode.x = s.x + l / (this.options.canvasZoom / 100), t.toNode.y = s.y + r / (this.options.canvasZoom / 100), this._dataUpdated();
    };
    U.startDrag(o, { x: 0, y: 0 }, (...l) => {
      this.onLineDragEnd(...l);
    }, a);
  }
  onLineDragEnd(t, o, n) {
    d("onLineDragEnd"), this.updateElementLines();
  }
  onCanvasDragStart(t) {
    if (d("[canvas]onCanvasDragStart..."), t.stopPropagation(), this.options.disableDragCanvas || t.shiftKey) {
      this.startCreateSelection(t);
      return;
    }
    if (!this.options.disableDragLine) {
      const n = this.isLink(t.target);
      if (n) {
        this.onLineDragStart(n, t);
        return;
      }
    }
    let o;
    if (Z(t)) {
      let n, s = 1;
      o = (a, l, r, c, f) => {
        const u = f.touches || f.targetTouches, h = u[0];
        if (u && u.length > 1) {
          f.preventDefault();
          const g = u[1];
          n || (n = { x: g.clientX, y: g.clientY }, s = this.options.canvasZoom);
          const p = { x: h.clientX, y: h.clientY }, y = { x: g.clientX, y: g.clientY }, v = Math.hypot(n.x - c.x, n.y - c.y), z = Math.hypot(y.x - p.x, y.y - p.y) / v, S = s * z;
          this.setZoom(S), this._dataUpdated();
        } else {
          const g = h.clientX, p = h.clientY;
          let y = r.x + (g - c.x), v = r.y + (p - c.y);
          this.options.useHorizontalView ? (y = r.x + (p - c.y), v = r.y - (g - c.x), this.setCanvasOffset(y, v)) : this.setCanvasOffset(y, v), this._dataUpdated();
        }
      };
    } else
      o = (n, s, a, l, r) => {
        const c = a.x + n, f = a.y + s;
        this.setCanvasOffset(c, f);
      };
    U.startDrag(t, this.options.canvasOffset, (...n) => {
      this.onCanvasDragStop(...n);
    }, o);
  }
  onCanvasDragStop(t, o, n) {
    if (d("[canvas]onCanvasDragStop..."), this.options.creatingSelection) {
      this.options.creatingSelection = !1, this._dataUpdated(), this.onCanvasSelectionEnd(this.options.selectionView, n);
      return;
    }
    if (t === 0 && o === 0) {
      d("[canvas]click2"), this._dataUpdated(), this.onCanvasClick(n);
      return;
    }
    Math.abs(t) + Math.abs(o) > 6 ? setTimeout(() => {
      d("[canvas]onDragEnd1"), this.onCanvasDragEnd(n);
    }, 100) : (d("[canvas]onDragEnd2"), this.onCanvasDragEnd(n));
  }
  startCreateSelection(t) {
    let o = !1;
    const n = (s, a, l, r, c) => {
      if (!o && Math.abs(s) + Math.abs(a) > 6 && (o = !0, this.options.creatingSelection = !0, this.options.selectionView.x = r.x, this.options.selectionView.y = r.y), o) {
        const f = this.getBoundingClientRect();
        s < 0 ? (this.options.selectionView.x = r.x + s - f.x, this.options.selectionView.width = Math.abs(s)) : (this.options.selectionView.x = r.x - f.x, this.options.selectionView.width = s), a < 0 ? (this.options.selectionView.y = r.y + a - f.y, this.options.selectionView.height = Math.abs(a)) : (this.options.selectionView.y = r.y - f.y, this.options.selectionView.height = a);
      }
      this._dataUpdated();
    };
    U.startDrag(t, { x: 0, y: 0 }, (...s) => {
      this.onCanvasDragStop(...s);
    }, n);
  }
}
class Ve extends Re {
  constructor(i, t) {
    super(i, t);
  }
  dataUpdated() {
    this.isReact || this.options.canvasZoom <= 40 ? this._dataUpdated() : (this.zoom(1), this.zoom(-1));
  }
  setOptions(i, t = !1) {
    return w(this, null, function* () {
      if (this.disableNextLayoutAnimation = !0, this._setOptions(i), t === !0) {
        d("setOptions:justUpdateOptionsValue");
        return;
      }
      this.initLayouter(), this.resetViewSize(), yield this.doLayout(), this.resetViewSize();
    });
  }
  setLayouter(i) {
    d("setLayouterClass::", i), this.userLayouerClass = i, this.layouter = this.userLayouerClass;
  }
  switchLayout(i, t = !0, o = !1) {
    return w(this, null, function* () {
      this.listeners.beforeChangeLayout && this.listeners.beforeChangeLayout(i) === !1 && (t = !1);
      const n = this.layouter ? this.layouter.allNodes : [], s = this.layouter && this.layouter.rootNode;
      d("[change layout]switchLayout"), this.stopAutoLayout(), ht(i, this.options), this._initLayoutByLayoutOptions(i), this.layouter.allNodes = n, this.layouter.rootNode = s, t ? yield this.refresh() : (o || (this.disableNextLayoutAnimation = !0), yield this.doLayout());
    });
  }
  setJsonData(i, t = !1) {
    return w(this, null, function* () {
      this.options.canvasOpacity = 0.01, this._dataUpdated(), yield this._setJsonData(i);
      const o = i.rootId;
      if (o && (this.graphData.rootNode = this.graphData.nodes.find((n) => n.id === o)), !this.graphData.rootNode && this.graphData.nodes.length > 0 && (this.graphData.rootNode = this.graphData.nodes[0]), this.graphData.rootNode)
        this.options.defaultFocusRootNode && this.setCheckedNode(this.graphData.rootNode.id);
      else
        throw new Error("The root node [rootId] is not set! Or cannot get the root node:" + i.rootId + ", If you don't have any nodes to display, you can simply set an invisible node: {id:'root', opacity:0}");
      t && (d("resetViewSize:", t), this.resetViewSize()), this.disableNextLayoutAnimation = !0, yield this.doLayout();
    });
  }
  appendJsonData(i, t = !0) {
    return w(this, null, function* () {
      d("appendData:", i), this.options.canvasOpacity = 0.01, this._dataUpdated(), this.loadGraphJsonData(i), t && (this.disableNextLayoutAnimation = !0, yield this.doLayout());
    });
  }
}
class Fe extends Ve {
  constructor(t, o) {
    super(t, o);
    _(this, "$easyViewCanvas");
    _(this, "$canvasCtx");
    _(this, "easyViewUpdating", !1);
    _(this, "easyViewUpdateHasNext", !1);
    _(this, "easyViewUpdateTimer");
    _(this, "easyViewOffset", { x: 0, y: 0 });
  }
  setEasyViewCanvas(t) {
    this.$easyViewCanvas = t, this.$canvasCtx = this.$easyViewCanvas.getContext("2d");
  }
  startUpdateTask() {
    this.updateEasyView(), requestAnimationFrame(this.startUpdateTask.bind(this));
  }
  updateEasyView() {
    !this.options.performanceMode || !this.options.showEasyView || requestAnimationFrame(this._updateEasyView.bind(this));
  }
  _updateEasyView() {
    try {
      this.easyViewUpdating = !0, this.dosomethingBeforeDraw(), this.drawAllNodes(), this.drawAllLines();
    } catch (t) {
      console.error(t);
    }
    this.easyViewUpdating = !1, this.easyViewUpdateHasNext && (this.easyViewUpdateHasNext = !1, this._updateEasyView());
  }
  dosomethingBeforeDraw() {
    const t = this.$easyViewCanvas.getBoundingClientRect().width, o = this.$easyViewCanvas.getBoundingClientRect().height;
    this.$easyViewCanvas.width = t, this.$easyViewCanvas.height = o, this.$canvasCtx.canvas.width = t, this.$canvasCtx.canvas.height = o, d("updateEasyView", t, o), this.$canvasCtx.scale(this.options.canvasZoom / 100, this.options.canvasZoom / 100), this.easyViewOffset.x = this.options.canvasOffset.x / (this.options.canvasZoom / 100), this.easyViewOffset.y = this.options.canvasOffset.y / (this.options.canvasZoom / 100);
  }
  drawAllNodes() {
    for (const t of this.getNodes())
      m.isAllowShowNode(t) && t.opacity && t.opacity > 0 && this.drawNode(t);
  }
  drawNode(t) {
    (t.nodeShape !== void 0 && t.nodeShape !== null ? t.nodeShape : this.options.defaultNodeShape) === 1 ? this.drawNode4Rect(t) : this.drawNode4Circle(t);
  }
  getNodeColor(t) {
    const o = t.color || this.options.defaultNodeColor || "red";
    return o === "transparent" ? "rgba(204,204,204,0.55)" : o;
  }
  drawNode4Rect(t) {
    const o = this.$canvasCtx, n = t.el.offsetWidth - 16, s = t.el.offsetHeight - 16, a = this.easyViewOffset.x + t.x + 8, l = this.easyViewOffset.y + t.y + 8;
    o.beginPath(), o.globalAlpha = t.opacity || 1, o.rect(a, l, n, s), o.fillStyle = this.getNodeColor(t), o.fill(), o.globalAlpha = 1;
  }
  drawNode4Circle(t) {
    const o = this.$canvasCtx, n = t.el.offsetWidth - 16, s = t.el.offsetHeight - 16, a = this.easyViewOffset.x + t.x + n / 2 + 8, l = this.easyViewOffset.y + t.y + s / 2 + 8;
    o.beginPath(), o.globalAlpha = t.opacity || 1, o.ellipse(a, l, n / 2, s / 2, 0, 0, 2 * Math.PI), o.fillStyle = this.getNodeColor(t), o.fill(), o.globalAlpha = 1;
  }
  drawAllLines() {
    for (const t of this.getLinks())
      if (m.isAllowShowNode(t.fromNode) && m.isAllowShowNode(t.toNode))
        for (let o = 0; o < t.relations.length; o++)
          this.drawLine(t, t.relations[o], o);
  }
  drawLine(t, o, n) {
    const s = this.$canvasCtx;
    this.easyViewOffset.x + t.fromNode.x, this.easyViewOffset.y + t.fromNode.y, this.easyViewOffset.x + t.toNode.x, this.easyViewOffset.y + t.toNode.y;
    const a = this.createLinePath(t, o, n);
    s.beginPath(), s.globalAlpha = o.opacity || 1, this.drawSvgPathOnCanvas(s, a.path), s.strokeStyle = o.color || this.options.defaultLineColor || "red", s.lineWidth = o.lineWidth || this.options.defaultLineWidth || 1, s.stroke(), s.globalAlpha = 1;
  }
  getPointValue(t, o, n) {
    return n ? t + parseFloat(o) : parseFloat(o);
  }
  drawSvgPathOnCanvas(t, o) {
    const n = o.match(/[a-zA-Z][^a-zA-Z]*/g);
    let s = 0, a = 0, l = 0, r = 0, c = 0, f = 0, u = 0, h = 0, g = !1;
    n.forEach((p) => {
      const y = p.trim().split(/[ ,]+/), v = y[0].toUpperCase(), x = y[0] === y[0].toLowerCase();
      switch (v) {
        case "M":
          s = this.getPointValue(l, y[1], x) + this.easyViewOffset.x, a = this.getPointValue(r, y[2], x) + this.easyViewOffset.y, l = s, r = a, g && (t.closePath(), g = !1), t.moveTo(s, a);
          break;
        case "L":
          s = this.getPointValue(l, y[1], x) + this.easyViewOffset.x, a = this.getPointValue(r, y[2], x) + this.easyViewOffset.y, t.lineTo(s, a);
          break;
        case "C":
          c = this.getPointValue(l, y[1], x), f = this.getPointValue(r, y[2], x), u = this.getPointValue(l, y[3], x), h = this.getPointValue(r, y[4], x), s = this.getPointValue(l, y[5], x), a = this.getPointValue(r, y[6], x), l = s, r = a, t.bezierCurveTo(c, f, u, h, s, a);
          break;
        case "V":
          a = this.getPointValue(r, y[1], x), r = a, t.lineTo(s, a);
          break;
        case "H":
          s = this.getPointValue(l, y[1], x), l = s, t.lineTo(s, a);
          break;
        case "Z":
          t.closePath(), g = !1;
          break;
        default:
          d(`Unsupported command: ${v}`);
      }
    });
  }
}
class Qt extends Fe {
  constructor(i, t) {
    super(i, t);
  }
  ready() {
    this.initLayouter(), this.resetViewSize(), this.refreshNVAnalysisInfo();
  }
}
const He = {
  props: {
    nodeProps: {
      type: Object,
      required: !0
    },
    expandButtonClass: {
      type: String,
      required: !0
    },
    expandOrCollapseNode: {
      type: Function,
      required: !0
    },
    expandHolderPosition: {
      type: String,
      required: !0
    },
    color: {
      type: String,
      required: !0
    }
  }
};
var We = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { staticClass: "c-btn-open-close", class: ["c-expand-positon-" + e.expandHolderPosition] }, [t("span", { class: e.expandButtonClass, style: { "background-color": e.color }, on: { click: function(o) {
    return o.stopPropagation(), e.expandOrCollapseNode.apply(null, arguments);
  }, touchend: function(o) {
    return o.stopPropagation(), e.expandOrCollapseNode.apply(null, arguments);
  } } })]);
}, Ue = [];
function R(e, i, t, o, n, s, a, l) {
  var r = typeof e == "function" ? e.options : e;
  i && (r.render = i, r.staticRenderFns = t, r._compiled = !0), o && (r.functional = !0), s && (r._scopeId = "data-v-" + s);
  var c;
  if (a ? (c = function(h) {
    h = h || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext, !h && typeof __VUE_SSR_CONTEXT__ != "undefined" && (h = __VUE_SSR_CONTEXT__), n && n.call(this, h), h && h._registeredComponents && h._registeredComponents.add(a);
  }, r._ssrRegister = c) : n && (c = l ? function() {
    n.call(
      this,
      (r.functional ? this.parent : this).$root.$options.shadowRoot
    );
  } : n), c)
    if (r.functional) {
      r._injectStyles = c;
      var f = r.render;
      r.render = function(g, p) {
        return c.call(p), f(g, p);
      };
    } else {
      var u = r.beforeCreate;
      r.beforeCreate = u ? [].concat(u, c) : [c];
    }
  return {
    exports: e,
    options: r
  };
}
const Et = {};
var je = /* @__PURE__ */ R(
  He,
  We,
  Ue,
  !1,
  Ye,
  null,
  null,
  null
);
function Ye(e) {
  for (let i in Et)
    this[i] = Et[i];
}
const Xe = /* @__PURE__ */ function() {
  return je.exports;
}(), Ze = {
  name: "SeeksRGNode",
  components: { RGNodeExpandHolder: Xe },
  props: {
    nodeProps: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    }
  },
  data() {
    return {
      expanding: !1
    };
  },
  inject: ["graph", "graphInstance"],
  computed: {
    oldVersionSlot() {
      const e = this.$scopedSlots.node({ node: this.nodeProps });
      return e.length === 0 ? null : e;
    },
    expandButtonClass() {
      return this.nodeProps.expanded === !1 ? "c-expanded" : "c-collapsed";
    },
    showExpandHolder() {
      return this.nodeProps.expandHolderPosition && this.nodeProps.expandHolderPosition !== "hide" || this.options.defaultExpandHolderPosition && this.options.defaultExpandHolderPosition !== "hide" && this.nodeProps.lot.childs && this.nodeProps.lot.childs.length > 0;
    },
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    },
    borderStyle() {
      const e = this.nodeProps.borderWidth === void 0 ? this.options.defaultNodeBorderWidth : this.nodeProps.borderWidth;
      return (this.nodeProps.borderColor || this.options.defaultNodeBorderColor) + " solid " + e + "px";
    },
    nodeWidth() {
      if (this.nodeProps.width === 0)
        return;
      const e = this.nodeProps.width || this.options.defaultNodeWidth;
      if (!!e)
        return e + "px";
    },
    nodeHeight() {
      if (this.nodeProps.height === 0)
        return;
      const e = this.nodeProps.height || this.options.defaultNodeHeight;
      if (!!e)
        return e + "px";
    }
  },
  created() {
  },
  mounted() {
    this.refreshNodeProperties(), this.relationGraph.addNodeResizeListener(this.$refs.seeksRGNode, this.nodeProps), d("RGNode:mounted");
  },
  beforeDestroy() {
    this.relationGraph.removeNodeResizeListener(this.$refs.seeksRGNode);
  },
  methods: {
    refreshNodeProperties() {
      this.$refs.seeksRGNode.offsetWidth === 0 && this.$refs.seeksRGNode.offsetHeight === 0 || (this.nodeProps.el.offsetWidth !== this.$refs.seeksRGNode.offsetWidth || this.nodeProps.el.offsetHeight !== this.$refs.seeksRGNode.offsetHeight) && this.relationGraph.updateNodeOffsetSize(this.nodeProps, this.$refs.seeksRGNode.offsetWidth, this.$refs.seeksRGNode.offsetHeight);
    },
    expandOrCollapseNode(e) {
      return w(this, null, function* () {
        d("expandOrCollapseNode", this.expanding), !this.expanding && (this.expanding = !0, setTimeout(() => {
          this.expanding = !1;
        }, 300), yield this.relationGraph.expandOrCollapseNode(this.nodeProps, e));
      });
    },
    onDragStart(e) {
      this.relationGraph.onNodeDragStart(this.nodeProps, e);
    },
    onclick(e) {
      this.relationGraph.onNodeClick(this.nodeProps, e);
    },
    isAllowShowNode(e) {
      return m.isAllowShowNode(e);
    }
  }
};
var Je = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { directives: [{ name: "show", rawName: "v-show", value: e.isAllowShowNode(e.nodeProps), expression: "isAllowShowNode(nodeProps)" }], ref: "seeksRGNode", staticClass: "rel-node-peel", class: [e.nodeProps.selected && "rel-node-selected", e.nodeProps.dragging && "rel-node-dragging", e.nodeProps.id === e.options.checkedNodeId && "rel-node-peel-checked", e.nodeProps.className], style: {
    left: e.nodeProps.x + "px",
    top: e.nodeProps.y + "px",
    opacity: e.nodeProps.opacity > 1 ? e.nodeProps.opacity / 100 : e.nodeProps.opacity
  }, attrs: { "data-id": e.nodeProps.id } }, [e.showExpandHolder ? [e.options.oldVueVersion && !e.options.ovUseNodeExpandHolderSlot ? [t("RGNodeExpandHolder", { attrs: { nodeProps: e.nodeProps, expandButtonClass: e.expandButtonClass, expandOrCollapseNode: e.expandOrCollapseNode, expandHolderPosition: e.nodeProps.expandHolderPosition || e.options.defaultExpandHolderPosition, color: e.options.defaultExpandHolderColor || e.nodeProps.color || e.options.defaultNodeColor } })] : e._t("node-expand-holder", function() {
    return [t("RGNodeExpandHolder", { attrs: { nodeProps: e.nodeProps, expandButtonClass: e.expandButtonClass, expandOrCollapseNode: e.expandOrCollapseNode, expandHolderPosition: e.nodeProps.expandHolderPosition || e.options.defaultExpandHolderPosition, color: e.options.defaultExpandHolderColor || e.nodeProps.color || e.options.defaultNodeColor } })];
  }, { nodeProps: e.nodeProps, expandButtonClass: e.expandButtonClass, expandOrCollapseNode: e.expandOrCollapseNode, expandHolderPosition: e.nodeProps.expandHolderPosition || e.options.defaultExpandHolderPosition, color: e.options.defaultExpandHolderColor || e.nodeProps.color || e.options.defaultNodeColor })] : e._e(), e.nodeProps.html ? t("div", { domProps: { innerHTML: e._s(e.nodeProps.html) }, on: { click: function(o) {
    return e.onclick(o);
  }, mousedown: function(o) {
    return !o.type.indexOf("key") && e._k(o.keyCode, "left", 37, o.key, ["Left", "ArrowLeft"]) || "button" in o && o.button !== 0 ? null : (o.stopPropagation(), e.onDragStart(o));
  }, touchstart: function(o) {
    return o.stopPropagation(), e.onDragStart(o);
  } } }) : t("div", { staticClass: "rel-node", class: ["rel-node-shape-" + (e.nodeProps.nodeShape === void 0 ? e.options.defaultNodeShape : e.nodeProps.nodeShape), "rel-node-type-" + e.nodeProps.type, e.nodeProps.id === e.options.checkedNodeId ? "rel-node-checked" : "", e.nodeProps.flashing ? "rel-node-flashing" : "", e.nodeProps.styleClass, e.nodeProps.innerHTML ? "rel-diy-node" : ""], style: { "background-color": e.nodeProps.color === void 0 ? e.options.defaultNodeColor : e.nodeProps.color, color: e.nodeProps.fontColor === void 0 ? e.options.defaultNodeFontColor : e.nodeProps.fontColor, border: e.borderStyle, width: e.nodeWidth, height: e.nodeHeight }, on: { click: function(o) {
    return e.onclick(o);
  }, mousedown: function(o) {
    return !o.type.indexOf("key") && e._k(o.keyCode, "left", 37, o.key, ["Left", "ArrowLeft"]) || "button" in o && o.button !== 0 ? null : (o.stopPropagation(), e.onDragStart(o));
  }, touchstart: function(o) {
    return o.stopPropagation(), e.onDragStart(o);
  } } }, [e.options.hideNodeContentByZoom === !0 && e.options.canvasZoom < 40 ? e._e() : [e.options.oldVueVersion && !e.options.ovUseNodeSlot ? [e.nodeProps.innerHTML ? t("div", { domProps: { innerHTML: e._s(e.nodeProps.innerHTML) } }) : t("div", { staticClass: "c-node-text", style: { color: e.nodeProps.fontColor || e.options.defaultNodeFontColor } }, [t("span", { domProps: { innerHTML: e._s(e.nodeProps.text) } })])] : e._t("node", function() {
    return [e.nodeProps.innerHTML ? t("div", { domProps: { innerHTML: e._s(e.nodeProps.innerHTML) } }) : t("div", { staticClass: "c-node-text", style: { color: e.nodeProps.fontColor || e.options.defaultNodeFontColor } }, [t("span", { domProps: { innerHTML: e._s(e.nodeProps.text) } })])];
  }, { node: e.nodeProps })]], 2)], 2);
}, qe = [];
const Pt = {};
var Ke = /* @__PURE__ */ R(
  Ze,
  Je,
  qe,
  !1,
  Qe,
  "55522032",
  null,
  null
);
function Qe(e) {
  for (let i in Pt)
    this[i] = Pt[i];
}
const xt = /* @__PURE__ */ function() {
  return Ke.exports;
}(), to = {
  name: "SeeksRGLine",
  props: {
    link: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    },
    relation: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    },
    relationIndex: {
      mustUseProp: !0,
      default: () => 0,
      type: Number
    }
  },
  data() {
    return {
      is_flashing: !1
    };
  },
  inject: ["graph", "graphInstance"],
  computed: {
    checked() {
      return this.relation.id === this.options.checkedLineId;
    },
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    },
    showStartArrow() {
      return this.relationGraph.getArrow(this.relation, this.link, !0);
    },
    showEndArrow() {
      return this.relationGraph.getArrow(this.relation, this.link, !1);
    },
    pathData() {
      try {
        const { path: e, textPosition: i } = this.relationGraph.createLinePath(
          this.link,
          this.relation,
          this.relationIndex
        );
        let t = {};
        try {
          t = this.relationGraph.getTextTransform(
            this.relation,
            i.x,
            i.y,
            i.rotate
          );
        } catch (o) {
          d(o);
        }
        return {
          path: e,
          textTransform: t
        };
      } catch (e) {
        d(e);
      }
      return { path: null, textTransform: null };
    },
    textStyle() {
      return this.relationGraph.getLineTextStyle(this.link, this.relation, this.relationIndex);
    }
  },
  watch: {},
  methods: {
    onClick(e, i) {
      this.relationGraph.onLineClick(e, this.link, i);
    }
  }
};
var eo = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("g", { class: [e.relation.className] }, [t("path", { staticClass: "c-rg-line", class: [
    e.relation.styleClass,
    e.relation.dashType ? "rg-line-dashtype-" + e.relation.dashType : void 0,
    e.relation.animation ? "rg-line-anm-" + e.relation.animation : void 0,
    e.checked ? "c-rg-line-checked" : void 0
  ], style: {
    opacity: e.relation.opacity,
    "pointer-events": e.relation.disableDefaultClickEffect && "none",
    "stroke-width": (e.relation.lineWidth ? e.relation.lineWidth : e.options.defaultLineWidth) + "px"
  }, attrs: { d: e.pathData.path, stroke: e.relation.color ? e.relation.color : e.options.defaultLineColor, "marker-start": e.showStartArrow, "marker-end": e.showEndArrow, fill: e.relation.lineShape === 8 ? e.relation.color || e.options.defaultLineColor : "none" }, on: { touchstart: function(o) {
    return e.onClick(e.relation, o);
  }, click: function(o) {
    return e.onClick(e.relation, o);
  } } }), e.textStyle && e.options.defaultShowLineLabel && e.options.canvasZoom > 40 ? t("g", { attrs: { transform: e.pathData.textTransform } }, [t("text", { key: "t-" + e.relation.seeks_id, staticClass: "c-rg-line-text", class: { "c-rg-line-text-checked": e.checked }, style: {
    opacity: e.relation.opacity,
    fill: e.relation.fontColor ? e.relation.fontColor : e.options.defaultLineFontColor ? e.options.defaultLineFontColor : e.relation.color ? e.relation.color : e.options.defaultLineColor
  }, attrs: { x: e.relation.textOffset_x || e.options.defaultLineTextOffset_x || 0, y: e.relation.textOffset_y || e.options.defaultLineTextOffset_y || 10, "text-anchor": e.textStyle.textAnchor }, on: { touchstart: function(o) {
    return e.onClick(e.relation, o);
  }, click: function(o) {
    return e.onClick(e.relation, o);
  } } }, [e._v(" " + e._s(e.textStyle.text) + " ")])]) : e._e()]);
}, oo = [];
const Nt = {};
var no = /* @__PURE__ */ R(
  to,
  eo,
  oo,
  !1,
  io,
  "15443506",
  null,
  null
);
function io(e) {
  for (let i in Nt)
    this[i] = Nt[i];
}
const te = /* @__PURE__ */ function() {
  return no.exports;
}(), so = {
  name: "SeeksRGLine",
  props: {
    link: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    },
    relation: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    },
    relationIndex: {
      mustUseProp: !0,
      default: () => 0,
      type: Number
    }
  },
  inject: ["graph", "graphInstance"],
  computed: {
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    },
    checked() {
      return this.relation.id === this.options.checkedLineId;
    },
    textStyle() {
      return this.relationGraph.getLineTextStyle(this.link, this.relation, this.relationIndex);
    },
    pathRef() {
      return "#" + this.options.instanceId + "-" + this.link.seeks_id + "-" + this.relationIndex;
    }
  },
  data() {
    return {
      is_flashing: !1
    };
  },
  watch: {},
  mounted() {
  },
  methods: {
    onClick(e, i) {
      this.relationGraph.onLineClick(e, this.link, i);
    }
  }
};
var ao = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("g", { class: [e.relation.className] }, [t("use", { staticClass: "c-rg-line", class: [
    e.relation.styleClass,
    e.relation.dashType ? "rg-line-dashtype-" + e.relation.dashType : void 0,
    e.relation.animation ? "rg-line-anm-" + e.relation.animation : void 0,
    e.checked ? "c-rg-line-checked" : void 0
  ], attrs: { "xlink:href": e.pathRef }, on: { touchstart: function(o) {
    return e.onClick(e.relation, o);
  }, click: function(o) {
    return e.onClick(e.relation, o);
  } } }), e.textStyle && e.options.defaultShowLineLabel && e.options.canvasZoom > 40 ? t("g", { attrs: { transform: e.textStyle.textOffset } }, [t("text", { staticClass: "c-rg-line-text", class: { "c-rg-line-text-checked": e.checked }, style: {
    opacity: e.relation.opacity,
    fill: e.relation.fontColor ? e.relation.fontColor : e.options.defaultLineFontColor ? e.options.defaultLineFontColor : e.relation.color ? e.relation.color : e.options.defaultLineColor
  }, attrs: { rotate: e.textStyle.textRotate }, on: { touchstart: function(o) {
    return e.onClick(e.relation, o);
  }, click: function(o) {
    return e.onClick(e.relation, o);
  } } }, [t("textPath", { attrs: { "xlink:href": e.pathRef, startOffset: e.textStyle.textHPosition, "text-anchor": e.textStyle.textAnchor, method: "align", spacing: "auto" } }, [e._v(" " + e._s(e.textStyle.text) + " ")])])]) : e._e()]);
}, ro = [];
const zt = {};
var lo = /* @__PURE__ */ R(
  so,
  ao,
  ro,
  !1,
  co,
  "b3ca394e",
  null,
  null
);
function co(e) {
  for (let i in zt)
    this[i] = zt[i];
}
const ho = /* @__PURE__ */ function() {
  return lo.exports;
}(), fo = {
  name: "SeeksRGLink",
  components: { RGLineSmart: te, RGLineTextByPath: ho },
  props: {
    linkProps: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    }
  },
  data() {
    return {
      is_flashing: !1
    };
  },
  inject: ["graph", "graphInstance"],
  computed: {
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    }
  },
  show() {
    this.isShow = !0;
  },
  watch: {},
  mounted() {
  },
  methods: {
    isAllowShowNode(e) {
      return m.isAllowShowNode(e);
    }
  }
};
var uo = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return e.isAllowShowNode(e.linkProps.fromNode) && e.isAllowShowNode(e.linkProps.toNode) ? t("g", { ref: "seeksRGLink", staticClass: "rel-link-peel", class: [e.options.checkedLinkId == e.linkProps.seeks_id ? "c-rg-link-checked" : ""], attrs: { transform: "translate(0,0)", "data-id": e.linkProps.seeks_id } }, [e._l(e.linkProps.relations, function(o, n) {
    return [e.options.oldVueVersion && !e.options.ovUseLineSlot ? [(o.useTextPath !== void 0 ? o.useTextPath : e.options.lineUseTextPath) && o.isHide !== !0 ? t("RGLineTextByPath", { key: "l-" + o.id, attrs: { link: e.linkProps, relation: o, "relation-index": n } }) : o.isHide === !1 ? t("RGLineSmart", { key: "l-" + o.id, attrs: { link: e.linkProps, relation: o, "relation-index": n } }) : e._e()] : e._t("line", function() {
      return [(o.useTextPath !== void 0 ? o.useTextPath : e.options.lineUseTextPath) && o.isHide !== !0 ? t("RGLineTextByPath", { key: "l-" + o.id, attrs: { link: e.linkProps, relation: o, "relation-index": n } }) : o.isHide === !1 ? t("RGLineSmart", { key: "l-" + o.id, attrs: { link: e.linkProps, relation: o, "relation-index": n } }) : e._e()];
    }, { line: o, relationIndex: n })];
  })], 2) : e._e();
}, po = [];
const $t = {};
var go = /* @__PURE__ */ R(
  fo,
  uo,
  po,
  !1,
  yo,
  "2e6f2206",
  null,
  null
);
function yo(e) {
  for (let i in $t)
    this[i] = $t[i];
}
const ee = /* @__PURE__ */ function() {
  return go.exports;
}(), mo = {
  name: "SeeksRGLink",
  props: {
    link: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    },
    relation: {
      mustUseProp: !0,
      default: () => ({}),
      type: Object
    },
    relationIndex: {
      mustUseProp: !0,
      default: () => 0,
      type: Number
    }
  },
  inject: ["graph", "graphInstance"],
  computed: {
    checked() {
      return this.relation.id === this.options.checkedLineId;
    },
    pathData() {
      const { path: e, textPosition: i } = this.relationGraph.createLinePath(
        this.link,
        this.relation,
        this.relationIndex
      );
      return e;
    },
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    }
  },
  data() {
    return {
      is_flashing: !1
    };
  },
  show() {
    this.isShow = !0;
  },
  methods: {}
};
var _o = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("path", { class: ["c-rg-line-path", e.relation.styleClass, e.checked ? "c-rg-line-checked" : ""], style: { opacity: e.relation.opacity, "stroke-width": (e.relation.lineWidth ? e.relation.lineWidth : e.options.defaultLineWidth) + "px" }, attrs: { id: e.options.instanceId + "-" + e.link.seeks_id + "-" + e.relationIndex, d: e.pathData, stroke: e.relation.color ? e.relation.color : e.options.defaultLineColor, "marker-start": e.relationGraph.getArrow(e.relation, e.link, !0), "marker-end": e.relationGraph.getArrow(e.relation, e.link, !1), fill: e.relation.lineShape === 8 ? e.relation.color || e.options.defaultLineColor : "none" } });
}, vo = [];
const Dt = {};
var xo = /* @__PURE__ */ R(
  mo,
  _o,
  vo,
  !1,
  wo,
  null,
  null,
  null
);
function wo(e) {
  for (let i in Dt)
    this[i] = Dt[i];
}
const oe = /* @__PURE__ */ function() {
  return xo.exports;
}(), Co = {
  name: "RGCheckedLine",
  inject: ["graph", "graphInstance"],
  computed: {
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    },
    pathData() {
      return this.relationGraph.createCheckedLinePath();
    },
    strokeWidth() {
      return this.relationGraph.createCheckedLineStrokeWidth();
    }
  },
  data() {
    return {
      is_flashing: !1
    };
  },
  show() {
    this.isShow = !0;
  },
  watch: {}
};
var bo = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("g", [e.pathData ? t("path", { staticClass: "c-rg-line-checked-bg", attrs: { d: e.pathData, fill: "none", stroke: "red", "stroke-width": e.strokeWidth } }) : e._e()]);
}, Lo = [];
const Gt = {};
var ko = /* @__PURE__ */ R(
  Co,
  bo,
  Lo,
  !1,
  So,
  "2e2776fc",
  null,
  null
);
function So(e) {
  for (let i in Gt)
    this[i] = Gt[i];
}
const Mo = /* @__PURE__ */ function() {
  return ko.exports;
}(), Oo = {
  name: "RelationGraphSingleGraph",
  components: { RGLineChecked: Mo, SeeksRGNode: xt, SeeksRGLink: ee, SeeksRGLinePath: oe, RGLineSmart: te },
  data() {
    return {};
  },
  inject: ["graphData", "graph", "graphInstance"],
  computed: {
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    },
    allLineColors() {
      return this.graph.allLineColors;
    }
  },
  created() {
    d("[RGGraph created]");
  },
  mounted() {
    d("[RGGraph mounted]"), this.init();
  },
  beforeDestroy() {
  },
  methods: {
    init() {
      this.$refs.rgCanvas.style.setProperty("--stroke", `url('#${this.options.instanceId}-lineStyle')`), this.$refs.rgCanvas.style.setProperty("--markerEnd", `url('#${this.options.instanceId}-start-arrow-default')`), this.$refs.rgCanvas.style.setProperty("--markerStart", `url('#${this.options.instanceId}-arrow-default')`), this.$refs.rgCanvas.style.setProperty("--markerEndChecked", `url('#${this.options.instanceId}-arrow-checked')`), this.$refs.rgCanvas.style.setProperty("--markerStartChecked", `url('#${this.options.instanceId}-start-arrow-checked')`);
    }
  }
};
var Eo = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { staticClass: "rel-single-graph", staticStyle: { overflow: "visible" } }, [t("div", { ref: "rgCanvas", staticClass: "rel-linediv" }, [t("svg", { staticClass: "rel-lines-svg", style: { width: e.options.canvasSize.width + "px", height: e.options.canvasSize.height + "px" }, attrs: { xmlns: "http://www.w3.org/2000/svg" } }, [t("defs", [t("linearGradient", { attrs: { id: "my-lineStyle", gradientUnits: "objectBoundingBox", cx: "0.5", cy: "0.5" } }, [t("stop", { attrs: { offset: "0%", "stop-color": "#e52c5c", "stop-opacity": "1" } }), t("stop", { attrs: { offset: "100%", "stop-color": "#FD8B37", "stop-opacity": "0" } })], 1), t("marker", { attrs: { id: e.options.instanceId + "-arrow-default", markerWidth: e.options.defaultLineMarker.markerWidth, markerHeight: e.options.defaultLineMarker.markerHeight, refX: e.options.defaultLineMarker.refX, refY: e.options.defaultLineMarker.refY, markerUnits: "userSpaceOnUse", orient: "auto", viewBox: "0 0 12 12" } }, [t("path", { style: { fill: e.options.defaultLineColor }, attrs: { d: e.options.defaultLineMarker.data } })]), t("marker", { attrs: { id: e.options.instanceId + "-start-arrow-default", markerWidth: e.options.defaultLineMarker.markerWidth, markerHeight: e.options.defaultLineMarker.markerHeight, refX: e.options.defaultLineMarker.refX, refY: e.options.defaultLineMarker.refY, markerUnits: "userSpaceOnUse", orient: "auto", viewBox: "0 0 12 12" } }, [t("path", { style: { fill: e.options.defaultLineColor }, attrs: { d: e.options.defaultLineMarker.data, transform: "translate(12,12)rotate(180)" } })]), t("marker", { attrs: { id: e.options.instanceId + "-arrow-checked", markerWidth: e.options.defaultLineMarker.markerWidth, markerHeight: e.options.defaultLineMarker.markerHeight, refX: e.options.defaultLineMarker.refX, refY: e.options.defaultLineMarker.refY, markerUnits: "userSpaceOnUse", orient: "auto", viewBox: "0 0 12 12" } }, [t("path", { style: { fill: e.options.checkedLineColor }, attrs: { d: e.options.defaultLineMarker.data } })]), t("marker", { attrs: { id: e.options.instanceId + "-start-arrow-checked", markerWidth: e.options.defaultLineMarker.markerWidth, markerHeight: e.options.defaultLineMarker.markerHeight, refX: e.options.defaultLineMarker.refX, refY: e.options.defaultLineMarker.refY, markerUnits: "userSpaceOnUse", orient: "auto", viewBox: "0 0 12 12" } }, [t("path", { style: { fill: e.options.checkedLineColor }, attrs: { d: e.options.defaultLineMarker.data, transform: "translate(12,12)rotate(180)" } })]), e._l(e.allLineColors, function(o) {
    return t("marker", { key: o.id, attrs: { id: e.options.instanceId + "-arrow-" + o.id, markerWidth: e.options.defaultLineMarker.markerWidth, markerHeight: e.options.defaultLineMarker.markerHeight, refX: e.options.defaultLineMarker.refX, refY: e.options.defaultLineMarker.refY, markerUnits: "userSpaceOnUse", orient: "auto", viewBox: "0 0 12 12" } }, [t("path", { attrs: { fill: e.options.defaultLineMarker.color || o.color, d: e.options.defaultLineMarker.data } })]);
  }), e._l(e.allLineColors, function(o) {
    return t("marker", { key: "start-" + o.id, attrs: { id: e.options.instanceId + "-start-arrow-" + o.id, markerWidth: e.options.defaultLineMarker.markerWidth, markerHeight: e.options.defaultLineMarker.markerHeight, refX: e.options.defaultLineMarker.refX, refY: e.options.defaultLineMarker.refY, markerUnits: "userSpaceOnUse", orient: "auto", viewBox: "0 0 12 12" } }, [t("path", { attrs: { fill: e.options.defaultLineMarker.color || o.color, d: e.options.defaultLineMarker.data, transform: "translate(12,12)rotate(180)" } })]);
  }), e._l(e.graphData.links, function(o) {
    return !e.options.showEasyView && !o.invisiable ? [e._l(o.relations, function(n, s) {
      return [e.options.lineUseTextPath || n.useTextPath ? t("SeeksRGLinePath", { key: n.id, attrs: { link: o, relation: n, "relation-index": s } }) : e._e()];
    })] : e._e();
  })], 2), e.options.showEasyView ? e._e() : t("RGLineChecked"), e._l(e.graphData.links, function(o) {
    return !e.options.showEasyView && !o.invisiable ? t("SeeksRGLink", { key: o.seeks_id, attrs: { "link-props": o }, scopedSlots: e._u([{ key: "line", fn: function(n) {
      var s = n.line, a = n.lineIndex;
      return [e._t("line", null, { line: s, link: o, lineIndex: a })];
    } }], null, !0) }) : e._e();
  })], 2)]), t("div", { staticClass: "rel-nodediv rel-nodediv-for-webkit" }, e._l(e.graphData.nodes, function(o) {
    return !e.options.showEasyView && !o.invisiable ? t("SeeksRGNode", { key: o.seeks_id, attrs: { "node-props": o }, scopedSlots: e._u([{ key: "node", fn: function(n) {
      var s = n.node;
      return [e._t("node", null, { node: s })];
    } }, { key: "node-expand-holder", fn: function(n) {
      var s = n.nodeProps, a = n.expandHolderPosition, l = n.expandButtonClass, r = n.color, c = n.expandOrCollapseNode;
      return [e._t("node-expand-holder", null, { nodeProps: s, expandHolderPosition: a, expandButtonClass: l, color: r, expandOrCollapseNode: c })];
    } }], null, !0) }) : e._e();
  }), 1), t("div", { staticClass: "rel-linediv rel-linediv-el-lines" }, [t("svg", { staticClass: "rel-lines-svg rel-lines-svg-el-lines", attrs: { xmlns: "http://www.w3.org/2000/svg" } }, [e._l(e.graphData.elementLines, function(o) {
    return [o.relations[0].isHide === !1 ? t("RGLineSmart", { key: "ell-" + o.relations[0].id, attrs: { link: o, relation: o.relations[0], "relation-index": 0 } }) : e._e()];
  }), e.options.creatingLinePlot && e.options.newLinkTemplate.fromNode ? t("RGLineSmart", { key: "s-line-template", attrs: { link: e.options.newLinkTemplate, relation: e.options.newLineTemplate, "relation-index": 0 } }) : e._e()], 2)])]);
}, Po = [];
const At = {};
var No = /* @__PURE__ */ R(
  Oo,
  Eo,
  Po,
  !1,
  zo,
  null,
  null,
  null
);
function zo(e) {
  for (let i in At)
    this[i] = At[i];
}
const $o = /* @__PURE__ */ function() {
  return No.exports;
}(), Do = {
  name: "RGEasyView",
  components: {},
  data() {
    return {};
  },
  inject: ["graphData", "graph", "graphInstance"],
  computed: {
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    },
    allLineColors() {
      return this.graph.allLineColors;
    }
  },
  created() {
    d("[RGEasyView created]");
  },
  mounted() {
    d("[RGEasyView mounted]"), this.relationGraph.setEasyViewCanvas && this.relationGraph.setEasyViewCanvas(this.$refs.rgEasyCanvas), this.init();
  },
  beforeDestroy() {
  },
  methods: {
    init() {
    }
  }
};
var Go = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { staticClass: "rel-easy-view", class: { "rel-easy-view-active": e.options.showEasyView } }, [t("canvas", { ref: "rgEasyCanvas", staticStyle: { width: "100%", height: "100%" } })]);
}, Ao = [];
const Bt = {};
var Bo = /* @__PURE__ */ R(
  Do,
  Go,
  Ao,
  !1,
  To,
  null,
  null,
  null
);
function To(e) {
  for (let i in Bt)
    this[i] = Bt[i];
}
const Io = /* @__PURE__ */ function() {
  return Bo.exports;
}(), Ro = {
  name: "RelationGraphCanvas",
  components: { RGEasyView: Io, RelationGraphSingleGraph: $o, SeeksRGNode: xt, SeeksRGLink: ee, SeeksRGLinePath: oe },
  data() {
    return {};
  },
  inject: ["graph", "graphInstance"],
  computed: {
    options() {
      return this.graph.options;
    },
    relationGraph() {
      return this.graphInstance();
    },
    canvasSizeAndPosition() {
      return {
        width: `${this.options.canvasSize.width}px`,
        height: `${this.options.canvasSize.height}px`,
        "margin-left": `${this.options.canvasOffset.x}px`,
        "margin-top": `${this.options.canvasOffset.y}px`,
        "background-color": "transparent",
        transform: `scale(${this.options.canvasZoom / 100},${this.options.canvasZoom / 100})`
      };
    }
  },
  watch: {},
  created() {
    d("[RGCanvas created]");
  },
  mounted() {
    d("[RGCanvas mounted]"), this.relationGraph.setCanvasDom(this.$refs.seeksRGCanvas);
  },
  beforeDestroy() {
  },
  methods: {
    mouseListener(e) {
      this.relationGraph.onMouseWheel(e);
    },
    onDragStart(e) {
      this.relationGraph.onCanvasDragStart(e);
    },
    contextmenu(e) {
      this.relationGraph.onContextmenu(e);
    }
  }
};
var Vo = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { staticClass: "rel-map", class: [e.options.canvasOpacity === 1 && "rel-map-ready", e.options.layoutClassName, e.options.backgroundImageNoRepeat ? "rel-map-background-norepeat" : void 0], style: { width: "100%", height: "100%", "background-color": e.options.backgroundColor || void 0, "background-image": e.options.backgroundImage ? "url(" + e.options.backgroundImage + ")" : void 0 }, on: { contextmenu: function(o) {
    return o.preventDefault(), e.contextmenu(o);
  }, mousedown: function(o) {
    return !o.type.indexOf("key") && e._k(o.keyCode, "left", 37, o.key, ["Left", "ArrowLeft"]) || "button" in o && o.button !== 0 ? null : e.onDragStart(o);
  }, touchstart: function(o) {
    return e.onDragStart(o);
  }, wheel: e.mouseListener } }, [t("RGEasyView"), t("div", { ref: "seeksRGCanvas", staticClass: "rel-map-canvas", style: e.canvasSizeAndPosition }, [t("div", { staticClass: "rel-canvas-slot rel-canvas-slot-behind" }, [e._t("canvas-plug")], 2), t("RelationGraphSingleGraph", { scopedSlots: e._u([{ key: "node", fn: function(o) {
    var n = o.node;
    return [e._t("node", null, { node: n })];
  } }, { key: "line", fn: function(o) {
    var n = o.line, s = o.link;
    return [e._t("line", null, { line: n, link: s })];
  } }, { key: "node-expand-holder", fn: function(o) {
    var n = o.nodeProps, s = o.expandHolderPosition, a = o.expandButtonClass, l = o.color, r = o.expandOrCollapseNode;
    return [e._t("node-expand-holder", null, { nodeProps: n, expandHolderPosition: s, expandButtonClass: a, color: l, expandOrCollapseNode: r })];
  } }], null, !0) }), t("div", { staticClass: "rel-canvas-slot rel-canvas-slot-above" }, [e._t("canvas-plug-above")], 2)], 1)], 1);
}, Fo = [];
const Tt = {};
var Ho = /* @__PURE__ */ R(
  Ro,
  Vo,
  Fo,
  !1,
  Wo,
  null,
  null,
  null
);
function Wo(e) {
  for (let i in Tt)
    this[i] = Tt[i];
}
const Uo = /* @__PURE__ */ function() {
  return Ho.exports;
}(), jo = {
  name: "GraphSettingPanel",
  data() {
    return {
      search_text: "",
      showSettingPanel: !1,
      currentLayoutName: ""
    };
  },
  inject: ["graph", "graphInstance"],
  computed: {
    relationGraph() {
      return this.graphInstance();
    },
    options() {
      return this.graph.options;
    }
  },
  methods: {
    toggleSettingPanel() {
      this.showSettingPanel = !this.showSettingPanel;
    },
    printOptions() {
      this.relationGraph.printOptions();
    },
    printData() {
      this.relationGraph.printData();
    },
    enableDevlog() {
      this.relationGraph.enableDebugLog(!this.options.debug), d("debugLog:", this.options.debug);
    }
  }
};
var Yo = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", [t("div", { staticClass: "c-setting-panel-button", class: [], on: { click: e.toggleSettingPanel } }, [e._v(" Debug ")]), e.showSettingPanel ? t("div", { staticClass: "c-setting-panel", class: [] }, [t("div", { staticClass: "c-debug-tools-row" }, [t("button", { on: { click: e.printOptions } }, [e._v("print options in console")])]), t("div", { staticClass: "c-debug-tools-row" }, [t("button", { on: { click: e.printData } }, [e._v("print json data in console")])]), t("div", { staticClass: "c-debug-tools-row" }, [e._v("debug log status: " + e._s(e.options.debug)), t("button", { on: { click: e.enableDevlog } }, [e._v(e._s(e.options.debug ? "disable" : "enable") + " debug log")])])]) : e._e()]);
}, Xo = [];
const It = {};
var Zo = /* @__PURE__ */ R(
  jo,
  Yo,
  Xo,
  !1,
  Jo,
  null,
  null,
  null
);
function Jo(e) {
  for (let i in It)
    this[i] = It[i];
}
const qo = /* @__PURE__ */ function() {
  return Zo.exports;
}(), Ko = {
  name: "GraphMiniView",
  data() {
    return {
      viewWidth: 100,
      viewHeight: 0,
      minX: 0,
      maxX: 0,
      minY: 0,
      maxY: 0,
      zoom: 1
    };
  },
  inject: ["graph", "graphData", "graphInstance"],
  computed: {
    relationGraph() {
      return this.graphInstance();
    },
    options() {
      return this.graph.options;
    }
  },
  mounted() {
  },
  methods: {
    miniViewHeight() {
      let e = 9999, i = -9999, t = 9999, o = -9999;
      for (let n = 0; n < this.graphData.nodes.length; n++) {
        const s = this.graphData.nodes[n];
        s.x < e && (e = s.x), s.x > i && (i = s.x), s.y < t && (t = s.y), s.y > o && (o = s.y);
      }
      return this.viewHeight = (o - t) * this.viewWidth / (i - e), this.minX = e, this.minY = t, this.maxX = i, this.maxY = o, this.viewHeight;
    },
    getPositionData() {
      const e = this.viewWidth / this.options.canvasNVInfo.width, i = this.options.viewNVInfo.width * e, t = this.options.viewNVInfo.height * e;
      let o = (this.options.viewNVInfo.x - this.options.canvasNVInfo.x) * e * (this.options.canvasZoom / 100), n = (this.options.viewNVInfo.y - this.options.canvasNVInfo.y) * e * (this.options.canvasZoom / 100);
      return o = o * 100 / i, n = n * 100 / i, {
        width: i + "px",
        height: t + "px",
        left: o + "px",
        top: n + "px"
      };
    },
    isAllowShowNode(e) {
      return m.isAllowShowNode(e);
    }
  }
};
var Qo = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { ref: "miniView", staticClass: "c-mini-graph" }, [t("div", { staticClass: "c-mini-canvas", style: {
    width: e.viewWidth + "px",
    height: e.miniViewHeight() + "px"
  } }, [e._l(e.graphData.nodes, function(o) {
    return [e.isAllowShowNode(o) ? t("div", { key: o.id, staticClass: "c-mini-node", style: {
      left: (o.x - e.minX) * e.viewWidth / (e.maxX - e.minX) + "px",
      top: (o.y - e.minY) * e.viewHeight / (e.maxY - e.minY) + "px"
    } }) : e._e()];
  })], 2)]);
}, tn = [];
const Rt = {};
var en = /* @__PURE__ */ R(
  Ko,
  Qo,
  tn,
  !1,
  on,
  "2027a1ff",
  null,
  null
);
function on(e) {
  for (let i in Rt)
    this[i] = Rt[i];
}
const nn = /* @__PURE__ */ function() {
  return en.exports;
}(), sn = {
  name: "GraphMiniToolBar",
  data() {
    return {
      height: 275,
      hits: 0,
      downloadPanelWidth: 106
    };
  },
  inject: ["graph", "graphInstance"],
  computed: {
    relationGraph() {
      return this.graphInstance();
    },
    options() {
      return this.graph.options;
    }
  },
  mounted() {
    this.relationGraph.listeners.onDownloadExcel !== null && (this.downloadPanelWidth += 50), this.options.layouts.length > 1 && (this.height -= 40);
  },
  methods: {
    refresh() {
      this.relationGraph.refresh();
    },
    switchLayout(e) {
      d("change layout:", e), this.relationGraph.switchLayout(e);
    },
    toggleAutoLayout() {
      this.relationGraph.toggleAutoLayout();
    },
    onDownloadExcel() {
      this.relationGraph.listeners.onDownloadExcel();
    },
    zoomToFit() {
      return w(this, null, function* () {
        yield this.relationGraph.setZoom(100), yield this.relationGraph.moveToCenter(), yield this.relationGraph.zoomToFit();
      });
    }
  }
};
var an = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { staticClass: "c-mini-toolbar", style: { "margin-left": e.options.viewELSize.width - 50 + "px", "margin-top": (e.options.viewELSize.height - 260) / 2 + "px" } }, [t("div", { staticClass: "c-mb-button", staticStyle: { "margin-top": "0px" }, on: { click: function(o) {
    return e.relationGraph.fullscreen();
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-resize-" } })]), t("span", { staticClass: "c-mb-text" }, [e._v(e._s(e.options.fullscreen ? "\u9000\u51FA" : "\u5168\u5C4F"))])]), e.options.allowShowZoomMenu ? t("div", { staticClass: "c-mb-button", on: { click: function(o) {
    return e.relationGraph.zoom(20);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-fangda" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u653E\u5927")])]) : e._e(), e.options.allowShowZoomMenu ? t("div", { staticStyle: { float: "left", "margin-top": "0px", height: "20px", width: "40px", "border-top": "0px", "border-bottom": "0px", "background-color": "#efefef", color: "#262626", "font-size": "10px", "text-align": "center", "line-height": "20px" }, on: { dblclick: e.zoomToFit } }, [e._v(e._s(e.options.canvasZoom) + "%")]) : e._e(), e.options.allowShowZoomMenu ? t("div", { staticClass: "c-mb-button", staticStyle: { "margin-top": "0px" }, on: { click: function(o) {
    return e.relationGraph.zoom(-20);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-suoxiao" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u7F29\u5C0F")])]) : e._e(), e.options.layouts.length > 1 ? t("div", { staticClass: "c-mb-button" }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-yuanquanfenxiang" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u5E03\u5C40")]), t("div", { staticClass: "c-mb-child-panel", style: { width: e.options.layouts.length * 70 + 6 + "px", "margin-left": e.options.layouts.length * -70 - 5 + "px" } }, e._l(e.options.layouts, function(o) {
    return t("div", { key: o.label, staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.layoutLabel === o.label }, staticStyle: { width: "70px" }, on: { click: function(n) {
      return e.switchLayout(o);
    } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-yuanquanfenxiang" } })]), t("span", { staticClass: "c-mb-text" }, [e._v(e._s(o.label))])]);
  }), 0)]) : e._e(), e.options.allowSwitchLineShape ? t("div", { staticClass: "c-mb-button" }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-hj2" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u7EBF\u6761")]), t("div", { staticClass: "c-mb-child-panel", staticStyle: { width: "256px", "margin-left": "-255px" } }, [t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultLineShape === 1 }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultLineShape(1);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-hj2" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u76F4\u7EBF")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultLineShape === 2 }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultLineShape(2);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjieliu" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u7B80\u6D01")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultLineShape === 6 }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultLineShape(6);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjieliu" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u751F\u52A8")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultLineShape === 5 }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultLineShape(5);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjieliu" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u9C7C\u5C3E")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultLineShape === 4 }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultLineShape(4);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-hj2" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u6298\u7EBF")])])])]) : e._e(), e.options.allowSwitchJunctionPoint ? t("div", { staticClass: "c-mb-button" }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjie_connecting5" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u8FDE\u63A5\u70B9")]), t("div", { staticClass: "c-mb-child-panel", staticStyle: { width: "206px", "margin-left": "-205px" } }, [t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultJunctionPoint === "border" }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultJunctionPoint("border");
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjie_connecting5" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u8FB9\u7F18")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultJunctionPoint === "ltrb" }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultJunctionPoint("ltrb");
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjie_connecting5" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u56DB\u70B9")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultJunctionPoint === "tb" }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultJunctionPoint("tb");
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjie_connecting5" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u4E0A\u4E0B")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", class: { "c-mb-button-on": e.options.defaultJunctionPoint === "lr" }, staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.setDefaultJunctionPoint("lr");
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjie_connecting5" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u5DE6\u53F3")])])])]) : e._e(), e.options.allowAutoLayoutIfSupport && e.options.isNeedShowAutoLayoutButton ? t("div", { staticClass: "c-mb-button", class: { "c-mb-button-on": e.options.autoLayouting }, attrs: { title: e.options.autoLayouting ? "\u70B9\u51FB\u505C\u6B62\u81EA\u52A8\u5E03\u5C40" : "\u70B9\u51FB\u5F00\u59CB\u81EA\u52A8\u8C03\u6574\u5E03\u5C40" }, on: { click: e.toggleAutoLayout } }, [e.options.autoLayouting ? t("svg", { staticClass: "c-loading-icon rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjiezhong" } })]) : t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-zidong" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u81EA\u52A8")])]) : e._e(), e.options.allowShowRefreshButton ? t("div", { staticClass: "c-mb-button", on: { click: e.refresh } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-ico_reset" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u5237\u65B0")])]) : e._e(), e.options.allowShowDownloadButton ? t("div", { staticClass: "c-mb-button" }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-ziyuan" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("\u4E0B\u8F7D")]), t("div", { staticClass: "c-mb-child-panel", style: { width: e.downloadPanelWidth + "px", "margin-left": e.downloadPanelWidth * -1 + "px" } }, [t("div", { staticClass: "c-mb-button c-mb-button-c", staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.downloadAsImage("png");
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-tupian" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("PNG")])]), t("div", { staticClass: "c-mb-button c-mb-button-c", staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.relationGraph.downloadAsImage("jpg");
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-tupian" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("JPG")])]), e.relationGraph.listeners.onDownloadExcel ? t("div", { staticClass: "c-mb-button c-mb-button-c", staticStyle: { width: "50px" }, on: { click: function(o) {
    return e.onDownloadExcel();
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-ziyuan" } })]), t("span", { staticClass: "c-mb-text" }, [e._v("Excel")])]) : e._e()])]) : e._e()]);
}, rn = [];
const Vt = {};
var ln = /* @__PURE__ */ R(
  sn,
  an,
  rn,
  !1,
  cn,
  "d4dbbf7e",
  null,
  null
);
function cn(e) {
  for (let i in Vt)
    this[i] = Vt[i];
}
const hn = /* @__PURE__ */ function() {
  return ln.exports;
}(), dn = {
  name: "GraphMiniToolBar",
  data() {
    return {};
  },
  inject: ["graph", "graphInstance"],
  computed: {
    relationGraph() {
      return this.graphInstance();
    },
    options() {
      return this.graph.options;
    }
  },
  mounted() {
  },
  methods: {
    refresh() {
      this.relationGraph.refresh();
    },
    switchLayout(e) {
      d("change layout:", e), this.relationGraph.switchLayout(e);
    },
    toggleAutoLayout() {
      this.relationGraph.toggleAutoLayout();
    },
    downloadAsImage() {
      this.relationGraph.downloadAsImage("png");
    },
    zoomToFit() {
      return w(this, null, function* () {
        yield this.relationGraph.setZoom(100), yield this.relationGraph.moveToCenter(), yield this.relationGraph.zoomToFit();
      });
    }
  }
};
var fn = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { staticClass: "rel-toolbar", class: ["rel-toolbar-h-" + e.options.toolBarPositionH, "rel-toolbar-v-" + e.options.toolBarPositionV, "rel-toolbar-" + e.options.toolBarDirection] }, [e.options.allowShowFullscreenMenu ? t("div", { staticClass: "c-mb-button", staticStyle: { "margin-top": "0px" }, attrs: { title: "\u5168\u5C4F/\u9000\u51FA\u5168\u5C4F" }, on: { click: function(o) {
    return e.relationGraph.fullscreen();
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-resize-" } })])]) : e._e(), e.options.allowShowZoomMenu ? t("div", { staticClass: "c-mb-button", attrs: { title: "\u653E\u5927" }, on: { click: function(o) {
    return e.relationGraph.zoom(20);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-fangda" } })])]) : e._e(), e.options.allowShowZoomMenu ? t("div", { staticClass: "c-current-zoom", on: { dblclick: e.zoomToFit } }, [e._v(e._s(e.options.canvasZoom) + "%")]) : e._e(), e.options.allowShowZoomMenu ? t("div", { staticClass: "c-mb-button", staticStyle: { "margin-top": "0px" }, attrs: { title: "\u7F29\u5C0F" }, on: { click: function(o) {
    return e.relationGraph.zoom(-20);
  } } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-suoxiao" } })])]) : e._e(), e.options.allowAutoLayoutIfSupport && e.options.isNeedShowAutoLayoutButton ? t("div", { staticClass: "c-mb-button", class: { "c-mb-button-on": e.options.autoLayouting }, attrs: { title: e.options.autoLayouting ? "\u70B9\u51FB\u505C\u6B62\u81EA\u52A8\u5E03\u5C40" : "\u70B9\u51FB\u5F00\u59CB\u81EA\u52A8\u8C03\u6574\u5E03\u5C40" }, on: { click: e.toggleAutoLayout } }, [e.options.autoLayouting ? t("svg", { staticClass: "c-loading-icon rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjiezhong" } })]) : t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-zidong" } })])]) : e._e(), e.options.allowShowRefreshButton ? t("div", { staticClass: "c-mb-button", attrs: { title: "\u5237\u65B0" }, on: { click: e.refresh } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-ico_reset" } })])]) : e._e(), e.options.allowShowDownloadButton ? t("div", { staticClass: "c-mb-button", attrs: { title: "\u4E0B\u8F7D\u56FE\u7247" }, on: { click: e.downloadAsImage } }, [t("svg", { staticClass: "rg-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-tupian" } })])]) : e._e(), e._t("default"), t("div", { staticStyle: { clear: "both" } })], 2);
}, un = [];
const Ft = {};
var pn = /* @__PURE__ */ R(
  dn,
  fn,
  un,
  !1,
  gn,
  null,
  null,
  null
);
function gn(e) {
  for (let i in Ft)
    this[i] = Ft[i];
}
const ne = /* @__PURE__ */ function() {
  return pn.exports;
}(), yn = {
  name: "GraphOperateStuff",
  components: { SeeksRGNode: xt },
  inject: ["graph", "graphInstance"],
  computed: {
    relationGraph() {
      return this.graphInstance();
    },
    options() {
      return this.graph.options;
    }
  },
  mounted() {
  },
  methods: {}
};
var mn = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return e.options && (e.options.creatingNodePlot || e.options.creatingSelection) ? t("div", { staticClass: "rel-operate" }, [t("div", { staticStyle: { position: "relative" } }, [e.options.creatingNodePlot && e.options.showTemplateNode ? t("SeeksRGNode", { attrs: { "node-props": e.options.newNodeTemplate }, scopedSlots: e._u([{ key: "node", fn: function() {
    return [e._t("node-template", null, { node: e.options.newNodeTemplate })];
  }, proxy: !0 }], null, !0) }) : e._e(), e.options.creatingSelection ? t("div", { staticClass: "rel-selection", style: {
    left: e.options.selectionView.x + "px",
    top: e.options.selectionView.y + "px",
    width: e.options.selectionView.width + "px",
    height: e.options.selectionView.height + "px"
  } }) : e._e()], 1)]) : e._e();
}, _n = [];
const Ht = {};
var vn = /* @__PURE__ */ R(
  yn,
  mn,
  _n,
  !1,
  xn,
  "42bdf56a",
  null,
  null
);
function xn(e) {
  for (let i in Ht)
    this[i] = Ht[i];
}
const wn = /* @__PURE__ */ function() {
  return vn.exports;
}(), Wt = (e) => ({
  onNodeClick: e.onNodeClick,
  onNodeExpand: e.onNodeExpand,
  onNodeDragging: e.onNodeDragging,
  onNodeDragStart: e.onNodeDragStart,
  onNodeDragEnd: e.onNodeDragEnd,
  onNodeCollapse: e.onNodeCollapse,
  onLineClick: e.onLineClick,
  onImageDownload: e.onImageDownload,
  onCanvasDragEnd: e.onCanvasDragEnd,
  beforeChangeLayout: e.beforeChangeLayout,
  onContextmenu: e.onContextmenu,
  onCanvasClick: e.onCanvasClick,
  onCanvasSelectionEnd: e.onCanvasSelectionEnd,
  onImageSaveAsFile: e.onImageSaveAsFile,
  onZoomEnd: e.onZoomEnd
}), Cn = {
  name: "GraphLoading",
  data() {
    return {};
  },
  inject: ["graph", "graphInstance"],
  computed: {
    relationGraph() {
      return this.graphInstance();
    },
    options() {
      return this.graph.options;
    }
  },
  methods: {
    clickGraphMask(e) {
      this.relationGraph.clickGraphMask(e);
    }
  }
};
var bn = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { staticClass: "rel-graph-loading", class: { "rel-graph-loading-hide": !e.options.graphLoading }, on: { click: e.clickGraphMask } }, [e.options.graphLoadingText ? t("div", { staticClass: "rel-graph-loading-message" }, [t("svg", { staticClass: "c-graph-loading-icon", attrs: { "aria-hidden": "true" } }, [t("use", { attrs: { "xlink:href": "#icon-lianjiezhong" } })]), e._v(" " + e._s(e.options.graphLoadingText || "Loading...") + " ")]) : e._e()]);
}, Ln = [];
const Ut = {};
var kn = /* @__PURE__ */ R(
  Cn,
  bn,
  Ln,
  !1,
  Sn,
  null,
  null,
  null
);
function Sn(e) {
  for (let i in Ut)
    this[i] = Ut[i];
}
const Mn = /* @__PURE__ */ function() {
  return kn.exports;
}(), On = {
  name: "SeeksRelationGraph",
  components: { GraphLoading: Mn, GraphOperateStuff: wn, GraphMiniToolBar: hn, GraphToolBar: ne, GraphMiniView: nn, RGCanvas: Uo, GraphDebugPanel: qo },
  props: {
    options: {
      mustUseProp: !1,
      default: () => ({}),
      type: Object
    },
    relationGraphCore: {
      mustUseProp: !1,
      default: null,
      type: Function
    },
    onNodeClick: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onNodeExpand: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onNodeCollapse: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onLineClick: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onNodeDragStart: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onNodeDragEnd: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onNodeDragging: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onCanvasDragEnd: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    beforeChangeLayout: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onContextmenu: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onCanvasClick: {
      mustUseProp: !1,
      default: () => () => {
      },
      type: Function
    },
    onDownloadExcel: {
      mustUseProp: !1,
      default: null,
      type: Function
    },
    onImageDownload: {
      mustUseProp: !1,
      default: null,
      type: Function
    },
    onImageSaveAsFile: {
      mustUseProp: !1,
      default: null,
      type: Function
    },
    onCanvasSelectionEnd: {
      mustUseProp: !1,
      default: null,
      type: Function
    },
    onZoomEnd: {
      mustUseProp: !1,
      default: null,
      type: Function
    }
  },
  data() {
    return {
      graphInstanceOK: !1,
      graphData: {
        rootNode: null,
        nodes: [],
        links: [],
        elementLines: []
      },
      graph: {
        options: ct({}),
        allLineColors: []
      },
      oldVueVersion: !1
    };
  },
  provide() {
    return {
      graphData: this.graphData,
      graph: this.graph,
      graphInstance: this.getInstance
    };
  },
  created() {
    window && (window.relationGraphDebug = this.options.debug), d("---------------------------graph created---------------------------", this), console.log(
      `%c relation-graph %c Version v${Xt} %c More info: https://github.com/seeksdream/relation-graph %c`,
      "background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff",
      "background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff",
      "background:#fff ; padding: 1px; border-radius: 0 3px 3px 0;  color: #41b883",
      "background:transparent"
    );
    let e = !1;
    if (!K || !K.version || K.version.startsWith("3")) {
      console.error("\u5982\u679C\u60A8\u4F7F\u7528\u7684\u662Fvue3\u6216react\uFF0C\u4F60\u9700\u8981\u6CE8\u610Fimport\u65F6\u4F7F\u7528\u7684\u540D\u79F0\uFF1A"), console.error("vue2:import RelationGraph from 'relation-graph'"), console.error("vue3:import RelationGraph from 'relation-graph/vue3'"), console.error("react:import RelationGraph from 'relation-graph/react'");
      return;
    }
    K.version.slice(0, 4) === "2.5." && (e = !0), K.version.slice(0, 4) === "2.6." && Number.parseInt(K.version.split(".")[2]) <= 12 && (e = !0), e && (this.oldVueVersion = !0, console.error(`\u60A8\u7684Vue\u7248\u672C\uFF1A${K.version}\u6CE8\u610F\uFF1A\u5F53\u4F60\u4F7F\u7528\u7684vue\u7248\u672C\u7B49\u4E8E\u4F4E\u4E8E2.6.12\u65F6\uFF0C\u56FE\u8C31\u4F1A\u663E\u793A\u4E0D\u6B63\u5E38\uFF0C\u53C2\u8003\u8FD9\u4E2A\u8FDE\u63A5\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\uFF1Ahttps://github.com/seeksdream/relation-graph/issues/113`)), X || console.error("[relation-graph]Please introduce component screenfull, for example:https://cdnjs.cloudflare.com/ajax/libs/screenfull.js/5.1.0/screenfull.min.js"), Yt || console.error("[relation-graph]Please introduce component html2canvas, for example:https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js");
  },
  mounted() {
    d("---------------------------graph mounted---------------------------");
    const e = JSON.parse(JSON.stringify(this.options)), i = this.relationGraphCore ? new this.relationGraphCore(e, Wt(this)) : new Qt(e, Wt(this));
    i.options.oldVueVersion = this.oldVueVersion, this.relationGraph = i, i.setReactiveData(this.graphData, this.graph), i.setDom(this.$refs.seeksRelationGraph), i.ready(), i.id = Math.random(), this.graphInstanceOK = !0, X && X.on && X.on("change", this.onFullscreen);
  },
  beforeDestroy() {
    d("beforeDestroy:relation-graph"), this.getRelationGraph().options.instanceDestroyed = !0, X && X.off && X.off("change", this.onFullscreen);
  },
  updated() {
    d("---------------------------graph updated---------------------------");
  },
  methods: {
    getRelationGraph() {
      return this.relationGraph;
    },
    onFullscreen() {
      this.getRelationGraph().fullscreen(X.isFullscreen);
    },
    getInstance() {
      return this.getRelationGraph();
    },
    setOptions(e, i) {
      return w(this, null, function* () {
        yield this.getRelationGraph().setOptions(e), i && i(this.getRelationGraph());
      });
    },
    setJsonData(o, n, s) {
      return w(this, arguments, function* (e, i, t) {
        return arguments.length === 2 && typeof i == "function" && (t = i, i = !0), yield this.getRelationGraph().setJsonData(e, i), new Promise((a, l) => {
          this.$nextTick(() => w(this, null, function* () {
            yield this.getRelationGraph().refresh(!1), t && t(this.getRelationGraph()), a();
          }));
        });
      });
    },
    appendJsonData(o, n, s) {
      return w(this, arguments, function* (e, i, t) {
        arguments.length === 2 && typeof i == "function" && (t = i, i = !0), yield this.getRelationGraph().appendJsonData(e, i), t && t(this.getRelationGraph());
      });
    },
    setLayouter(e) {
      this.getRelationGraph().setLayouter(e);
    },
    onGraphResize() {
      this.getRelationGraph().refreshNVAnalysisInfo();
    },
    refresh() {
      return w(this, null, function* () {
        yield this.getRelationGraph().refresh();
      });
    },
    doLayout() {
      return w(this, null, function* () {
        yield this.getRelationGraph().doLayout();
      });
    },
    focusRootNode() {
      return w(this, null, function* () {
        yield this.getRelationGraph().focusRootNode();
      });
    },
    focusNodeById(e) {
      return w(this, null, function* () {
        return yield this.getRelationGraph().focusNodeById(e);
      });
    },
    getNodeById(e) {
      return this.getRelationGraph().getNodeById(e);
    },
    removeNodeById(e) {
      return this.getRelationGraph().removeNodeById(e);
    },
    getNodes() {
      return this.getRelationGraph().getNodes();
    },
    getLinks() {
      return this.getRelationGraph().getLinks();
    },
    getGraphJsonData() {
      return this.getRelationGraph().getGraphJsonData();
    },
    getGraphJsonOptions() {
      return this.getRelationGraph().getGraphJsonOptions();
    }
  }
};
var En = function() {
  var e = this, i = e.$createElement, t = e._self._c || i;
  return t("div", { ref: "seeksRelationGraph", staticClass: "relation-graph", style: { width: "100%", height: "100%" } }, [e.graphInstanceOK && e.graph.options ? [e.graph.options.showDebugPanel ? t("GraphDebugPanel") : e._e(), e.graph.options.allowShowMiniToolBar === !0 ? [e.graph.options.oldVueVersion && !e.graph.options.ovUseToolbarSlot ? t("GraphToolBar") : e._t("tool-bar", function() {
    return [e.graph.options.toolBarVersion === "v2" ? t("GraphToolBar") : t("GraphMiniToolBar")];
  })] : e._e(), e.graph.options.allowShowMiniView === !0 ? e._t("mini-view", function() {
    return [t("GraphMiniView")];
  }) : e._e(), e._t("graph-plug"), t("RGCanvas", { scopedSlots: e._u([{ key: "node", fn: function(o) {
    var n = o.node;
    return [e._t("node", null, { node: n })];
  } }, { key: "line", fn: function(o) {
    var n = o.line, s = o.link;
    return [e._t("line", null, { line: n, link: s })];
  } }, { key: "canvas-plug", fn: function() {
    return [e._t("canvas-plug")];
  }, proxy: !0 }, { key: "canvas-plug-above", fn: function() {
    return [e._t("default")];
  }, proxy: !0 }, { key: "node-expand-holder", fn: function(o) {
    var n = o.nodeProps, s = o.expandHolderPosition, a = o.expandButtonClass, l = o.color, r = o.expandOrCollapseNode;
    return [e._t("node-expand-holder", null, { nodeProps: n, expandHolderPosition: s, expandButtonClass: a, color: l, expandOrCollapseNode: r })];
  } }], null, !0) }), t("GraphOperateStuff", { scopedSlots: e._u([{ key: "node-template", fn: function(o) {
    var n = o.node;
    return [e._t("node-template", null, { node: n })];
  } }], null, !0) }), t("GraphLoading")] : e._e()], 2);
}, Pn = [];
const jt = {};
var Nn = /* @__PURE__ */ R(
  On,
  En,
  Pn,
  !1,
  zn,
  null,
  null,
  null
);
function zn(e) {
  for (let i in jt)
    this[i] = jt[i];
}
const ie = /* @__PURE__ */ function() {
  return Nn.exports;
}(), Tn = Qt, In = ne, Rn = {
  BaseLayouter: nt,
  BidirectionalTreeLayouter: Zt,
  CenterLayouter: Jt,
  CircleLayouter: qt,
  FixedLayouter: Kt,
  ForceLayouter: it
}, Vn = Oe, Fn = Ne, Hn = Ce, Wn = ve, Un = V, jn = be, Yn = Ie, se = (e, i) => {
  e.component("RelationGraph", ie);
};
typeof window != "undefined" && window.Vue && se(window.Vue);
const $n = ie, Xn = St(kt({}, $n), {
  version: Xt,
  install: se
});
export {
  In as GraphToolBar,
  Rn as Layout,
  Yn as RGEffectUtils,
  Un as RGGraphMath,
  Vn as RGLayouterUtils,
  Hn as RGLinkUtils,
  Wn as RGNodeUtils,
  jn as RGNodesAnalyticUtils,
  Fn as RGOptionsUtils,
  Tn as RelationGraphCore,
  Xn as default
};
