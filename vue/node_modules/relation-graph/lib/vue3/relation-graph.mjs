(function(){ try {var elementStyle = document.createElement('style'); elementStyle.appendChild(document.createTextNode("@charset \"UTF-8\";.relation-graph{box-sizing:border-box;position:relative}.relation-graph .rel-map svg.rg-icon{height:100%;width:100%}.relation-graph .rel-lines-svg{overflow:visible;width:10px;height:10px;position:absolute;left:0px;top:0px}.relation-graph .rel-linediv{overflow:visible;position:absolute;z-index:40;width:100%;top:0px;left:0px;--stroke: url(#lineStyle);--markerEnd: url(#arrow-default);--markerStart: url(#start-arrow-default);--markerEndChecked: url(#arrow-checked);--markerStartChecked: url(#start-arrow-checked)}.relation-graph .rel-linediv svg{overflow:visible}.relation-graph .rel-linediv-el-lines{z-index:60}.relation-graph .rel-lines-svg-el-lines{overflow:visible;width:10px;height:10px;position:absolute;left:0px;top:0px}.relation-graph .rel-map{background-color:#fff;overflow:hidden;cursor:default;user-select:none;opacity:.01;transition:none}.relation-graph .rel-map-ready{opacity:1;transition:opacity .5s ease}.relation-graph .rel-map-background-norepeat{background-repeat:no-repeat;background-position:right bottom}.relation-graph .rel-nodediv-for-webkit{position:absolute;width:100%;top:0px;left:0px;z-index:50}.relation-graph .rel-map-canvas{position:relative;top:0px;left:0px;border:0px;z-index:3;overflow:visible}.relation-graph .rel-canvas-slot{overflow:visible}.relation-graph .rel-canvas-slot-behind{z-index:30;overflow:visible;position:absolute;top:0px;left:0px}.relation-graph .rel-canvas-slot-above{z-index:70;overflow:visible;position:absolute;top:0px;left:0px}.relation-graph .rel-map ::v-deep img{-webkit-user-drag:none;-webkit-user-select:none}.relation-graph .c-rg-line-text{fill:#888;font-size:12px;paint-order:stroke}.relation-graph .c-rg-line-text-checked{stroke:#fd8b374d;stroke-width:2}.relation-graph .c-rg-line{fill-rule:nonzero;stroke-linecap:round}.relation-graph .rg-line-dashtype-1{stroke-dasharray:2,2,2;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-2{stroke-dasharray:5,5,5;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-3{stroke-dasharray:9,9,9;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-4{stroke-dasharray:5,5,15;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}@keyframes ACTRGLineChecked{0%{stroke-dashoffset:352px;stroke-dasharray:5,5,5}50%{stroke-dasharray:5,5,5;stroke-dashoffset:3px}to{stroke-dashoffset:352px;stroke-dasharray:5,5,5}}@keyframes rg-line-anm2{0%{stroke-dashoffset:0;stroke-dasharray:4,4,4}to{stroke-dashoffset:10px;stroke-dasharray:20,20,20}}@keyframes rg-line-anm3{0%{stroke-opacity:1}50%{stroke-opacity:.2}to{stroke-opacity:1}}@keyframes rg-line-anm4{0%{stroke-dasharray:0,100%}to{stroke-dasharray:100%,0}}.relation-graph .rg-line-anm-1{animation:ACTRGLineChecked 10s infinite}.relation-graph .rg-line-anm-2{animation:rg-line-anm2 3s infinite}.relation-graph .rg-line-anm-3{animation:rg-line-anm3 1s infinite}.relation-graph .rg-line-anm-4{animation:rg-line-anm4 3s infinite}.relation-graph .c-rg-line-checked{z-index:100}.relation-graph .c-rg-line-checked-bg{stroke:#fd8b374d;stroke-linecap:round}@keyframes deform1{0%{stroke-dashoffset:0}to{stroke-dashoffset:100%}}.relation-graph .rg-icon{width:19px;height:19px;vertical-align:0px;fill:currentColor;overflow:hidden}.relation-graph .el-icon-remove,.relation-graph .el-icon-circle-plus{cursor:pointer}.relation-graph .relation-graph-node{position:absolute}.relation-graph .rel-node-peel{clear:both;padding:8px;position:absolute;font-size:14px}.relation-graph .rel-node-peel-checked{z-index:100}.relation-graph .rel-node{text-align:center}.relation-graph .rg-center-items{display:flex;place-items:center}.relation-graph .rel-node-shape-0{width:80px;height:80px;border-radius:50%}.relation-graph .rel-node-shape-1{border-radius:5px}.relation-graph .c-node-text{height:100%;width:100%;display:flex;align-items:center;justify-content:center}.relation-graph .rel-node-shape-1 .c-node-text{padding-left:5px;padding-right:5px}.relation-graph .rel-node-type-button{border-radius:25px;color:#00f;cursor:pointer}.relation-graph .rel-node-checked{transition:background-color .2s ease,outline .2s ease,color .2s ease,-webkit-box-shadow .2s ease;box-shadow:0 0 0 8px #fd8b374d}.relation-graph .rel-node-dragging{z-index:400}.relation-graph .rel-node-selected{border:#025098 solid 2px;border-radius:5px}.relation-graph .rel-node-flashing{animation:ACTRGNodeFlashing 2s infinite}.relation-graph .rel-node-vtree-2{transform-origin:0 0;transform:rotate(30deg) translate(0)}.relation-graph .rel-node-vtree{width:130px;height:45px;text-align:left}.relation-graph .c-btn-open-close{position:absolute;height:100%;width:19px;display:flex;align-items:center;justify-content:center;user-select:none;pointer-events:none;cursor:pointer}.relation-graph .c-btn-open-close span{width:19px;height:19px;display:inline-block;text-align:center;border-radius:15px;color:#fff;cursor:pointer;font-size:19px;line-height:16px;background-size:100% 100%;pointer-events:all}.relation-graph .c-expanded{background-image:url(data:image/svg+xml;%20charset=utf8,%3Csvg%20t=%221606310217820%22%20viewBox=%220%200%201024%201024%22%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20p-id=%223373%22%20width=%2232%22%20height=%2232%22%3E%3Cpath%20d=%22M853.333333%20480H544V170.666667c0-17.066667-14.933333-32-32-32s-32%2014.933333-32%2032v309.333333H170.666667c-17.066667%200-32%2014.933333-32%2032s14.933333%2032%2032%2032h309.333333V853.333333c0%2017.066667%2014.933333%2032%2032%2032s32-14.933333%2032-32V544H853.333333c17.066667%200%2032-14.933333%2032-32s-14.933333-32-32-32z%22%20p-id=%223374%22%20fill=%22white%22%3E%3C/path%3E%3C/svg%3E)}.relation-graph .c-collapsed{background-image:url(data:image/svg+xml;%20charset=utf8,%3Csvg%20t=%221606310454619%22%20class=%22icon%22%20viewBox=%220%200%201024%201024%22%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20p-id=%223662%22%20width=%22128%22%20height=%22128%22%3E%3Cpath%20d=%22M853.333333%20554.666667H170.666667c-23.466667%200-42.666667-19.2-42.666667-42.666667s19.2-42.666667%2042.666667-42.666667h682.666666c23.466667%200%2042.666667%2019.2%2042.666667%2042.666667s-19.2%2042.666667-42.666667%2042.666667z%22%20p-id=%223663%22%20fill=%22white%22%3E%3C/path%3E%3C/svg%3E)}.relation-graph .c-expand-positon-left{margin-top:-8px;margin-left:-25px}.relation-graph .c-expand-positon-right{height:100%;width:100%;justify-content:center}.relation-graph .c-expand-positon-right span{margin-top:-18px;margin-right:-18px;margin-left:100%}.relation-graph .c-expand-positon-bottom{height:100%;width:100%;margin-top:7px;margin-left:-8px;align-items:flex-end;justify-content:center}.relation-graph .c-expand-positon-top{height:18px;width:100%;margin-top:-20px;margin-left:-6px;align-items:flex-end;justify-content:center}@keyframes ACTRGNodeInit{0%{box-shadow:0 0 15px #fd8b37}50%{box-shadow:0 0 1px #2e4e8f}to{box-shadow:0 0 15px #fd8b37}to{box-shadow:0 0 15px #fd8b37}}@keyframes ACTRGNodeFlashing{0%{box-shadow:0 0 15px #fd8b37}40%{box-shadow:0 0 1px #2e4e8f}70%{box-shadow:0 0 8px #fd8b37}to{box-shadow:0 0 #fd8b37}}.relation-graph .rel-diy-node{padding:0}.relation-graph .c-setting-panel{--height: 300px;--width: 200px;width:300px;height:200px;position:absolute;margin-left:10px;margin-top:5px;font-size:12px;color:#3a5bb2;padding:60px 10px 10px;overflow:hidden;box-shadow:0 0 5px #999;border-radius:5px;z-index:1000;background-color:#fff;border:#999999 solid 1px}.relation-graph .c-setting-panel-button{height:35px;width:35px;font-size:8px;line-height:35px;text-align:center;border-radius:50%;position:absolute;margin-left:25px;margin-top:20px;background-color:#3a5bb2;color:#fff;cursor:pointer;z-index:1001;box-shadow:0 0 8px #999}.relation-graph .c-setting-panel-button:hover{box-shadow:0 0 20px #ffa20a;border:#ffffff solid 1px;color:#ffa20a;-moz-transform:rotate(-89deg) translateX(-190px);animation-timing-function:linear;animation:flashButton 2s infinite}.relation-graph .c-fixedLayout{position:fixed;top:125px}@keyframes flashButton{0%{box-shadow:0 0 8px #2e4e8f}30%{box-shadow:0 0 20px #ffa20a}to{box-shadow:0 0 8px #2e4e8f}}.relation-graph .c-debug-tools-row{text-align:left}.relation-graph .rel-operate{position:absolute;top:0px;left:0px;width:100%;height:100%;z-index:180}.relation-graph .rel-selection{position:absolute;background-color:#0e7a7b4d;border:rgb(14,122,123) solid 1px}.relation-graph .rel-graph-loading{position:absolute;z-index:200;left:0px;top:0px;height:100%;width:100%;background-color:#fff}.relation-graph .rel-graph-loading .c-graph-loading-icon{width:16px;height:16px;vertical-align:-3px;fill:currentColor;overflow:hidden;animation:turn 1s linear infinite}.relation-graph .rel-graph-loading .rel-graph-loading-message{position:absolute;width:200px;height:30px;line-height:30px;text-align:center;left:calc((100% - 200px)/2);top:calc((100% - 30px)/2);border-radius:5px;background-color:#00000080;color:#fff}.relation-graph .rel-graph-loading-hide{display:none}@keyframes slowHide{0%{opacity:1}to{opacity:0;display:none}}.relation-graph .rel-easy-view{overflow:visible;height:100%;width:100%;background-color:transparent;position:absolute;left:0px;top:0px}.relation-graph .rel-easy-view canvas{opacity:0}.relation-graph .rel-easy-view-active canvas{opacity:1}.relation-graph .rel-toolbar{position:absolute;z-index:300;background-color:#dcdcdc33;color:#999;box-shadow:0 0 2px #ccc;box-sizing:border-box;border-radius:5px;padding:3px}.relation-graph .rel-toolbar .rg-icon{flex-grow:1;width:16px;height:16px;fill:currentColor;overflow:hidden}.relation-graph .rel-toolbar .c-mb-button svg{margin:auto}.relation-graph .rel-toolbar .c-mb-button-on{color:#2e74b5}.relation-graph .rel-toolbar .c-mb-button:hover{background-color:#dcdcdc80}.relation-graph .rel-toolbar .c-loading-icon{animation:turn 1s linear infinite}@keyframes turn{0%{-webkit-transform:rotate(0deg)}25%{-webkit-transform:rotate(90deg)}50%{-webkit-transform:rotate(180deg)}75%{-webkit-transform:rotate(270deg)}to{-webkit-transform:rotate(360deg)}}.relation-graph .rel-toolbar .c-current-zoom{margin-top:0;height:20px;color:#262626;font-size:10px;text-align:center;line-height:20px;border-radius:3px}.relation-graph .rel-toolbar .c-mb-button{height:40px;margin-top:0;opacity:1;text-align:center;padding-top:3px;cursor:pointer;font-size:18px;box-sizing:border-box;line-height:21px;display:flex;align-items:center;justify-items:center;border-radius:3px}.relation-graph .rel-toolbar-v{width:45px}.relation-graph .rel-toolbar-h{height:45px}.relation-graph .rel-toolbar-h .c-mb-button{width:40px;height:100%;float:left}.relation-graph .rel-toolbar-h .c-current-zoom{width:40px;height:100%;float:left;line-height:40px}.relation-graph .rel-toolbar-h-right{right:15px}.relation-graph .rel-toolbar-h-left{left:15px}.relation-graph .rel-toolbar-h-center{left:calc((100% - 260px)/2)}.relation-graph .rel-toolbar-v-top{top:15px}.relation-graph .rel-toolbar-v-bottom{bottom:15px}.relation-graph .rel-toolbar-v-center{top:calc((100% - 260px)/2)}")); document.head.appendChild(elementStyle);} catch(e) {console.error('vite-plugin-css-injected-by-js', e);} })();var dt = Object.defineProperty;
var ft = (n, s, e) => s in n ? dt(n, s, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[s] = e;
var _ = (n, s, e) => (ft(n, typeof s != "symbol" ? s + "" : s, e), e);
import { defineComponent as Z, openBlock as L, createElementBlock as C, normalizeClass as U, createElementVNode as b, normalizeStyle as X, withModifiers as de, ref as ue, inject as K, computed as P, onMounted as xe, onBeforeUnmount as Ze, withDirectives as ut, unref as y, renderSlot as F, createVNode as he, createCommentVNode as A, vShow as pt, toDisplayString as Ce, Fragment as J, renderList as re, createBlock as ae, withCtx as ne, createTextVNode as je, reactive as Re, provide as Ge, markRaw as yt } from "vue";
import * as gt from "screenfull";
import ce from "screenfull";
import * as mt from "html2canvas";
import vt from "html2canvas";
const Je = "2.1.35", wi = Symbol("INSTALLED_KEY"), Li = "graphInstance", qe = "graphData", Q = "graph", _t = !function(n) {
  var s, e, t, o, i, a, r = '<svg><symbol id="icon-iconset0444" viewBox="0 0 1024 1024"><path d="M960 682.666667l-106.666667 0C844.8 569.6 763.733333 42.666667 64 42.666667 51.2 42.666667 42.666667 51.2 42.666667 64c0 12.8 8.533333 21.333333 21.333333 21.333333 219.733333 0 377.6 106.666667 465.066667 315.733333 51.2 123.733333 64 236.8 66.133333 281.6L490.666667 682.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333 0 6.4 2.133333 10.666667 6.4 14.933333l234.666667 256c4.266667 4.266667 8.533333 6.4 14.933333 6.4 6.4 0 10.666667-2.133333 14.933333-6.4l234.666667-256c4.266667-4.266667 6.4-8.533333 6.4-14.933333C981.333333 691.2 972.8 682.666667 960 682.666667zM725.333333 928 539.733333 725.333333 618.666667 725.333333c12.8 0 21.333333-8.533333 21.333333-21.333333l0-21.333333c-4.266667-87.466667-38.4-396.8-273.066667-554.666667C755.2 251.733333 804.266667 588.8 810.666667 682.666667l0 21.333333c0 12.8 8.533333 21.333333 21.333333 21.333333l78.933333 0L725.333333 928z"  ></path></symbol><symbol id="icon-iconset0445" viewBox="0 0 1024 1024"><path d="M974.933333 305.066667l-234.666667-256C736 44.8 731.733333 42.666667 725.333333 42.666667c-6.4 0-10.666667 2.133333-14.933333 6.4l-234.666667 256C471.466667 309.333333 469.333333 313.6 469.333333 320c0 12.8 8.533333 21.333333 21.333333 21.333333l104.533333 0c-2.133333 44.8-14.933333 157.866667-66.133333 281.6C441.6 832 283.733333 938.666667 64 938.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333 0 12.8 8.533333 21.333333 21.333333 21.333333 699.733333 0 780.8-526.933333 789.333333-640l106.666667 0c12.8 0 21.333333-8.533333 21.333333-21.333333C981.333333 313.6 979.2 309.333333 974.933333 305.066667zM832 298.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333l0 21.333333c-6.4 93.866667-55.466667 430.933333-443.733333 554.666667 234.666667-157.866667 268.8-467.2 273.066667-554.666667l0-21.333333c0-12.8-8.533333-21.333333-21.333333-21.333333l-78.933333 0L725.333333 96l185.6 202.666667L832 298.666667z"  ></path></symbol><symbol id="icon-yuanquanfenxiang" viewBox="0 0 1024 1024"><path d="M751.148705 578.773799c-61.987796 0-117.066229 30.121018-151.388942 76.488045L398.287145 536.382317c1.991354-10.171664 3.046383-20.673855 3.046383-31.419594 0-18.776645-3.196809-36.817534-9.058306-53.621245l193.486736-107.492176c31.949666 58.566884 94.104261 98.391914 165.386748 98.391914 103.803157 0 188.254571-84.450391 188.254571-188.254571S854.951863 65.73105 751.148705 65.73105c-103.804181 0-188.255595 84.450391-188.255595 188.254571 0 14.246469 1.600451 28.125571 4.613064 41.4746L368.032074 406.279167c-29.841655-39.193651-76.976162-64.544015-129.927141-64.544015-90.004897 0-163.228595 73.223698-163.228595 163.228595 0 90.003873 73.223698 163.228595 163.228595 163.228595 60.882626 0 114.078175-33.510208 142.134161-83.049484L575.173808 700.16452c-7.925507 20.788465-12.280698 43.325761-12.280698 66.86385 0 103.803157 84.450391 188.254571 188.255595 188.254571 103.803157 0 188.254571-84.450391 188.254571-188.254571S854.951863 578.773799 751.148705 578.773799zM751.148705 116.89636c75.590606 0 137.089261 61.498656 137.089261 137.089261s-61.498656 137.089261-137.089261 137.089261c-75.591629 0-137.090285-61.498656-137.090285-137.089261S675.557076 116.89636 751.148705 116.89636zM238.105956 617.026008c-61.791321 0-112.063285-50.27094-112.063285-112.063285 0-61.791321 50.27094-112.063285 112.063285-112.063285s112.063285 50.27094 112.063285 112.063285C350.168218 566.755068 299.897278 617.026008 238.105956 617.026008zM751.148705 904.117632c-75.591629 0-137.090285-61.498656-137.090285-137.089261s61.498656-137.089261 137.090285-137.089261c75.590606 0 137.089261 61.498656 137.089261 137.089261S826.739311 904.117632 751.148705 904.117632z"  ></path></symbol><symbol id="icon-hj2" viewBox="0 0 1024 1024"><path d="M963.66 256.607c0-0.244 0-0.607-0.126-0.851 0-0.369 0-0.614-0.119-0.978 0-0.369-0.119-0.733-0.119-1.104 0-0.244 0-0.487-0.126-0.725 0-0.369-0.119-0.859-0.244-1.222 0-0.244-0.119-0.369-0.119-0.613-0.126-0.365-0.126-0.852-0.245-1.216 0-0.244-0.126-0.369-0.126-0.613-0.119-0.365-0.244-0.734-0.364-1.222-0.126-0.244-0.126-0.49-0.244-0.609l-0.369-1.095c-0.119-0.245-0.119-0.49-0.244-0.734-0.121-0.369-0.245-0.613-0.365-0.978-0.126-0.244-0.244-0.613-0.369-0.851-0.119-0.244-0.238-0.613-0.364-0.859-0.119-0.364-0.244-0.607-0.364-0.977l-0.371-0.734c-0.119-0.364-0.364-0.725-0.487-0.971-0.119-0.245-0.244-0.371-0.364-0.614-0.244-0.364-0.369-0.733-0.614-1.097-0.119-0.126-0.244-0.369-0.364-0.487l-0.733-1.097c-0.119-0.126-0.244-0.369-0.365-0.487-0.244-0.369-0.487-0.733-0.733-0.978-0.126-0.244-0.244-0.369-0.487-0.613-0.245-0.238-0.49-0.607-0.734-0.851-0.244-0.245-0.487-0.49-0.607-0.734-0.244-0.244-0.369-0.487-0.614-0.733-0.851-0.972-1.829-1.83-2.681-2.682-0.245-0.244-0.49-0.369-0.734-0.614-0.244-0.244-0.487-0.487-0.733-0.607-0.245-0.244-0.614-0.487-0.859-0.733-0.238-0.121-0.364-0.365-0.607-0.49-0.365-0.244-0.734-0.487-0.978-0.733-0.119-0.119-0.364-0.244-0.487-0.365l-1.097-0.733c-0.119-0.119-0.364-0.244-0.487-0.364-0.365-0.244-0.734-0.369-1.097-0.614-0.244-0.119-0.369-0.244-0.613-0.364-0.365-0.126-0.734-0.369-0.972-0.487l-0.734-0.369c-0.369-0.121-0.613-0.245-0.977-0.365-0.244-0.126-0.614-0.244-0.859-0.369-0.244-0.119-0.607-0.238-0.851-0.364-0.365-0.119-0.609-0.244-0.978-0.364-0.244-0.126-0.487-0.126-0.733-0.245l-1.097-0.369c-0.244-0.119-0.487-0.119-0.609-0.244-0.369-0.119-0.733-0.244-1.22-0.364-0.245 0-0.371-0.126-0.614-0.126-0.364-0.119-0.851-0.244-1.216-0.244-0.244 0-0.487-0.121-0.613-0.121-0.364-0.126-0.852-0.126-1.222-0.244-0.244 0-0.482-0.126-0.725-0.126-0.369 0-0.734-0.119-1.104-0.119-0.364 0-0.607 0-0.978-0.126-0.244 0-0.607 0-0.851-0.119h-242.407c-21.604 0-39.062 17.456-39.062 39.062 0 21.604 17.458 39.055 39.062 39.055h146.102l-3.171 3.177-217.27 217.265 0.369 0.369-49.676 49.676-155.87-155.87c-7.694-7.689-17.827-11.472-27.953-11.472-10.13-0.126-20.263 3.659-27.952 11.472l-282.446 282.322c-15.258 15.258-15.258 40.041 0 55.298 15.258 15.258 40.033 15.258 55.291 0l255.108-255.11 155.746 155.751c7.813 7.815 17.945 11.593 28.076 11.474 10.126 0.119 20.382-3.659 28.070-11.474l182.964-182.969c0.734-0.734 1.347-1.342 1.956-2.075l111.564-111.564v146.109c0 21.604 17.451 39.060 39.055 39.060s39.062-17.456 39.062-39.060v-235.085c0-0.244 0.126-0.49 0.126-0.614 0-0.244 0.119-0.487 0.119-0.733 0-0.364 0.119-0.734 0.119-1.097s0-0.607 0.126-0.977c0-0.245 0-0.609 0.119-0.852-0.122-1.466-0.122-2.807-0.122-4.030v0zM963.66 256.607z"  ></path></symbol><symbol id="icon-circleyuanquan" viewBox="0 0 1024 1024"><path d="M150.1184 150.1184C250.2656 50.0736 370.8928 0 512 0c141.1072 0 261.7344 50.0736 361.8816 150.1184C973.9264 250.2656 1024 370.8928 1024 512c0 141.2096-50.0736 261.8368-150.1184 361.8816C773.7344 973.9264 653.1072 1024 512 1024c-141.1072 0-261.7344-50.0736-361.8816-150.1184C50.0736 773.8368 0 653.2096 0 512 0 370.8928 50.0736 250.2656 150.1184 150.1184zM512 41.8816c-85.2992 0-164.1472 20.8896-236.3392 62.7712C203.4688 146.432 146.432 203.4688 104.6528 275.6608 62.7712 347.9552 41.8816 426.7008 41.8816 512c0 129.6384 45.9776 240.4352 137.8304 332.288C271.5648 936.2432 382.3616 982.1184 512 982.1184c129.6384 0 240.4352-45.8752 332.288-137.8304C936.2432 752.4352 982.1184 641.6384 982.1184 512c0-129.6384-45.9776-240.3328-137.8304-332.288C752.4352 87.7568 641.6384 41.8816 512 41.8816zM512 256c-36.1472 0-70.144 7.0656-102.1952 20.8896C377.856 290.9184 349.4912 309.3504 324.9152 332.288c-22.9376 24.576-41.472 52.9408-55.3984 84.8896S248.6272 483.328 248.6272 519.3728c0 36.1472 6.9632 70.144 20.8896 102.1952s32.4608 60.3136 55.3984 84.8896C349.4912 729.4976 377.856 747.9296 409.8048 761.856 441.856 775.7824 475.8528 782.7456 512 782.7456c36.1472 0 70.144-6.9632 102.1952-20.8896C646.144 747.9296 674.5088 729.4976 699.0848 706.4576c22.9376-24.576 41.472-52.9408 55.3984-84.8896s20.8896-66.048 20.8896-102.1952c0-36.0448-6.9632-70.144-20.8896-102.1952S722.0224 356.9664 699.0848 332.288C674.5088 309.3504 646.144 290.9184 614.1952 276.8896 582.144 263.0656 548.1472 256 512 256z"  ></path></symbol><symbol id="icon-bhjlink" viewBox="0 0 1024 1024"><path d="M901.920618 465.785468c-50.993571 0-94.522533 32.698367-110.688942 78.273953L702.244627 544.059421c1.764013-10.590222 2.890616-21.423121 2.890616-32.694527 0-72.177856-40.480145-134.923579-99.898281-166.857822l34.099901-112.776268c8.829281 2.126492 18.1347 3.327588 27.724265 3.327588 64.833817 0 117.472367-52.597848 117.472367-117.589097C784.532727 52.594008 731.894177 0 667.06036 0c-64.911381 0-117.509229 52.594008-117.509229 117.470063 0 49.305587 30.248562 91.349307 73.177745 108.842756l-33.419485 110.692013c-22.548956-9.588797-47.462473-14.807112-73.540224-14.807112-49.18732 0-93.841349 18.658451-127.540374 49.309426L213.348053 196.583401l-1.886119 2.008226c19.940183-21.103648 32.256788-49.588197 32.256788-81.003297 0-64.872983-52.517212-117.470063-117.470063-117.470063-64.913685 0-117.511533 52.59708-117.511533 117.470063 0 65.034255 52.59708 117.592169 117.511533 117.592169 31.412796 0 59.898881-12.358075 80.921125-32.335888l-6.179038 6.056931 174.960609 174.879973c-30.729308 33.66293-49.506025 78.47516-49.506025 127.661712 0 43.008283 14.401627 82.685138 38.593258 114.501114l-149.845117 120.999625c-21.503757-28.044506-55.285722-46.218372-93.357532-46.218372-64.874519 0-117.430897 52.719186-117.430897 117.592169 0 64.833049 52.556378 117.470063 117.430897 117.470063 64.872983 0 117.549163-52.637014 117.549163-117.470063 0-20.541499-5.335813-39.878062-14.602834-56.68956l151.369526-122.203792c34.584487 37.633303 84.29095 61.384123 139.618142 61.384123 28.082136 0 54.602234-6.057699 78.553492-17.091805l52.716114 119.514383c-35.585143 20.222026-59.497236 58.335306-59.497236 102.106945 0 64.912149 52.637014 117.549163 117.592169 117.549163 64.872983 0 117.388659-52.637014 117.388659-117.549163 0-64.833049-52.516444-117.513069-117.388659-117.513069-15.047485 0-29.248673 2.929782-42.446133 7.903885l-52.798286-120.034294c42.807844-24.554878 75.182898-65.518073 88.46253-114.221576l88.222926 0c-1.405374 7.018422-1.96522 14.241123-1.96522 21.743362 0 64.872983 52.557914 117.509997 117.387123 117.509997 64.995089 0 117.596009-52.637014 117.596009-117.509997C1019.508947 518.383316 966.994039 465.785468 901.920618 465.785468L901.920618 465.785468zM901.920618 465.785468"  ></path></symbol><symbol id="icon-lianjie_connecting5" viewBox="0 0 1024 1024"><path d="M801.25952 251.74016l-28.9792-28.99968-150.79424 150.8352-35.1232-35.10272-99.14368 99.16416 99.14368 99.16416 99.16416-99.16416-35.10272-35.1232zM487.19872 476.8768l-29.94176 29.94176-19.61984-19.61984-99.16416 99.16416 35.10272 35.1232-150.8352 150.79424 28.95872 28.95872 150.8352-150.79424 35.10272 35.10272 99.14368-99.14368-19.61984-19.64032 29.96224-29.96224-59.92448-59.92448z m-15.48288 44.4416l15.4624-15.4624 30.98624 30.98624-15.4624 15.44192-30.98624-30.96576z" fill="" ></path></symbol><symbol id="icon-xiazai" viewBox="0 0 1024 1024"><path d="M840.5 900.3h-657c-16.5 0-29.9 13.4-29.9 29.9s13.4 29.9 29.9 29.9h657.1c16.5 0 29.9-13.4 29.9-29.9-0.1-16.6-13.5-29.9-30-29.9zM631.5 123.7V541.8H763.1L512 769.9l-251.2-228h131.7V123.7h239m0-59.7h-239c-33 0-59.7 26.7-59.7 59.7v358.4H183.5c-26.6 0-39.9 32.2-21.1 51l328.5 298.2c5.8 5.8 13.5 8.7 21.1 8.7s15.3-2.9 21.1-8.7l328.5-298.2c18.8-18.8 5.5-51-21.1-51H691.2V123.7c0-33-26.7-59.7-59.7-59.7z"  ></path></symbol><symbol id="icon-ico_reset" viewBox="0 0 1024 1024"><path d="M925.97087933 277.33133334a479.997 479.997 0 1 0 54.33566 255.9984H916.05094133a415.9974 415.9974 0 1 1-64.191599-255.9984h74.047537z"  ></path><path d="M978.64255033 61.01268534L725.33213333 371.09074734h297.59814z"  ></path></symbol><symbol id="icon-fangda" viewBox="0 0 1024 1024"><path d="M768 448a320 320 0 1 0-320 320 320 320 0 0 0 320-320z m64 0A384 384 0 1 1 448 64a384 384 0 0 1 384 384z"  ></path><path d="M681.28 726.72a32 32 0 0 1 45.44-45.44l160 160a32 32 0 0 1-45.44 45.44zM320 480a32 32 0 0 1 0-64h256a32 32 0 0 1 0 64z"  ></path><path d="M480 576a32 32 0 0 1-64 0V320a32 32 0 0 1 64 0z"  ></path></symbol><symbol id="icon-zidong" viewBox="0 0 1024 1024"><path d="M131.3 363.3c-19.2 47.3-28.9 97.3-28.9 148.7 0 51.3 9.7 101.3 28.9 148.7 7 17.2 15.1 33.8 24.3 49.7l15.8-49.1 42.8 13.8-39.8 123.8-42.8-13.9-80.9-26 13.8-42.8 52.3 16.8c-98-168.4-74.8-387.9 69.4-532.1C342.4 44.7 586.9 30.5 759.1 158.3l-32.2 32.2c-25.1-18-52.1-32.9-80.9-44.6-47.3-19.2-97.3-28.9-148.7-28.9-51.3 0-101.3 9.7-148.7 28.9-49 19.9-92.9 49.1-130.6 86.8s-66.9 81.7-86.7 130.6z m828.3-60.2l13.8-42.8-80.9-26-42.8-13.8-39.8 123.8 42.8 13.8 15-46.7c9.8 16.6 18.4 34 25.8 52.1 19.2 47.3 28.9 97.3 28.9 148.7 0 51.3-9.7 101.3-28.9 148.7-19.9 49-49.1 92.9-86.8 130.6C768.9 829 725 858.2 676 878.1c-47.3 19.2-97.3 28.9-148.7 28.9-51.3 0-101.3-9.7-148.7-28.9-28.8-11.7-55.9-26.6-80.9-44.6l-32.2 32.2c126.3 93.7 382.6 147.7 572.9-42.6 145.8-145.8 167.9-368.6 66.1-537.7l55.1 17.7zM474 241.2L295 730.4h64.8l50.5-148.2h195.3l54 148.2h70.3L539.6 241.2H474z m-45.9 288.3L479.8 386c11-30.9 19.4-62.1 25.4-93.4 6.9 26 17.9 59.9 32.8 101.5l48.2 135.5H428.1z" fill="" ></path></symbol><symbol id="icon-quanping" viewBox="0 0 1024 1024"><path d="M795.5 192H581c-19.6 0-35.6 15.7-36 35.3-0.4 20.3 16.4 36.7 36.7 36.7h128.4L581 393.1c-14 14-14 36.9 0 50.9s36.9 14 50.9 0L760 315.9v129c0 19.6 15.8 35.6 35.3 36 20.2 0.4 36.7-16.4 36.7-36.7V228.5c0-20.1-16.3-36.5-36.5-36.5zM442.2 760H313.8L443 630.9c14-14 14-36.9 0-50.9s-36.9-14-50.9 0L264 708.1V579c0-19.6-15.8-35.6-35.3-36-20.2-0.4-36.7 16.4-36.7 36.7v215.6c0 20.3 16.4 36.7 36.7 36.7H443c19.6 0 35.6-15.7 36-35.3 0.3-20.3-16.5-36.7-36.8-36.7z"  ></path><path d="M838 136c27.6 0 50 22.4 50 50v652c0 27.6-22.4 50-50 50H186c-27.6 0-50-22.4-50-50V186c0-27.6 22.4-50 50-50h652m0-72H186c-16.4 0-32.4 3.2-47.5 9.6-14.5 6.1-27.6 14.9-38.8 26.1-11.2 11.2-20 24.2-26.1 38.8-6.4 15.1-9.6 31.1-9.6 47.5v652c0 16.4 3.2 32.4 9.6 47.5 6.1 14.5 14.9 27.6 26.1 38.8 11.2 11.2 24.2 20 38.8 26.1 15.1 6.4 31.1 9.6 47.5 9.6h652c16.4 0 32.4-3.2 47.5-9.6 14.5-6.1 27.6-14.9 38.8-26.1 11.2-11.2 20-24.2 26.1-38.8 6.4-15.1 9.6-31.1 9.6-47.5V186c0-16.4-3.2-32.4-9.6-47.5-6.1-14.5-14.9-27.6-26.1-38.8-11.2-11.2-24.2-20-38.8-26.1-15.1-6.4-31.1-9.6-47.5-9.6z"  ></path></symbol><symbol id="icon-lianjieliu" viewBox="0 0 1024 1024"><path d="M280.224 425.856h348.608a29.536 29.536 0 1 0 0-59.072H280.224c-52.448 0-93.152-34.304-93.152-73.856s40.704-73.856 93.152-73.856h140.128C432.096 258.816 468.448 288 512 288s79.904-29.184 91.648-68.928h178.08a29.536 29.536 0 1 0 0-59.072h-179.584C588.896 122.784 553.728 96 512 96s-76.896 26.784-90.112 64H280.224C197.184 160 128 218.272 128 292.928s69.184 132.928 152.224 132.928z"  ></path><path d="M895.936 415.2A96 96 0 1 0 800 512c30.656 0 57.632-14.624 75.2-36.992 10.56 12.064 16.832 26.56 16.832 41.92 0 39.552-40.704 73.856-93.152 73.856H306.016A95.584 95.584 0 0 0 224 544a95.68 95.68 0 0 0-95.232 88.352C89.888 656.224 64 695.424 64 740.928c0 74.656 69.184 132.928 152.224 132.928h241.728A95.808 95.808 0 0 0 544 928a96 96 0 1 0 0-192 95.904 95.904 0 0 0-94.272 78.752H216.224c-52.448 0-93.152-34.304-93.152-73.856 0-17.504 8.32-33.792 21.76-46.72A95.808 95.808 0 0 0 224 736a95.68 95.68 0 0 0 95.008-86.144h479.84c83.072 0 152.224-58.272 152.224-132.928 0.032-41.536-21.824-77.568-55.136-101.728z"  ></path></symbol><symbol id="icon-shuaxin" viewBox="0 0 1024 1024"><path d="M512 919.552c-224.768 0-407.552-182.784-407.552-407.552 0-8.704 0.512-17.408 1.024-26.112l71.68 4.608c-0.512 7.168-0.512 14.336-0.512 21.504 0 185.344 150.528 335.872 335.872 335.872 86.528 0 168.448-32.768 230.912-92.16l49.152 52.224C716.288 880.128 616.96 919.552 512 919.552zM919.552 512h-71.68c0-11.776-0.512-23.552-2.048-35.328-17.92-171.52-161.28-300.544-334.336-300.544-67.584 0-132.096 19.968-187.904 57.344L284.16 174.08c67.072-45.568 145.92-69.632 227.84-69.632 209.408 0 384 156.672 405.504 365.056 1.536 13.824 2.048 28.16 2.048 42.496z" fill="#707070" ></path><path d="M140.288 290.816L28.16 491.52c-3.072 5.12 1.024 11.776 6.656 11.776H258.56c6.144 0 9.728-6.144 6.656-11.776L153.6 290.816c-3.072-5.632-10.752-5.632-13.312 0zM870.4 675.84L758.272 475.136c-3.072-5.12 1.024-11.776 6.656-11.776h223.744c6.144 0 9.728 6.144 6.656 11.776L883.712 675.84c-2.56 5.12-10.24 5.12-13.312 0zM270.336 202.24a35.84 35.84 0 1 0 71.68 0 35.84 35.84 0 1 0-71.68 0zM728.576 784.896a35.84 35.84 0 1 0 71.68 0 35.84 35.84 0 1 0-71.68 0z" fill="#707070" ></path></symbol><symbol id="icon-resize-" viewBox="0 0 1024 1024"><path d="M410.816 673.514667L230.997333 853.333333H384v85.333334H85.333333V640h85.333334v153.002667l179.818666-179.84 60.330667 60.373333z m-53.632-256L170.666667 230.997333V384H85.333333V85.333333h298.666667v85.333334h-153.002667l186.517334 186.517333-60.330667 60.330667z m234.666667-45.696L793.002667 170.666667H640V85.333333h298.666667v298.666667h-85.333334v-153.002667l-201.152 201.173334-60.330666-60.373334z m67.029333 226.709333L853.333333 793.002667V640h85.333334v298.666667H640v-85.333334h153.002667l-194.474667-194.453333 60.352-60.352z"  ></path></symbol><symbol id="icon-guanxitu" viewBox="0 0 1024 1024"><path d="M209.003789 401.084632l29.749895-44.948211 107.843369 71.464421-29.749895 44.894316zM682.469053 546.600421l-14.551579-51.846737 124.496842-35.031579 14.551579 51.846737zM315.068632 812.840421l-40.367158-35.678316 85.692631-96.902737 40.421053 35.732211zM597.962105 390.251789l-46.672842-26.947368 43.11579-74.64421 46.672842 26.947368zM615.639579 728.764632l41.121684-34.816 83.536842 98.735157-41.121684 34.816z" fill="#444A5C" ></path><path d="M501.221053 765.305263c-118.568421 0-215.578947-97.010526-215.578948-215.578947s97.010526-215.578947 215.578948-215.578948 215.578947 97.010526 215.578947 215.578948-97.010526 215.578947-215.578947 215.578947z m0-377.263158c-91.621053 0-161.684211 70.063158-161.684211 161.684211s70.063158 161.684211 161.684211 161.68421 161.684211-70.063158 161.68421-161.68421-75.452632-161.684211-161.68421-161.684211zM167.073684 452.715789c-59.284211 0-107.789474-48.505263-107.789473-107.789473s48.505263-107.789474 107.789473-107.789474 107.789474 48.505263 107.789474 107.789474-48.505263 107.789474-107.789474 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894737 53.894737-21.557895 53.894737-53.894737-26.947368-53.894737-53.894737-53.894737zM253.305263 948.547368c-59.284211 0-107.789474-48.505263-107.789474-107.789473s48.505263-107.789474 107.789474-107.789474 107.789474 48.505263 107.789474 107.789474-48.505263 107.789474-107.789474 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894737 53.894737-21.557895 53.894737-53.894737-21.557895-53.894737-53.894737-53.894737zM856.926316 576.673684c-59.284211 0-107.789474-48.505263-107.789474-107.789473s48.505263-107.789474 107.789474-107.789474 107.789474 48.505263 107.789473 107.789474-48.505263 107.789474-107.789473 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894736 53.894737-21.557895 53.894737-53.894736-21.557895-53.894737-53.894737-53.894737zM662.905263 350.315789C592.842105 350.315789 528.168421 291.031579 528.168421 215.578947s59.284211-134.736842 134.736842-134.736842 134.736842 59.284211 134.736842 134.736842-59.284211 134.736842-134.736842 134.736842z m0-215.578947c-43.115789 0-80.842105 37.726316-80.842105 80.842105s37.726316 80.842105 80.842105 80.842106 80.842105-37.726316 80.842105-80.842106-32.336842-80.842105-80.842105-80.842105zM749.136842 921.6c-43.115789 0-80.842105-37.726316-80.842105-80.842105s37.726316-80.842105 80.842105-80.842106 80.842105 37.726316 80.842105 80.842106-37.726316 80.842105-80.842105 80.842105z m0-107.789474c-16.168421 0-26.947368 10.778947-26.947368 26.947369s10.778947 26.947368 26.947368 26.947368 26.947368-10.778947 26.947369-26.947368-10.778947-26.947368-26.947369-26.947369z" fill="#444A5C" ></path></symbol><symbol id="icon-tupian" viewBox="0 0 1024 1024"><path d="M938.666667 553.92V768c0 64.8-52.533333 117.333333-117.333334 117.333333H202.666667c-64.8 0-117.333333-52.533333-117.333334-117.333333V256c0-64.8 52.533333-117.333333 117.333334-117.333333h618.666666c64.8 0 117.333333 52.533333 117.333334 117.333333v297.92z m-64-74.624V256a53.333333 53.333333 0 0 0-53.333334-53.333333H202.666667a53.333333 53.333333 0 0 0-53.333334 53.333333v344.48A290.090667 290.090667 0 0 1 192 597.333333a286.88 286.88 0 0 1 183.296 65.845334C427.029333 528.384 556.906667 437.333333 704 437.333333c65.706667 0 126.997333 16.778667 170.666667 41.962667z m0 82.24c-5.333333-8.32-21.130667-21.653333-43.648-32.917333C796.768 511.488 753.045333 501.333333 704 501.333333c-121.770667 0-229.130667 76.266667-270.432 188.693334-2.730667 7.445333-7.402667 20.32-13.994667 38.581333-7.68 21.301333-34.453333 28.106667-51.370666 13.056-16.437333-14.634667-28.554667-25.066667-36.138667-31.146667A222.890667 222.890667 0 0 0 192 661.333333c-14.464 0-28.725333 1.365333-42.666667 4.053334V768a53.333333 53.333333 0 0 0 53.333334 53.333333h618.666666a53.333333 53.333333 0 0 0 53.333334-53.333333V561.525333zM320 480a96 96 0 1 1 0-192 96 96 0 0 1 0 192z m0-64a32 32 0 1 0 0-64 32 32 0 0 0 0 64z"  ></path></symbol><symbol id="icon-juhejiedian" viewBox="0 0 1024 1024"><path d="M533.333333 725.333333a64 64 0 1 1-64 64 64 64 0 0 1 64-64m0-85.333333a149.333333 149.333333 0 1 0 149.333334 149.333333 149.333333 149.333333 0 0 0-149.333334-149.333333z" fill="#666666" ></path><path d="M533.333333 277.333333m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M277.333333 320m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M789.333333 320m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M512 341.333333h42.666667v384h-42.666667z" fill="#666666" ></path><path d="M741.290667 357.504l30.165333 30.165333-225.066667 225.066667-30.165333-30.165333z" fill="#666666" ></path><path d="M558.08 582.016l-30.165333 30.165333-228.693334-228.693333 30.165334-30.165333z" fill="#666666" ></path></symbol><symbol id="icon-ziyuan" viewBox="0 0 1024 1024"><path d="M236.615854 752.86913h-0.484162A241.500139 241.500139 0 0 1 0.538332 527.733676a238.78883 238.78883 0 0 1 64.684079-180.011531 242.081134 242.081134 0 0 1 149.025146-74.367324 298.534454 298.534454 0 0 1 596.003751 25.951097V300.95207a221.262156 221.262156 0 0 1 213.031398 233.075715 222.714643 222.714643 0 0 1-221.262156 209.1581h-3.098639a27.500417 27.500417 0 0 1 0-54.904001h2.711309A167.520145 167.520145 0 0 0 968.378705 531.219644a166.261323 166.261323 0 0 0-166.16449-175.363573 151.058627 151.058627 0 0 0-18.204502 1.065157 27.500417 27.500417 0 0 1-30.211725-30.308558 240.822312 240.822312 0 0 0 1.549319-27.306752 243.727285 243.727285 0 0 0-487.357738 0 27.500417 27.500417 0 0 1-27.403584 27.500417 185.627813 185.627813 0 0 0-185.240484 197.538205A186.30564 186.30564 0 0 0 237.100016 697.965129a27.500417 27.500417 0 0 1-0.484162 54.904001z"  ></path><path d="M513.266174 1021.869686a27.500417 27.500417 0 0 1-27.500417-27.403584v-484.162268a27.500417 27.500417 0 1 1 54.904001 0v484.162268a27.403584 27.403584 0 0 1-27.403584 27.403584z"  ></path><path d="M513.266174 1024a27.500417 27.500417 0 0 1-19.366491-8.037094L342.260061 864.129619a27.500417 27.500417 0 1 1 38.732981-38.732981L513.266174 957.766602l130.530147-130.336483a27.500417 27.500417 0 0 1 38.732981 38.732982L532.632664 1015.962906a27.403584 27.403584 0 0 1-19.36649 8.037094z"  ></path></symbol><symbol id="icon-add-select" viewBox="0 0 1024 1024"><path d="M544 213.333333v266.666667H810.666667v64H544V810.666667h-64V544H213.333333v-64h266.666667V213.333333z"  ></path></symbol><symbol id="icon-sami-select" viewBox="0 0 1024 1024"><path d="M810.666667 480v64H213.333333v-64z"  ></path></symbol><symbol id="icon-icon_shuaxin" viewBox="0 0 1024 1024"><path d="M512 938.666667c-55.371852 0-109.226667-10.903704-159.857778-32.237037-48.924444-20.66963-92.823704-50.251852-130.465185-87.988149-37.736296-37.736296-67.318519-81.635556-87.988148-130.465185-21.428148-50.631111-32.237037-104.391111-32.237037-159.857777s10.903704-109.226667 32.237037-159.857778c20.66963-48.924444 50.251852-92.823704 87.988148-130.465185 37.736296-37.736296 81.635556-67.318519 130.465185-87.988149 50.631111-21.428148 104.391111-32.237037 159.857778-32.237037 63.81037 0 125.060741 14.222222 181.854815 42.382223 54.139259 26.832593 102.684444 66.085926 140.325926 113.682963 7.300741 9.197037 5.783704 22.660741-3.508148 29.961481-9.197037 7.300741-22.660741 5.783704-29.961482-3.508148-70.257778-88.936296-175.502222-139.946667-288.711111-139.946667-202.808889 0-367.881481 165.072593-367.881481 367.881482s165.072593 367.881481 367.881481 367.881481 367.881481-165.072593 367.881481-367.881481c0-11.757037 9.576296-21.333333 21.333334-21.333334S922.548148 516.361481 922.548148 528.118519c0 55.371852-10.903704 109.226667-32.237037 159.857777-20.66963 48.924444-50.251852 92.823704-87.988148 130.465185-37.736296 37.736296-81.635556 67.318519-130.465185 87.988149-50.631111 21.428148-104.485926 32.237037-159.857778 32.237037z"  ></path><path d="M817.398519 308.242963c-11.757037 0-21.333333-9.576296-21.333334-21.333333V106.666667c0-11.757037 9.576296-21.333333 21.333334-21.333334s21.333333 9.576296 21.333333 21.333334v180.242963c0 11.757037-9.481481 21.333333-21.333333 21.333333z"  ></path><path d="M817.398519 308.242963H637.155556c-11.757037 0-21.333333-9.576296-21.333334-21.333333s9.576296-21.333333 21.333334-21.333334h180.242963c11.757037 0 21.333333 9.576296 21.333333 21.333334s-9.481481 21.333333-21.333333 21.333333z"  ></path></symbol><symbol id="icon-lianjiezhong" viewBox="0 0 1024 1024"><path d="M883.396923 298.141538a99.721846 99.721846 0 0 1-142.414769 0 103.187692 103.187692 0 0 1 0-144.423384 99.721846 99.721846 0 0 1 142.414769 0 103.187692 103.187692 0 0 1 0 144.423384zM285.144615 760.438154a87.276308 87.276308 0 0 0-124.652307 0 90.269538 90.269538 0 0 0 0 126.385231c34.422154 34.894769 90.230154 34.894769 124.652307 0a90.269538 90.269538 0 0 0 0-126.424616z m482.579693 108.307692a64.472615 64.472615 0 0 1 0-90.269538 62.345846 62.345846 0 0 1 89.00923 0c24.576 24.930462 24.576 65.378462 0 90.269538a62.345846 62.345846 0 0 1-89.00923 0zM294.006154 298.141538a103.187692 103.187692 0 0 0 0-144.423384 99.721846 99.721846 0 0 0-142.454154 0 103.187692 103.187692 0 0 0 0 144.423384 99.721846 99.721846 0 0 0 142.454154 0z m324.214154-196.01723c0 56.438154-45.095385 102.163692-100.745846 102.163692-55.611077 0-100.706462-45.725538-100.706462-102.163692C416.768 45.725538 461.863385 0 517.474462 0c55.650462 0 100.745846 45.725538 100.745846 102.124308zM517.474462 870.793846c-41.747692 0-75.539692 34.264615-75.539693 76.603077 0 42.299077 33.831385 76.603077 75.539693 76.603077 41.747692 0 75.539692-34.264615 75.539692-76.603077 0-42.299077-33.792-76.603077-75.539692-76.603077z m416.768-294.990769c-27.805538 0-50.333538-22.843077-50.333539-51.042462 0-28.199385 22.528-51.042462 50.333539-51.042461 27.844923 0 50.412308 22.843077 50.372923 51.042461 0 28.199385-22.567385 51.081846-50.372923 51.081847zM201.452308 524.8c0-56.398769-45.095385-102.124308-100.745846-102.124308C45.095385 422.596923 0 468.283077 0 524.760615c0 56.398769 45.095385 102.124308 100.706462 102.124308 55.650462 0 100.745846-45.686154 100.745846-102.124308z"  ></path></symbol><symbol id="icon-loading" viewBox="0 0 1024 1024"><path d="M563.2 819.2a102.4 102.4 0 1 1 0 204.8 102.4 102.4 0 0 1 0-204.8z m-320.4608-153.6a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m592.7936 25.6a102.4 102.4 0 1 1 0 204.8 102.4 102.4 0 0 1 0-204.8zM947.2 477.1328a76.8 76.8 0 1 1 0 153.6 76.8 76.8 0 0 1 0-153.6zM128 307.2a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m782.6432-40.6016a51.2 51.2 0 1 1 0 102.4 51.2 51.2 0 0 1 0-102.4zM409.6 0a153.6 153.6 0 1 1 0 307.2 153.6 153.6 0 0 1 0-307.2z m384 153.6a25.6 25.6 0 1 1 0 51.2 25.6 25.6 0 0 1 0-51.2z" fill="#555555" ></path></symbol><symbol id="icon-tupushujuyuan" viewBox="0 0 1024 1024"><path d="M851.456 588.288c-13.312 0-25.6 2.048-37.888 5.12l-90.112-155.648 55.296-31.744c18.944 17.92 44.032 29.184 72.192 29.184 57.344 0 103.936-46.592 103.936-103.936s-46.592-103.936-103.936-103.936c-57.344 0-103.936 46.592-103.936 103.936 0 5.12 0.512 10.24 1.536 15.36l-58.368 33.792-82.944-143.872c26.112-25.088 41.984-59.904 41.984-98.816 0-75.776-61.44-137.216-137.216-137.216s-137.216 61.44-137.216 137.216c0 38.912 15.872 73.728 41.984 98.816l-84.992 146.944-56.832-32.768c1.024-6.144 2.048-12.8 2.048-19.456 0-57.344-46.592-103.936-103.936-103.936-57.344 0-103.936 46.592-103.936 103.936s46.592 103.936 103.936 103.936c26.624 0 51.2-10.24 69.12-26.624l56.32 32.768-88.064 152.576c-11.776-3.584-24.576-5.12-37.888-5.12-75.776 0-137.216 61.44-137.216 137.216s61.44 137.216 137.216 137.216c64.512 0 118.272-44.544 133.12-103.936h173.056v61.44c-40.96 13.824-70.656 52.736-70.656 98.816 0 57.344 46.592 103.936 103.936 103.936s103.936-46.592 103.936-103.936c0-46.08-29.696-84.48-70.656-98.816v-61.44h173.056c14.848 59.904 69.12 103.936 133.12 103.936 75.776 0 137.216-61.44 137.216-137.216s-61.44-137.728-137.216-137.728z m-410.112-450.048c0-38.912 31.744-70.656 70.656-70.656s70.656 31.744 70.656 70.656c0 13.824-4.096 26.624-10.752 37.376-12.288 19.456-33.28 32.256-57.856 33.28h-5.12c-24.576-1.024-45.568-13.824-57.856-33.28-6.144-10.752-9.728-24.064-9.728-37.376z m32.768 132.096c11.776 3.584 24.576 5.12 37.888 5.12s25.6-2.048 37.888-5.12l82.944 143.872-124.416 72.192-118.784-68.608 84.48-147.456z m-301.568 526.336c-38.912 0-70.656-31.744-70.656-70.656 0-38.912 31.744-70.656 70.656-70.656h2.56c24.576 1.024 45.568 13.824 57.856 33.28 1.024 1.536 1.536 2.56 2.56 4.096 5.12 9.728 8.192 20.992 8.192 33.28 0 11.776-3.072 23.552-8.192 33.28-12.288 22.016-35.84 37.376-62.976 37.376z m133.12-103.936c-6.144-25.6-19.456-48.128-37.888-65.536l88.064-152.576 122.88 70.656v146.944h-173.056z m239.616-151.552l120.832-69.632 90.112 155.648c-18.432 17.408-31.744 39.936-37.888 65.536h-173.056v-151.552z m306.176 255.488c-27.136 0-50.688-15.36-62.464-37.376-5.12-9.728-8.192-21.504-8.192-33.28 0-12.288 3.072-23.552 8.192-33.28 0.512-1.536 1.536-3.072 2.56-4.096 12.288-19.456 33.28-32.768 57.856-33.28h2.56c38.912 0 70.656 31.744 70.656 70.656-0.512 38.912-32.256 70.656-71.168 70.656z"  ></path></symbol><symbol id="icon-jiedian" viewBox="0 0 1024 1024"><path d="M882.1914 744.849921c-60.501005 0-112.097749 38.645092-131.425292 92.560342H244.912146c-80.468136 0-145.955927-62.61964-145.955926-139.570043 0-77.000371 65.487791-139.570043 145.955926-139.570043h136.312143c19.497433 53.585462 70.934281 91.950735 131.205434 91.950735 60.241173 0 111.688014-38.375266 131.205434-91.950735h136.452052C914.210763 558.280171 1023.340425 453.92743 1023.340425 325.660102S914.210763 93.040033 780.077216 93.040033H273.093982c-19.197627-54.165089-70.944274-93.040033-131.595182-93.040033C64.508422 0 1.928757 62.569672 1.928757 139.560049c0 76.950403 62.579665 139.570043 139.570043 139.570043 60.640915 0 112.377569-38.894931 131.585189-93.040033h506.993227c80.468136 0 145.955927 62.61964 145.955927 139.570043 0 77.000371-65.487791 139.570043-145.955927 139.570043H644.414655c-18.887826-54.734722-70.924287-94.139324-131.974938-94.139325-61.090625 0-113.097105 39.394609-131.974938 94.139325H244.912146c-134.133547 0-243.263209 104.352741-243.263209 232.620069 0 128.267328 109.129663 232.620069 243.263209 232.620069h505.524174c19.057717 54.394941 70.9043 93.529717 131.75508 93.529717 76.950403 0 139.570043-62.61964 139.570043-139.570043 0.009994-77.000371-62.61964-139.580036-139.570043-139.580036zM141.428845 207.036558c-37.166045 0-67.376574-30.230515-67.376574-67.376573 0-37.166045 30.210528-67.376574 67.376574-67.376574 37.146058 0 67.376574 30.210528 67.376573 67.376574 0 37.146058-30.230515 67.376574-67.376573 67.376573z m371.000878 236.257725c37.146058 0 67.376574 30.210528 67.376574 67.376574 0 37.146058-30.230515 67.376574-67.376574 67.376573-37.166045 0-67.376574-30.230515-67.376574-67.376573 0.009994-37.176039 30.210528-67.376574 67.376574-67.376574z m369.761677 508.502254c-37.166045 0-67.376574-30.230515-67.376574-67.376573 0-37.166045 30.210528-67.376574 67.376574-67.376574 37.146058 0 67.376574 30.210528 67.376574 67.376574 0 37.146058-30.230515 67.376574-67.376574 67.376573z"  ></path></symbol><symbol id="icon-shitujiedianxianshi" viewBox="0 0 1367 1024"><path d="M1235.403267 512.03593a130.596433 130.596433 0 0 0-42.68749 7.796802l-193.295715-290.430872A149.113837 149.113837 0 1 0 724.647767 149.48464a151.777744 151.777744 0 0 0 37.229729 97.849864l-194.920048 357.873209a220.519548 220.519548 0 0 0-55.162374-8.511508 207.914718 207.914718 0 0 0-114.807909 34.046035L240.401393 443.683967a126.763005 126.763005 0 0 0-75.564005-182.380192 127.737605 127.737605 0 1 0 12.99467 239.816633l157.625345 188.422713A213.307506 213.307506 0 1 0 643.23616 643.282096l190.956674-350.856087a164.187654 164.187654 0 0 0 39.56877 6.172468 143.591102 143.591102 0 0 0 60.555162-12.99467l192.516034 288.026859a121.760057 121.760057 0 0 0-18.582377 64.973349 128.127445 128.127445 0 1 0 127.152844-126.568085zM129.621832 448.362048a68.157044 68.157044 0 1 1 68.157044-68.092071A68.157044 68.157044 0 0 1 129.621832 448.362048z m528.948039 365.670011a145.86517 145.86517 0 1 1-145.86517-145.86517 145.86517 145.86517 0 0 1 145.86517 145.86517z m215.12676-577.937944a87.389155 87.389155 0 1 1 87.389155-87.389155 87.389155 87.389155 0 0 1-87.389155 87.389155z m365.085251 474.305451a68.157044 68.157044 0 1 1 68.222017-68.416937 68.157044 68.157044 0 0 1-68.222017 68.157044z"  ></path></symbol><symbol id="icon-shituxianshiquanbujiedian" viewBox="0 0 1367 1024"><path d="M1235.403267 512.03593a130.596433 130.596433 0 0 0-42.68749 7.796802l-193.295715-290.430872A149.113837 149.113837 0 1 0 724.647767 149.48464a151.777744 151.777744 0 0 0 37.229729 97.849864l-194.920048 357.873209a220.519548 220.519548 0 0 0-55.162374-8.511508 207.914718 207.914718 0 0 0-114.807909 34.046035L240.401393 443.683967a126.763005 126.763005 0 0 0-75.564005-182.380192 127.737605 127.737605 0 1 0 12.99467 239.816633l157.625345 188.422713A213.307506 213.307506 0 1 0 643.23616 643.282096l190.956674-350.856087a164.187654 164.187654 0 0 0 39.56877 6.172468 143.591102 143.591102 0 0 0 60.555162-12.99467l192.516034 288.026859a121.760057 121.760057 0 0 0-18.582377 64.973349 128.127445 128.127445 0 1 0 127.152844-126.568085zM129.621832 448.362048a68.157044 68.157044 0 1 1 68.157044-68.092071A68.157044 68.157044 0 0 1 129.621832 448.362048z m528.948039 365.670011a145.86517 145.86517 0 1 1-145.86517-145.86517 145.86517 145.86517 0 0 1 145.86517 145.86517z m215.12676-577.937944a87.389155 87.389155 0 1 1 87.389155-87.389155 87.389155 87.389155 0 0 1-87.389155 87.389155z m365.085251 474.305451a68.157044 68.157044 0 1 1 68.222017-68.416937 68.157044 68.157044 0 0 1-68.222017 68.157044z"  ></path></symbol><symbol id="icon-suoxiao" viewBox="0 0 1024 1024"><path d="M768 448a320 320 0 1 0-320 320 320 320 0 0 0 320-320z m64 0A384 384 0 1 1 448 64a384 384 0 0 1 384 384z"  ></path><path d="M681.28 726.72a32 32 0 0 1 45.44-45.44l160 160a32 32 0 0 1-45.44 45.44zM288 480a32 32 0 0 1 0-64h320a32 32 0 0 1 0 64z"  ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1024 1024"><path d="M922.243 97.755c11.49 11.489 11.673 30.002 0.547 41.713l-0.547 0.562-109.119 109.1c57.22 78.348 42.673 195.388-35.778 273.839l-92.83 92.585c-11.572 11.54-30.264 11.653-41.97 0.253l-45.746-44.55-18.089 18.086a29.891 29.891 0 0 1-7.171 5.3l48.764 47.489c11.947 11.638 12.06 30.804 0.248 42.585l-95.875 95.629c-77.416 77.417-192.412 92.603-270.72 38.004L144.04 928.245c-11.676 11.673-30.606 11.673-42.282 0-11.49-11.489-11.673-30.002-0.547-41.713l0.547-0.562 109.677-109.657c-55.981-78.335-41.131-194.413 36.833-272.377l92.831-92.585c11.571-11.54 30.263-11.653 41.969-0.254l42.587 41.474a29.935 29.935 0 0 1 3.678-4.741l0.548-0.562 19.54-19.538-44.11-42.957c-11.828-11.522-12.057-30.422-0.6-42.23l0.351-0.355 95.875-95.63c76.927-76.926 190.96-92.408 269.23-39.03L879.961 97.755c11.676-11.673 30.606-11.673 42.282 0zM362.451 474.49l-71.916 71.727-1.884 1.911c-61.822 63.545-67.916 156.289-16.185 208.02C324.72 808.4 418.82 801.655 482.43 738.044l74.422-74.234-194.401-189.32z m129.807-5.04l-20.096 20.094a30.035 30.035 0 0 1-4.643 3.8l63.25 61.595a29.82 29.82 0 0 1 5.113-7.308l0.547-0.561 17.532-17.531-61.703-60.089z m260.889-198.691c-52.254-52.254-146.353-45.509-209.964 18.102l-74.422 74.234 194.4 189.322 71.939-71.75 1.862-1.888c61.822-63.545 67.916-156.29 16.185-208.02z" fill="#333333" ></path></symbol><symbol id="icon-xiantiao" viewBox="0 0 1024 1024"><path d="M827.076923 157.538462a39.384615 39.384615 0 1 1-14.375385 76.051692L233.590154 812.701538a39.384615 39.384615 0 1 1-22.291692-22.291692L790.409846 211.298462A39.384615 39.384615 0 0 1 827.076923 157.538462z" fill="#333333" ></path></symbol></svg>', c = (c = document.getElementsByTagName("script"))[c.length - 1].getAttribute("data-injectcss");
  if (c && !n.__iconfont__svg__cssinject__) {
    n.__iconfont__svg__cssinject__ = !0;
    try {
      document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
    } catch (h) {
      console && console.log(h);
    }
  }
  function l() {
    i || (i = !0, t());
  }
  s = function() {
    var h, f, d, g;
    (g = document.createElement("div")).innerHTML = r, r = null, (d = g.getElementsByTagName("svg")[0]) && (d.setAttribute("aria-hidden", "true"), d.style.position = "absolute", d.style.width = 0, d.style.height = 0, d.style.overflow = "hidden", h = d, (f = document.body).firstChild ? (g = h, (d = f.firstChild).parentNode.insertBefore(g, d)) : f.appendChild(h));
  }, document.addEventListener ? ~["complete", "loaded", "interactive"].indexOf(document.readyState) ? setTimeout(s, 0) : (e = function() {
    document.removeEventListener("DOMContentLoaded", e, !1), s();
  }, document.addEventListener("DOMContentLoaded", e, !1)) : document.attachEvent && (t = s, o = n.document, i = !1, (a = function() {
    try {
      o.documentElement.doScroll("left");
    } catch {
      return void setTimeout(a, 50);
    }
    l();
  })(), o.onreadystatechange = function() {
    o.readyState == "complete" && (o.onreadystatechange = null, l());
  });
}(window), xt = _t, wt = (n) => (n = n.replace("#", ""), n = n.replace("(", ""), n = n.replace(")", ""), n = n.replace(/,/, "-"), n), fe = (n) => {
  try {
    if ("touches" in n && n.touches || "targetTouches" in n && n.targetTouches)
      return !0;
  } catch {
  }
  return !1;
}, Pe = (n) => n instanceof TouchEvent ? {
  clientX: n.touches[0].clientX,
  clientY: n.touches[0].clientY
} : {
  clientX: n.clientX,
  clientY: n.clientY
}, u = (...n) => {
  typeof window < "u" && window.relationGraphDebug && console.log("[relation-graph:debug]", ...n);
}, Ae = (n, s, e) => n ? n.classList.contains(s) ? n : n.classList.contains(e) ? null : Ae(n.parentElement, s, e) : null, Ue = async (n) => new Promise((s, e) => {
  setTimeout(() => {
    s();
  }, n);
}), Y = (n) => typeof n == "string" ? Number.parseInt(n) : n, Lt = (n) => {
  console.log(
    `%c relation-graph${n ? "" : "/" + n} %c Version v${Je} %c More info: https://github.com/seeksdream/relation-graph %c`,
    "background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff",
    "background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff",
    "background:#fff ; padding: 1px; border-radius: 0 3px 3px 0;  color: #41b883",
    "background:transparent"
  ), gt || console.error(
    "[relation-graph]Please introduce component screenfull, for example:https://cdnjs.cloudflare.com/ajax/libs/screenfull.js/5.1.0/screenfull.min.js"
  ), mt || console.error(
    "[relation-graph]Please introduce component html2canvas, for example:https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"
  );
}, Ye = (n) => ({
  onNodeClick: n.onNodeClick,
  onNodeExpand: n.onNodeExpand,
  onNodeDragging: n.onNodeDragging,
  onNodeDragStart: n.onNodeDragStart,
  onNodeDragEnd: n.onNodeDragEnd,
  onNodeCollapse: n.onNodeCollapse,
  onLineClick: n.onLineClick,
  onImageDownload: n.onImageDownload,
  onCanvasDragEnd: n.onCanvasDragEnd,
  beforeChangeLayout: n.beforeChangeLayout,
  onContextmenu: n.onContextmenu,
  onCanvasClick: n.onCanvasClick,
  onCanvasSelectionEnd: n.onCanvasSelectionEnd,
  onImageSaveAsFile: n.onImageSaveAsFile,
  onZoomEnd: n.onZoomEnd
}), ke = (n, s) => {
  if (n.id === void 0)
    throw console.log("node must has id:", n), new Error("node must has option[id]:");
  const e = {
    id: n.id,
    text: n.text !== void 0 ? n.text : "",
    type: n.type !== void 0 ? n.type : "node",
    isShow: !0,
    isHide: n.isHide !== void 0 ? n.isHide : !1,
    expanded: n.expanded !== void 0 ? n.expanded : !0,
    junctionPoint: n.junctionPoint !== void 0 ? n.junctionPoint : void 0,
    alignItems: n.alignItems !== void 0 ? n.alignItems : void 0,
    selected: n.selected !== void 0 ? n.selected : !1,
    flashing: void 0,
    dragging: !1,
    styleClass: n.styleClass !== void 0 ? n.styleClass : "",
    className: n.className !== void 0 ? n.className : "",
    targetNodes: [],
    targetFrom: [],
    targetTo: [],
    nodeShape: n.nodeShape !== void 0 ? n.nodeShape : void 0,
    borderWidth: n.borderWidth !== void 0 ? n.borderWidth : void 0,
    borderColor: n.borderColor !== void 0 ? n.borderColor : void 0,
    fontColor: n.fontColor !== void 0 ? n.fontColor : void 0,
    color: n.color !== void 0 ? n.color : void 0,
    opacity: n.opacity !== void 0 ? n.opacity : 1,
    fixed: n.fixed !== void 0 ? n.fixed : !1,
    width: n.width !== void 0 ? n.width : void 0,
    height: n.height !== void 0 ? n.height : void 0,
    force_weight: n.force_weight,
    x: n.x !== void 0 ? n.x : 0,
    y: n.y !== void 0 ? n.y : 0,
    Fx: 0,
    Fy: 0,
    offset_x: n.offset_x !== void 0 ? n.offset_x : 0,
    offset_y: n.offset_y !== void 0 ? n.offset_y : 0,
    expandHolderPosition: n.expandHolderPosition !== void 0 ? n.expandHolderPosition : void 0,
    innerHTML: n.innerHTML !== void 0 ? n.innerHTML : void 0,
    html: n.html !== void 0 ? n.html : void 0,
    disableDefaultClickEffect: n.disableDefaultClickEffect !== void 0 ? n.disableDefaultClickEffect : void 0,
    disableDrag: n.disableDrag !== void 0 ? n.disableDrag : !1,
    singleNode: !1,
    data: n.data !== void 0 ? n.data : {}
  };
  return e.lot = {
    childs: [],
    parent: void 0,
    eached: !1,
    strength: 0
  }, e.el === void 0 && (e.el = {
    offsetWidth: 50,
    offsetHeight: 50
  }, s && (s.defaultNodeWidth && (e.el.offsetWidth = s.defaultNodeWidth + 16), s.defaultNodeHeight && (e.el.offsetHeight = s.defaultNodeHeight + 16))), e.width && (e.el.offsetWidth = e.width), e.height && (e.el.offsetHeight = e.height), e;
}, Ct = [
  "Fx",
  "Fy",
  "appended",
  "dragging",
  "el",
  "targetFrom",
  "targetNodes",
  "targetTo",
  "type",
  "lot",
  "seeks_id"
], Te = (n) => {
  if (!n)
    return;
  const s = {};
  return Object.keys(n).forEach((e) => {
    Ct.includes(e) || n[e] !== void 0 && (s[e] = n[e]);
  }), s;
}, bt = {
  json2Node: ke,
  transNodeToJson: Te
}, kt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json2Node: ke,
  transNodeToJson: Te,
  default: bt
}, Symbol.toStringTag, { value: "Module" })), be = (n) => {
  if (n.from === void 0)
    throw console.log("error,line must has option[from]:", n), new Error("error,line must has option[from]:");
  if (n.to === void 0)
    throw console.log("error,line must has option[to]:", n), new Error("error,line must has option[to]:");
  if (typeof n.from != "string")
    throw console.log("error line from, must be string:", n), new TypeError("error line from, must be string:");
  if (typeof n.to != "string")
    throw console.log("error line to, must be string:", n), new TypeError("error line to, must be string:");
  const s = {
    from: n.from,
    to: n.to,
    text: n.text !== void 0 ? n.text : "",
    textOffset_x: n.textOffset_x !== void 0 ? n.textOffset_x : void 0,
    textOffset_y: n.textOffset_y !== void 0 ? n.textOffset_y : void 0,
    color: n.color !== void 0 ? n.color : void 0,
    opacity: n.opacity !== void 0 ? n.opacity : 1,
    fontColor: n.fontColor !== void 0 ? n.fontColor : void 0,
    lineWidth: n.lineWidth !== void 0 ? n.lineWidth : void 0,
    lineShape: n.lineShape !== void 0 ? n.lineShape : void 0,
    styleClass: n.styleClass !== void 0 ? n.styleClass : void 0,
    className: n.className !== void 0 ? n.className : void 0,
    isHide: n.isHide !== void 0 ? n.isHide : !1,
    arrow: n.arrow !== void 0 ? n.arrow : void 0,
    animation: n.animation !== void 0 ? n.animation : 0,
    dashType: n.dashType !== void 0 ? n.dashType : 0,
    disableDefaultClickEffect: n.disableDefaultClickEffect !== void 0 ? n.disableDefaultClickEffect : !1,
    showStartArrow: n.showStartArrow !== void 0 ? n.showStartArrow : !1,
    showEndArrow: n.showEndArrow !== void 0 ? n.showEndArrow : !0,
    useTextPath: n.useTextPath !== void 0 ? n.useTextPath : void 0,
    placeText: n.placeText !== void 0 ? n.placeText : void 0,
    forDisplayOnly: n.forDisplayOnly || n.from === n.to,
    fromJunctionPoint: n.fromJunctionPoint,
    toJunctionPoint: n.toJunctionPoint,
    force_elastic: n.force_elastic,
    polyLineStartDistance: n.polyLineStartDistance,
    isHideArrow: n.isHideArrow !== void 0 ? n.isHideArrow : void 0,
    hidden: !1,
    lineDirection: n.lineDirection !== void 0 ? n.lineDirection : void 0,
    reverseText: n.reverseText !== void 0 ? n.reverseText : void 0,
    data: n.data !== void 0 ? n.data : {}
  };
  return s.isHideArrow && (s.showEndArrow = !1, s.isHideArrow = !1), s;
}, Mt = ["arrow", "id", "reverseText", "isReverse"], Ie = (n, s) => {
  !n || n.relations.forEach((e) => {
    const t = {};
    Object.keys(e).forEach((o) => {
      Mt.includes(o) || e[o] !== void 0 && (t[o] = e[o]);
    }), s.push(t);
  });
}, se = {
  border: "border",
  ltrb: "ltrb",
  tb: "tb",
  lr: "lr",
  left: "left",
  right: "right",
  top: "top",
  bottom: "bottom"
}, St = {
  json2Line: be,
  transLinkToJson: Ie
}, Ot = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json2Line: be,
  transLinkToJson: Ie,
  JUNCTION_POINT_STYLE: se,
  default: St
}, Symbol.toStringTag, { value: "Module" })), w = {
  analysisNodes(n, s, e, t) {
    s.length > t.max_length && (t.max_length = s.length), e > t.max_deep && (t.max_deep = e);
    const o = {
      level: e,
      all_size: s.length,
      all_strength: 0
    };
    e === 0 && s.forEach((a) => {
      a.lot.parent = void 0;
    });
    const i = [];
    s.forEach((a) => {
      n.push(a), a.targetNodes && a.targetNodes.forEach((r) => {
        n.includes(r) || (n.push(r), r.lot.parent = a, i.push(r));
      });
    }), o.all_strength > t.max_strength && (t.max_strength = o.all_strength), i.length > 0 && w.analysisNodes(n, i, e + 1, t);
  },
  analysisNodes4Didirectional(n, s, e, t, o) {
    s.length > t.max_length && (t.max_length = s.length), e > t.max_deep && (t.max_deep = e);
    const i = {
      level: e,
      all_size: s.length,
      all_strength: 0
    }, a = [];
    s.forEach((c) => {
      c.lot || (c.lot = { childs: [] }), c.lot.eached = !0, c.lot.subling = i, c.lot.level = e, n.push(c);
    });
    let r = 0;
    s.forEach((c) => {
      let l = 0;
      if (o === 0) {
        let h = 0;
        c.targetNodes.forEach((f) => {
          f.lot || (f.lot = { eached: !1, childs: [] }), f.lot.eached || (w.isAllowShowNode(f) ? (f.lot.eached = !0, f.lot.parent = c, f.lot.index_of_parent = h++, c.lot.childs.push(f), a.push(f), l++) : c.lot.childs.push(f));
        });
      } else if (o === -1) {
        let h = 0;
        c.targetFrom.forEach((f) => {
          f.lot || (f.lot = { eached: !1, childs: [] }), f.lot.eached || (w.isAllowShowNode(f) ? (f.lot.eached = !0, f.lot.parent = c, f.lot.index_of_parent = h++, c.lot.childs.push(f), a.push(f), l++) : c.lot.childs.push(f));
        });
      } else {
        let h = 0;
        c.targetTo.forEach((f) => {
          f.lot || (f.lot = { eached: !1, childs: [] }), f.lot.eached || (w.isAllowShowNode(f) ? (f.lot.eached = !0, f.lot.parent = c, f.lot.index_of_parent = h++, c.lot.childs.push(f), a.push(f), l++) : c.lot.childs.push(f));
        });
      }
      c.lot.strength = l > 0 ? l : 1, i.all_strength += c.lot.strength, c.lot.strength_plus = i.all_strength, c.lot.index_of_level = r, c.lot.childs_size = l, r++;
    }), i.all_strength > t.max_strength && (t.max_strength = i.all_strength), a.length > 0 ? w.analysisNodes4Didirectional(n, a, e + (o === -1 ? -1 : 1), t, o) : (n.forEach((c) => {
      c.lot.childs_size > 0 && (c.lot.strengthWithChilds = 0);
    }), n.forEach((c) => {
      c.lot.childs_size === 0 && (c.lot.strengthWithChilds = 1, w.conductStrengthToParents(c));
    }), w.analysisDataTree([n[0]], 0, o));
  },
  conductStrengthToParents(n) {
    n.lot.parent && Math.abs(n.lot.level) - 1 === Math.abs(n.lot.parent.lot.level) && (n.lot.parent.lot.strengthWithChilds += 1, w.conductStrengthToParents(n.lot.parent));
  },
  analysisDataTree(n, s, e = 1) {
    const t = [];
    let o = 0;
    n.forEach((i) => {
      (i.lot.level === 0 || e === (i.lot.level < 0 ? -1 : 1)) && (i.lot.childs_size > 0 && i.lot.childs.forEach((a) => {
        t.push(a);
      }), i.lot.parent && o < i.lot.parent.lot.strengthWithChilds_from && (o = i.lot.parent.lot.strengthWithChilds_from), i.lot.strengthWithChilds_from = o, o += i.lot.strengthWithChilds);
    }), t.length > 0 && w.analysisDataTree(t, s + e, e);
  },
  conductStrengthToParents4Folder(n) {
    n.lot.parent && (n.lot.parent.lot.strengthWithChilds += 1, w.conductStrengthToParents4Folder(n.lot.parent));
  },
  analysisDataFolder(n, s, e) {
    const t = [];
    let o = 0, i = null;
    n.forEach((a) => {
      if (a.lot.level === 0 || e === (a.lot.level < 0 ? -1 : 1)) {
        a.lot.childs_size > 0 && a.lot.childs.forEach((c) => {
          t.push(c);
        });
        let r = 0;
        a.lot.parent && (i ? i !== a.lot.parent && (o += 1, i = a.lot.parent) : (r = a.lot.parent.lot.strengthWithChilds_from, o = r, i = a.lot.parent)), a.lot.strengthWithChilds_from = 1 + o, o += a.lot.strengthWithChilds;
      }
    }), t.length > 0 && w.analysisDataFolder(t, s + e, e);
  },
  isAllowShowNode(n, s = 0) {
    return s > 15 ? !0 : (!n.lot || !n.lot.parent || w.isAllowShowNode(n.lot.parent, s + 1) && n.lot.parent.expanded !== !1) && n.isShow && n.isHide !== !0;
  },
  getNodeWidth(n, s) {
    return n.el.offsetWidth || n.width || s && s.defaultNodeWidth || 50;
  },
  getNodeHeight(n, s) {
    return n.el.offsetHeight || n.height || s && s.defaultNodeHeight || 50;
  },
  getNodeXByLotX(n, s) {
    return (s.offset_x || 0) + this.getNodeXByCenterX(n, s, s.lot.x || 0);
  },
  getNodeYByLotY(n, s) {
    return (s.offset_y || 0) + this.getNodeYByCenterY(n, s, s.lot.y || 0);
  },
  getNodeXByCenterX(n, s, e) {
    return s.alignItems === "right" ? e - w.getNodeWidth(s, n) : s.alignItems === "left" ? e : e - w.getNodeWidth(s, n) / 2;
  },
  getNodeYByCenterY(n, s, e) {
    return s.alignItems === "top" ? e : s.alignItems === "bottom" ? e - w.getNodeHeight(s, n) : e - w.getNodeHeight(s, n) / 2;
  },
  getCenterXByNodeX(n, s, e) {
    return e + w.getNodeHeight(s, n) / 2;
  },
  getCenterYByNodeY(n, s, e) {
    return e + w.getNodeHeight(s, n) / 2;
  },
  getLotXByNodeX(n, s) {
    const e = s.offset_x || 0;
    return this.getCenterXByNodeX(n, s, s.x || 0) - e;
  },
  getLotYByNodeY(n, s) {
    const e = s.offset_y || 0;
    return this.getCenterYByNodeY(n, s, s.y || 0) - e;
  },
  isRectangleOverlap(n, s) {
    const e = n.x + H, t = s.x + H, o = n.el.offsetWidth - H * 2, i = s.el.offsetWidth - H * 2, a = n.y + H, r = s.y + H, c = n.el.offsetHeight - H * 2, l = s.el.offsetHeight - H * 2;
    return !(t >= e + o || t + i <= e || r >= a + c || r + l <= a);
  },
  isXOverlap(n, s, e, t) {
    return !(s >= n + e || s + t <= n);
  },
  isYOverlap(n, s, e, t) {
    return !(s >= n + e || s + t <= n);
  },
  shapesOverlap(n, s, e = 1, t = 1) {
    return this.isRectangleOverlap(n, s);
  },
  getNoOverlapLimitedPosition(n, s, e, t) {
    const o = n.x + H, i = n.y + H, a = s + H, r = t.x + H, c = n.el.offsetWidth - H * 2, l = t.el.offsetWidth - H * 2, h = e + H, f = t.y + H, d = n.el.offsetHeight - H * 2, g = t.el.offsetHeight - H * 2;
    let p = n.x, m = n.y;
    const v = this.isXOverlap(o, r, c, l), x = this.isYOverlap(i, f, d, g);
    return v ? h < f ? (p = s, m = f - d - H) : h > f && (p = s, m = f + g - H) : x && (a < r ? (p = r - c - H, m = e) : a > r && (p = r + l - H, m = e)), { x: p, y: m };
  },
  flatNodeData(n, s, e, t) {
    n.forEach((o) => {
      e.push(o), s && t.push({
        from: s.id,
        to: o.id
      });
      const i = o.childs || o.children;
      i && i.length > 0 && this.flatNodeData(i, o, e, t);
    });
  }
}, H = 8, q = w, Et = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  RGNodesAnalytic: w,
  default: q
}, Symbol.toStringTag, { value: "Module" }));
class zt {
  constructor(s, e) {
    _(this, "graphOptions");
    _(this, "layoutOptions");
    _(this, "allNodes", []);
    _(this, "isMainLayouer", !0);
    _(this, "requireLinks", !1);
    _(this, "allLinks", []);
    _(this, "rootNode");
    _(this, "currentAnimationStep", 1);
    _(this, "allAnimationStep", 30);
    this.layoutOptions = s, this.graphOptions = e;
  }
  setLinks(s) {
    u("setLinks:", s.length), this.allLinks = s;
  }
  refresh() {
    this.placeNodes(this.allNodes, this.rootNode);
  }
  placeNodes(s, e) {
    this.allNodes = s, this.rootNode = e;
  }
  snapshotBeforeAnimation() {
    this.allNodes.forEach((s) => {
      !q.isAllowShowNode(s) || (s.lot.to_x = q.getNodeXByLotX(this.graphOptions, s), s.lot.to_y = q.getNodeYByLotY(this.graphOptions, s), s.lot.from_x = s.x || 0, s.lot.from_y = s.y || 0, s.lot.placed = !0);
    });
  }
  async animationLayout(s = !0) {
    s && this.snapshotBeforeAnimation();
    const e = this.rootNode;
    e && u("debug0910:create rootNode coordinates:2.1", e.x, e.y), this.currentAnimationStep = 1, this.allAnimationStep = 10, u("[LayoutAnimationEffect]start play...");
    let t = !1;
    return new Promise((o, i) => {
      this.playAnimation(() => {
        t || (t = !0, u("[LayoutAnimationEffect]played!"), this.allNodes.forEach((a) => {
          !q.isAllowShowNode(a) || (a.lot.from_x = a.x, a.lot.from_y = a.y, a.x = a.lot.to_x, a.y = a.lot.to_y);
        }), o());
      });
    });
  }
  playAnimation(s) {
    if (u("[LayoutAnimationEffect]", this.currentAnimationStep, this.allAnimationStep), this.currentAnimationStep > this.allAnimationStep) {
      s();
      return;
    }
    this.allNodes.forEach((e) => {
      if (!e.lot.placed)
        return;
      const { from_x: t, from_y: o, to_x: i, to_y: a } = e.lot;
      if (t !== void 0 && o !== void 0 && i !== void 0 && a !== void 0) {
        const r = (i - t) / this.allAnimationStep, c = (a - o) / this.allAnimationStep, l = Math.floor(t + this.currentAnimationStep * r), h = Math.floor(o + this.currentAnimationStep * c);
        (e.x !== l || e.y !== h) && (e.x = l, e.y = h);
      }
    }), this.currentAnimationStep++, requestAnimationFrame(this.playAnimation.bind(this, s));
  }
}
const we = zt;
class Nt extends we {
  constructor(e, t) {
    super(e, t);
    _(this, "enableGatherNodes", !1);
    _(this, "layoutOptions");
    _(this, "levelDistanceArr", []);
    this.layoutOptions = e, u("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((o) => Number.parseInt(o)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.enableGatherNodes = this.layoutOptions.enableGatherNodes;
  }
  async refresh() {
    u("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), await this.placeNodes(this.allNodes, this.rootNode);
  }
  analysisNodes4Didirectional(e, t, o, i, a) {
    u(`${a} level ${o} size: ${t.length}`), t.length > i.max_length && (i.max_length = t.length), o > i.max_deep && (i.max_deep = o);
    const r = {
      level: o,
      all_size: t.length,
      all_strength: 0
    }, c = [];
    t.forEach((h) => {
      h.lot || (h.lot = { childs: [] }), h.lot.eached = !0, h.lot.subling = r, h.lot.level = o, e.push(h);
    });
    let l = 0;
    t.forEach((h) => {
      let f = 0, d = a === -1 ? h.targetFrom : h.targetTo;
      o !== 0 && (d = h.targetNodes);
      let g = 0;
      d.forEach((p) => {
        p.lot || (p.lot = { eached: !1, childs: [] }), p.lot.eached || (p.lot.parent = h, w.isAllowShowNode(p) ? (p.lot.eached = !0, p.lot.index_of_parent = g++, h.lot.childs.push(p), c.push(p), f++) : h.lot.childs.push(p));
      }), h.lot.strength = f > 0 ? f : 1, r.all_strength += h.lot.strength, h.lot.strength_plus = r.all_strength, h.lot.index_of_level = l, h.lot.childs_size = f, l++;
    }), r.all_strength > i.max_strength && (i.max_strength = r.all_strength), c.length > 0 ? this.analysisNodes4Didirectional(e, c, o + a, i, a) : (e.forEach((h) => {
      h.lot.childs_size > 0 && (h.lot.strengthWithChilds = 0);
    }), e.forEach((h) => {
      h.lot.childs_size === 0 && (h.lot.strengthWithChilds = 1, w.conductStrengthToParents(h));
    }), w.analysisDataTree([e[0]], 0, a));
  }
  async placeNodes(e, t) {
    if (u("SeeksBidirectionalTreeLayouter:placeNodes"), t)
      u("layout by root:", t);
    else {
      console.error("root is null");
      return;
    }
    this.rootNode = t, this.allNodes = e, u("allNodes:", e.length), e.forEach((a) => {
      a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.strengthWithChilds_from = 0, a.lot.strengthWithChilds = 0, a.lot.placed = !1;
    });
    let o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    w.analysisNodes(o, [this.rootNode], 0, i), o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, this.analysisNodes4Didirectional(o, [this.rootNode], 0, i, -1), this.placeNodesPosition(this.rootNode, o, i), o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, this.analysisNodes4Didirectional(o, [this.rootNode], 0, i, 1), this.placeNodesPosition(this.rootNode, o, i), u("allNodes:", o.length), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout(), u("create rootNode coordinates:3", t.x, t.y)) : (this.allNodes.forEach((a) => {
      if (a.fixed === !0) {
        a.lot.placed = !0;
        return;
      }
      !w.isAllowShowNode(a) || (Number.isNaN(a.lot.x) && (u("bad lot x:", a.text, a.lot.x), a.lot.x = 0), Number.isNaN(a.lot.y) && (u("bad lot y:", a.text, a.lot.y), a.lot.y = 0), a.x = w.getNodeXByLotX(this.graphOptions, a), a.y = w.getNodeYByLotY(this.graphOptions, a), a.lot.placed = !0);
    }), u("create rootNode coordinates:1", t.x, t.y));
  }
  placeNodesPosition(e, t, o) {
    if (e.fixed !== !0) {
      const i = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      e.lot.x = i, e.lot.y = a, this.layoutOptions.fixedRootNode ? (e.lot.x = w.getLotXByNodeX(this.graphOptions, e), e.lot.y = w.getLotYByNodeY(this.graphOptions, e)) : this.layoutOptions.from === "top" ? e.lot.y -= this.graphOptions.viewSize.height / 2 - 100 : this.layoutOptions.from === "bottom" ? e.lot.y += this.graphOptions.viewSize.height / 2 - 200 : this.layoutOptions.from === "right" ? e.lot.x += this.graphOptions.viewSize.width / 2 - 100 : e.lot.x -= this.graphOptions.viewSize.width / 2 - 100, u("debug0910:Graph center:", e.lot.x, e.lot.y, { _center_offset_x: i, _center_offset_y: a });
    } else
      e.origin_x === void 0 && (e.origin_x = e.x, e.origin_y = e.y), e.lot.x = e.origin_x, e.lot.y = e.origin_y, u("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", e.text, e.x, e.y);
    e.lot.placed = !0, this.placeRelativePosition(e, t, o);
  }
  placeRelativePosition(e, t, o) {
    const i = this.graphOptions.viewSize;
    if (this.layoutOptions.from === "left" || this.layoutOptions.from === "right") {
      const a = Y(this.layoutOptions.min_per_height) || 80, r = Y(this.layoutOptions.max_per_height) || 400, c = Y(this.layoutOptions.min_per_width) || 430, l = Y(this.layoutOptions.max_per_width) || 650;
      let h = Math.round((i.width - 10) / (o.max_deep + 2));
      h < c && (h = c), h > l && (h = l);
      let f = Math.round(i.height / (o.max_strength + 1));
      f < a && (f = a), f > r && (f = r), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "right" ? d.lot.x = e.lot.x - this.getLevelDistance(d, d.lot.subling.level, h) : d.lot.x = e.lot.x + this.getLevelDistance(d, d.lot.subling.level, h));
      }), t.forEach((d) => {
        d.fixed !== !0 && d.lot.level !== 0 && (this.layoutOptions.layoutExpansionDirection === "left" || this.layoutOptions.layoutExpansionDirection === "top" ? d.lot.y = e.lot.y - f * d.lot.strengthWithChilds_from : this.layoutOptions.layoutExpansionDirection === "right" || this.layoutOptions.layoutExpansionDirection === "bottom" ? d.lot.y = e.lot.y + f * d.lot.strengthWithChilds_from : d.lot.y = e.lot.y + f * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      }), this.gatherNodes(t, "h", f);
    } else {
      const a = Y(this.layoutOptions.min_per_height) || 350, r = Y(this.layoutOptions.max_per_height) || 400, c = Y(this.layoutOptions.min_per_width) || 250, l = Y(this.layoutOptions.max_per_width) || 500;
      let h = Math.round((i.width - 10) / (o.max_strength + 2));
      h < c && (h = c), h > l && (h = l);
      let f = Math.round((i.height - 10) / (o.max_deep + 2));
      f < a && (f = a), f > r && (f = r), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "bottom" ? d.lot.y = e.lot.y - this.getLevelDistance(d, d.lot.subling.level, f) : d.lot.y = e.lot.y + this.getLevelDistance(d, d.lot.subling.level, f));
      }), t.forEach((d) => {
        d.fixed !== !0 && d.lot.level !== 0 && (this.layoutOptions.layoutExpansionDirection === "left" || this.layoutOptions.layoutExpansionDirection === "top" ? d.lot.x = e.lot.x - h * d.lot.strengthWithChilds_from : this.layoutOptions.layoutExpansionDirection === "right" || this.layoutOptions.layoutExpansionDirection === "bottom" ? d.lot.x = e.lot.x + h * d.lot.strengthWithChilds_from : d.lot.x = e.lot.x + h * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      }), this.gatherNodes(t, "v", h);
    }
  }
  gatherNodes(e, t, o) {
    if (!this.enableGatherNodes)
      return;
    const i = {};
    e.forEach((a) => {
      const r = a.lot.level + "";
      i[r] || (i[r] = []), i[r].push(a), a.lot.movedNodeSizeBefore = 1, a.lot.movedNodeSizeAfter = 1;
    }), e.forEach((a) => {
      if (a.fixed !== !0 && a.lot.level !== 0) {
        const r = a.lot.level + "", c = i[r];
        if (a.lot.strengthWithChilds === 1 && a.lot.childs_size <= 1) {
          const l = this.getBloomingNearByParent(a, a.lot.parent, c, t);
          l && (t === "h" ? a.lot.y - l.lot.y > 0 ? (a.lot.y = l.lot.y + o * l.lot.movedNodeSizeAfter, l.lot.movedNodeSizeAfter++) : (a.lot.y = l.lot.y - o * l.lot.movedNodeSizeBefore, l.lot.movedNodeSizeBefore++) : a.lot.x - l.lot.x > 0 ? (a.lot.x = l.lot.x + o * l.lot.movedNodeSizeAfter, l.lot.movedNodeSizeAfter++) : (a.lot.x = l.lot.x - o * l.lot.movedNodeSizeBefore, l.lot.movedNodeSizeBefore++));
        }
      }
    });
  }
  getBloomingNearByParent(e, t, o, i) {
    let a = 9999, r;
    for (const c of o)
      if (c.lot.childs_size > 1 && c.lot.parent === t) {
        const l = i === "h" ? c.lot.y - t.lot.y : c.lot.x - t.lot.x;
        Math.abs(l) < a && (a = Math.abs(l), r = c);
      }
    if (r && r !== e)
      return r;
  }
  getLevelDistance(e, t, o) {
    const i = Math.abs(t);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let r = 0; r < i; r++) {
        const c = r >= this.levelDistanceArr.length ? this.levelDistanceArr[this.levelDistanceArr.length - 1] : this.levelDistanceArr[r];
        a += c;
      }
      return t > 0 ? a : a * -1;
    } else
      return t * o;
  }
}
const Ke = Nt;
function Pt(n, s, e, t, o, i, a, r, c) {
  const l = o - n, h = i - s, f = Math.sqrt(l * l + h * h), d = c * h / f, g = -(c * l) / f, p = n + d, m = s + g, v = n - e / 2, x = n + e / 2, T = s - t / 2, E = s + t / 2;
  let B = [];
  if (l !== 0) {
    let I = (v - p) / l, k = m + I * h;
    k >= T && k <= E && B.push({ x: v, y: k });
    let z = (x - p) / l, N = m + z * h;
    N >= T && N <= E && B.push({ x, y: N });
  }
  if (h !== 0) {
    let I = (T - m) / h, k = p + I * l;
    k >= v && k <= x && B.push({ x: k, y: T });
    let z = (E - m) / h, N = p + z * l;
    N >= v && N <= x && B.push({ x: N, y: E });
  }
  let R = null, V = 1 / 0;
  return B.forEach((I) => {
    const k = Math.sqrt((I.x - o) ** 2 + (I.y - i) ** 2);
    k < V && (V = k, R = I);
  }), R;
}
const Qe = {
  getRectPoint(n, s, e, t, o, i, a, r, c = !1, l = 1, h = 1, f = 14) {
    const d = h - (l - 1) / 2, g = n + o / 2, p = s + i / 2, m = e + a / 2, v = t + r / 2;
    if (l > 1) {
      const z = f * d, N = Pt(
        g,
        p,
        o,
        i,
        m,
        v,
        a,
        r,
        z
      );
      if (N)
        return N;
    }
    const x = g < m ? 1 : -1, T = p < v ? 1 : -1;
    if (v === p)
      return { x: g + x * o / 2, y: p };
    const E = Math.abs((m - g) / (v - p)), B = o / i;
    let R = 0, V = 0;
    E < B ? (R = x * i / 2 * E + T * B, V = T * i / 2) : (R = x * o / 2, V = T * o / 2 / E + x * B);
    const I = g + R, k = p + V;
    return { x: I, y: k };
  },
  getRectPointBasic(n, s, e, t, o, i, a, r) {
    const c = n + o / 2, l = s + i / 2, h = e + a / 2, f = t + r / 2;
    let d = f === l ? 0 : (h - c) / (f - l);
    d === 0 && (d = (h - c) / (f - l + 1));
    const g = o / r;
    let p = 0, m = 0, v = "1";
    return -1 * g < d && d < g ? (v = "2", l < f ? (p = i / 2 * d, m = i / 2) : (p = -1 * i / 2 * d, m = -1 * i / 2)) : (c < h ? (p = 1 * o / 2, m = 1 * o / 2 / d) : (p = -1 * o / 2, m = -1 * o / 2 / d), v = "3"), { x: c + p, y: l + m, _case: v };
  },
  getRectJoinPoint(n, s, e, t, o, i, a, r) {
    const c = n + o / 2, l = s + i / 2, h = e + a / 2, f = t + r / 2, d = Math.round(Math.atan2(f - l, h - c) * 180 / 3.14) + 135;
    return d >= 0 && d < 90 ? { x: n + o / 2, y: s - 5 } : d >= 90 && d < 180 ? { x: n + o + 5, y: s + i / 2 } : d >= 180 && d < 270 ? { x: n + o / 2, y: s + i + 5 } : { x: n - 5, y: s + i / 2 };
  },
  getRectHJoinPoint(n, s, e, t, o, i, a) {
    const r = i / 2;
    return n + o < e ? { x: n + o + 5, y: s + r } : n + o < e + a ? { x: n - 5, y: s + r } : { x: n - 5, y: s + r };
  },
  getRectLeftJoinPoint(n, s, e, t, o, i, a) {
    const r = i / 2;
    return { x: n, y: s + r };
  },
  getRectRightJoinPoint(n, s, e, t, o, i, a) {
    const r = i / 2;
    return { x: n + o, y: s + r };
  },
  getRectTopJoinPoint(n, s, e, t, o, i, a) {
    return { x: n + o / 2, y: s };
  },
  getRectBottomJoinPoint(n, s, e, t, o, i, a, r, c, l, h, f, d = 14, g) {
    return g !== void 0 ? { x: n + g, y: s + i } : { x: n + o / 2, y: s + i };
  },
  getRectVJoinPoint(n, s, e, t, o, i, a, r) {
    const c = o / 2;
    return s + i < t ? { y: s + i + 5, x: n + c } : s + i < t + r ? { y: s - 5, x: n + c } : { y: s - 5, x: n + c };
  },
  getBorderPoint(n, s, e, t, o, i, a, r, c) {
    return c === 0 ? this.getCirclePoint(n, s, e, t, o, i, a, r) : this.getRectPoint(n, s, e, t, o, i, a, r);
  },
  getBorderPoint4MultiLine(n, s, e, t, o, i, a, r, c, l, h, f, d = 14) {
    return c === 0 ? this.getCirclePoint4MultiLine(n, s, e, t, o, i, a, r, l, h, f, d) : this.getRectPoint(n, s, e, t, o, i, a, r, l, h, f, d);
  },
  getCirclePoint(n, s, e, t, o, i, a, r) {
    const c = e + a / 2, l = t + r / 2, h = n + o / 2, f = s + i / 2, d = c - h;
    if (d === 0)
      return { x: h, y: f - i / 2 * (l < f ? 1 : -1) };
    const p = (l - f) / d, m = Math.sqrt(1 / (1 / (o / 2) ** 2 + p ** 2 / (i / 2) ** 2)) * (c < h ? 1 : -1), v = p * m;
    return { x: h - m, y: f - v };
  },
  getCirclePoint4MultiLine(n, s, e, t, o, i, a, r, c, l, h, f, d = 0) {
    let g = e + a / 2;
    const p = t + r / 2;
    let m = n + o / 2;
    const v = s + i / 2;
    let x = g - m;
    x > -1 && x < 1 && (g = g - 2, m = m + 2, x = -4);
    const B = (h - (l - 1) / 2) * f, R = p - v, V = Math.sqrt(x ** 2 + R ** 2) * B / x, I = R / x, k = o / 2, z = i / 2, N = m < g ? -1 : 1, $ = (-1 * k ** 2 * I * V + k * z * Math.sqrt(Math.abs(z ** 2 + I ** 2 * k ** 2 - V ** 2)) / N) / (z ** 2 + k ** 2 * I ** 2), D = I * $ + V;
    return { x: m - $, y: v - D };
  },
  getCirclePointBasic(n, s, e, t, o, i, a, r, c) {
    const l = n + o / 2, h = s + i / 2, f = e + a / 2, d = t + r / 2, g = f - l, p = d - h, m = Math.sqrt(g * g + p * p), v = m - c, x = v * g / m * -1, T = v * p / m * -1;
    return { x: f + x, y: d + T };
  },
  getCirclePointPlus(n, s, e, t, o, i, a, r) {
    const c = n + o / 2, l = s + i / 2, h = e + a / 2, f = t + r / 2, d = h - c, g = f - l, p = Math.sqrt(d * d + g * g), m = (p - o / 2) * d / p * -1, v = (p - i / 2) * g / p * -1;
    return { x: h + m, y: f + v };
  },
  getOvalPoint(n, s, e, t, o, i = 180) {
    const a = t * (360 / o), r = (180 - i + a) * Math.PI / 180;
    return {
      x: n + e * Math.sin(r),
      y: s + e * Math.cos(r) * -1
    };
  },
  getAngleType(n, s) {
    if (n >= 0 && s >= 0)
      return 1;
    if (n < 0 && s >= 0)
      return 2;
    if (n < 0 && s < 0)
      return 3;
    if (n >= 0 && s < 0)
      return 4;
  },
  getTextAngle(n, s, e, t) {
    let o = Math.atan2(t - s, e - n) * 180 / Math.PI;
    return o < 0 && (o += 360), o > 90 && o <= 270 && (o += 180), o >= 360 && (o -= 360), Math.round(o);
  },
  getTreePointFromTop(n, s, e, t, o, i) {
    return n ? {
      x: n - 300 + Math.max(600 / ((o === 1 ? 2 : o) - 1), 80) * t,
      y: s + e
    } : {
      x: (i.canvas_width - i.node_width) / 2,
      y: (i.canvas_height - i.node_height) / 2 - 200
    };
  },
  getTreePointFromRight(n, s, e, t, o, i) {
    return n ? {
      x: n - e,
      y: s - 200 + Math.max(400 / ((o === 1 ? 2 : o) - 1), 80) * t
    } : {
      x: (i.canvas_width - i.node_width) / 2 + 300,
      y: (i.canvas_height - i.node_height) / 2
    };
  },
  getTreePointFromBottom(n, s, e, t, o, i) {
    return n ? {
      x: n - 300 + Math.max(600 / ((o === 1 ? 2 : o) - 1), 80) * t,
      y: s - e
    } : {
      x: (i.canvas_width - i.node_width) / 2,
      y: (i.canvas_height - i.node_height) / 2 + 200
    };
  },
  getTreePointFromLeft(n, s, e, t, o, i) {
    return n ? {
      x: n + e,
      y: s - 200 + Math.max(400 / ((o === 1 ? 2 : o) - 1), 80) * t
    } : {
      x: (i.canvas_width - i.node_width) / 2 - 300,
      y: (i.canvas_height - i.node_height) / 2
    };
  }
}, j = Qe;
class $t extends we {
  constructor(e, t, o) {
    super(e, t);
    _(this, "layoutOptions");
    _(this, "fastStart", !1);
    _(this, "maxLayoutTimes", 300);
    _(this, "byNode", !0);
    _(this, "byLine", !0);
    _(this, "lockX", !1);
    _(this, "lockY", !1);
    _(this, "force_node_repulsion", 1);
    _(this, "force_line_elastic", 1);
    _(this, "justLayoutSingleNode", !1);
    _(this, "layoutTimes", 0);
    _(this, "prev10", []);
    _(this, "visibleNodes", []);
    _(this, "viewUpdate");
    _(this, "calcNodeMap", /* @__PURE__ */ new WeakMap());
    _(this, "forCalcNodes", []);
    _(this, "maxVaildLineLength", 300);
    _(this, "minVaildLineLength", 30);
    _(this, "zeroEffectNodeDistance", 400);
    _(this, "minNodeDistance", 30);
    _(this, "maxMoveSpeed", 100);
    this.layoutOptions = e, this.layoutOptions.fastStart !== void 0 && (this.fastStart = this.layoutOptions.fastStart), this.layoutOptions.maxLayoutTimes !== void 0 && (this.maxLayoutTimes = this.layoutOptions.maxLayoutTimes), this.layoutOptions.byNode !== void 0 && (this.byNode = this.layoutOptions.byNode), this.layoutOptions.byLine !== void 0 && (this.byLine = this.layoutOptions.byLine), this.layoutOptions.force_node_repulsion !== void 0 && (this.force_node_repulsion = this.layoutOptions.force_node_repulsion), this.layoutOptions.force_line_elastic !== void 0 && (this.force_line_elastic = this.layoutOptions.force_line_elastic), this.layoutOptions.force_x_coefficient === void 0 && (this.layoutOptions.force_x_coefficient = 1), this.layoutOptions.force_y_coefficient === void 0 && (this.layoutOptions.force_y_coefficient = 1), this.layoutOptions.disableLiveChanges === void 0 && (this.layoutOptions.disableLiveChanges = !1), this.requireLinks = !0, o && this.setGraphInstance(o);
  }
  refresh() {
    this.placeNodes(this.allNodes, this.rootNode);
  }
  placeNodes(e, t) {
    if (u("!!!SeeksForceLayouter.placeNodes"), t)
      u("layout by root:", t);
    else {
      u("root is null:", t);
      return;
    }
    if (this.allNodes = e, this.rootNode = t, this.layoutOptions.fixedRootNode) {
      if (!Number.isNaN(t.x) || t.x === void 0)
        t.lot.x = w.getLotXByNodeX(this.graphOptions, t), t.lot.y = w.getLotYByNodeY(this.graphOptions, t);
      else {
        const i = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
        t.lot.x = 0 + i, t.lot.y = 0 + a;
      }
      const o = this.easyAnalysisNodes(t);
      this.easyPlaceRelativePosition(t, o), o.forEach((i) => {
        if (i.fixed === !0 || !w.isAllowShowNode(i))
          return;
        const a = i.offset_x || 0, r = i.offset_y || 0;
        i.x = i.lot.x + a - w.getNodeWidth(i, this.graphOptions) / 2, i.y = i.lot.y + r - w.getNodeHeight(i, this.graphOptions) / 2, i.lot.placed = !0;
      });
    } else
      this.fastStart ? (u("!!!initNodesPosition fastStart"), this.allNodes.forEach((o) => {
        o.fixed !== !0 && (o.lot.placed || (o.x || (o.x = Math.floor(Math.random() * 200) - 100), o.x || (o.y = Math.floor(Math.random() * 200) - 100), o.lot.placed = !0));
      })) : (u("!!!initNodesPosition....."), this.easyPlaceGroupNodes(this.rootNode).forEach((i) => {
        if (i.fixed === !0 || !w.isAllowShowNode(i))
          return;
        const a = i.offset_x || 0, r = i.offset_y || 0;
        i.x = i.lot.x + a - w.getNodeWidth(i, this.graphOptions) / 2, i.y = i.lot.y + r - w.getNodeHeight(i, this.graphOptions) / 2, i.lot.placed = !0;
      }));
    if (u("Start Auto Layout....."), this.updateVisibleNodes(), this.isMainLayouer && this.graphOptions.autoLayouting) {
      u("!!!autoLayouting.....");
      return;
    }
    this.autoLayout(!0);
  }
  easyPlaceGroupNodes(e) {
    if (u("[layout canvasOffset]", this.graphOptions.viewSize, this.graphOptions.canvasSize), e) {
      e.fixed ? (e.origin_x === void 0 && (e.origin_x = e.x, e.origin_y = e.y), e.lot.x = e.origin_x, e.lot.y = e.origin_y, u("root fixed position:", e.lot.x, e.lot.y)) : this.layoutOptions.fixedRootNode ? (e.lot.x = w.getLotXByNodeX(this.graphOptions, e), e.lot.y = w.getLotYByNodeY(this.graphOptions, e)) : (e.lot.x = 0, e.lot.y = 0, u("root position:", e.lot.x, e.lot.y));
      const t = this.easyAnalysisNodes(e);
      return this.easyPlaceRelativePosition(e, t), t;
    }
    return [];
  }
  easyAnalysisNodes(e) {
    this.allNodes.forEach((i) => {
      i.lot.eached = !1, i.lot.notLeafNode = !1, i.lot.childs = [], i.lot.parent = void 0, i.lot.index_of_parent = 0, i.lot.strength = 0, i.lot.placed = !1;
    });
    const t = [], o = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    return w.analysisNodes4Didirectional(t, [e], 0, o, 0), t;
  }
  easyPlaceRelativePosition(e, t) {
    t.forEach((i) => {
      if (i.lot.subling.level === 1) {
        const a = i.lot.subling;
        if (a) {
          const r = j.getOvalPoint(e.lot.x, e.lot.y, a.level * 50, i.lot.strength_plus - i.lot.strength / 2, a.all_strength, this.layoutOptions.startAngle);
          i.lot.x = r.x, i.lot.y = r.y;
        }
      }
    }), t.forEach((i) => {
      const a = i.lot.subling;
      if (a && a.level > 1) {
        const r = i.lot.parent.lot.strength_plus - i.lot.parent.lot.strength, l = (i.lot.parent.lot.strength_plus - r) / (i.lot.parent.lot.childs.length + 1) * (i.lot.index_of_parent + 1), h = j.getOvalPoint(e.lot.x, e.lot.y, (a.level - 1) * (100 + (a.level - 1) * 60) + 50, r + l, i.lot.parent.lot.subling.all_strength, this.layoutOptions.startAngle);
        i.lot.x = h.x, i.lot.y = h.y;
      }
    });
  }
  updateVisibleNodes(e) {
    this.visibleNodes = [], e && (this.allNodes = e), this.allNodes.forEach((t) => {
      w.isAllowShowNode(t) && (t.lot ? t.lot.placed = !0 : (u("node miss lot:", t.text), t.lot = {
        placed: !0,
        childs: []
      }), this.visibleNodes.push(t));
    }), this.resetCalcNodes(), u("visibleNodes:", this.visibleNodes.length);
  }
  autoLayout(e = !1) {
    this.layoutTimes = 0, this.updateVisibleNodes(), u("Layout set viewUpdate:", this.viewUpdate), this.doForceLayout(0);
  }
  layoutFinished() {
    this.isMainLayouer && (this.graphOptions.autoLayouting = !1), u("Layout finished"), this.layoutOptions.disableLiveChanges && (this.visibleNodes.forEach((e) => {
      const t = this.calcNodeMap.get(e);
      e.x = t.x, e.y = t.y;
    }), this.viewUpdate && this.viewUpdate(), u("Layout apply finished"));
  }
  resetCalcNodes() {
    u("resetCalcNodes:", this.visibleNodes.length), this.forCalcNodes = [], this.calcNodeMap = /* @__PURE__ */ new WeakMap(), this.visibleNodes.forEach((e) => {
      const t = {
        rgNode: e,
        Fx: 0,
        Fy: 0,
        x: e.x,
        y: e.y,
        ignoreForce: e.dragging || this.justLayoutSingleNode && !e.singleNode,
        force_weight: e.force_weight || 1,
        forceCenterOffset_X: (e.width || e.el.offsetWidth || 60) / 2,
        forceCenterOffset_Y: (e.height || e.el.offsetHeight || 60) / 2,
        fixed: e.fixed || !1
      };
      this.forCalcNodes.push(t), this.calcNodeMap.set(e, t);
    });
  }
  doForceLayout(e) {
    if (this.graphOptions.instanceDestroyed) {
      u("stop layout:instanceDestroyed");
      return;
    }
    let t = "0";
    if (e > 0 ? (this.prev10.length >= 10 && (this.prev10.splice(0, 1), t = (1e3 / ((this.prev10[this.prev10.length - 1] - this.prev10[0]) / 10)).toFixed(1)), this.prev10.push(e)) : this.visibleNodes.length === 0 && this.updateVisibleNodes(), u("this.layoutTimes:", this.layoutTimes, "of", this.maxLayoutTimes, "Current refresh rate:", t, "Hz", this.visibleNodes.length), this.layoutTimes > this.maxLayoutTimes) {
      this.layoutFinished();
      return;
    }
    this.isMainLayouer && (this.graphOptions.autoLayouting = !0), this.layoutTimes++, this.calcNodesPosition();
    for (const o of this.forCalcNodes)
      this.applyToNodePosition(o);
    this.layoutOptions.disableLiveChanges ? requestAnimationFrame(this.doForceLayout.bind(this)) : (this.viewUpdate && this.viewUpdate(), requestAnimationFrame(this.doForceLayout.bind(this)));
  }
  setGraphInstance(e) {
    this.viewUpdate = () => {
      e._dataUpdated();
    }, e.addEventListener((t, o) => {
      if (t === "node-drag-start") {
        const i = this.calcNodeMap.get(o.node);
        i && (i.ignoreForce = !0);
      } else if (t === "node-dragging") {
        const i = this.calcNodeMap.get(o.node);
        i && (i.x = o.x, i.y = o.y);
      } else if (t === "node-drag-end") {
        const i = this.calcNodeMap.get(o.node);
        i && (i.ignoreForce = !1);
      }
    });
  }
  calcNodesPosition() {
    if (this.byNode)
      for (let e = 0; e < this.forCalcNodes.length; e++) {
        const t = this.forCalcNodes[e];
        if (!t.ignoreForce && !t.fixed) {
          for (let o = 0; o < this.forCalcNodes.length; o++)
            if (e !== o) {
              const i = this.forCalcNodes[o];
              if (i.ignoreForce)
                continue;
              this.addGravityByNode(t, i);
            }
        }
      }
    if (this.byLine) {
      if (this.allLinks && this.allLinks.length > 0) {
        for (const e of this.allLinks)
          if (!e.forDisplayOnly) {
            let t = 1;
            for (const o of e.relations)
              o.force_elastic && o.force_elastic !== 1 && (t = o.force_elastic);
            if (this.visibleNodes.includes(e.fromNode) && this.visibleNodes.includes(e.toNode)) {
              const o = this.calcNodeMap.get(e.fromNode), i = this.calcNodeMap.get(e.toNode);
              this.addElasticByLine(
                o,
                i,
                t
              );
            }
          }
      } else
        for (const e of this.visibleNodes)
          if (e.lot && e.lot.parent) {
            const t = this.calcNodeMap.get(e.lot.parent), o = this.calcNodeMap.get(e);
            this.addElasticByLine(
              t,
              o,
              1
            );
          }
    }
  }
  stop() {
    u("[SeeksForceLayouter]stop:", this.graphOptions.autoLayouting), this.layoutTimes = 1e6;
  }
  addElasticByLine(e, t, o = 1) {
    const i = e.x, a = e.y, r = t.x, c = t.y;
    let l = Math.sqrt((a - c) ** 2 + (i - r) ** 2);
    if (l < this.minVaildLineLength)
      return;
    l > this.maxVaildLineLength && (l = this.maxVaildLineLength);
    const h = (l - this.minVaildLineLength) * 0.05 * this.force_line_elastic * o, f = h, d = h, g = (i - r) / l, p = (a - c) / l;
    this.addFtoNode(e, g * f * -1, p * f * -1), this.addFtoNode(t, g * d, p * d);
  }
  addGravityByNode(e, t) {
    const o = e.x, i = e.y, a = t.x, r = t.y;
    if (Math.abs(o - a) > this.zeroEffectNodeDistance || Math.abs(i - r) > this.zeroEffectNodeDistance)
      return;
    const c = Math.sqrt((i - r) ** 2 + (o - a) ** 2);
    if (c > this.zeroEffectNodeDistance)
      return;
    let l = (this.zeroEffectNodeDistance - c) * 0.05 * this.force_node_repulsion;
    c < this.minNodeDistance && (l = l * 2);
    const h = (o - a) / c, f = (i - r) / c;
    this.addFtoNode(e, h * l, f * l);
  }
  addFtoNode(e, t, o) {
    if (e.ignoreForce || Number.isNaN(t) || Number.isNaN(o))
      return;
    t > 50 && (t = 50), o > 50 && (o = 50), t < -50 && (t = -50), o < -50 && (o = -50);
    const i = e.force_weight || 1;
    this.lockX || (e.Fx += t * (1 / i)), this.lockY || (e.Fy += o * (1 / i));
  }
  applyToNodePosition(e) {
    if (e.fixed)
      return;
    let t = e.Fx, o = e.Fy;
    if (t > this.maxMoveSpeed && (t = this.maxMoveSpeed), o > this.maxMoveSpeed && (o = this.maxMoveSpeed), t < -this.maxMoveSpeed && (t = -this.maxMoveSpeed), o < -this.maxMoveSpeed && (o = -this.maxMoveSpeed), e.x = e.x + t * this.layoutOptions.force_x_coefficient, e.y = e.y + o * this.layoutOptions.force_y_coefficient, !this.layoutOptions.disableLiveChanges) {
      const i = e.rgNode;
      e.ignoreForce || (i.x = e.x, i.y = e.y);
    }
    e.Fx = e.Fx * 0.7, e.Fy = e.Fy * 0.7;
  }
}
const Le = $t;
class Bt extends Le {
  constructor(e, t, o) {
    super(e, t, o);
    _(this, "layoutOptions");
    this.layoutOptions = e;
  }
  async refresh() {
    u("SeeksCenterLayouter:refresh"), await this.placeNodes(this.allNodes, this.rootNode);
  }
  async placeNodes(e, t) {
    if (u("SeeksCenterLayouter:placeNodes"), !t) {
      u("root is null:", t);
      return;
    }
    u("layout by root:", t), this.allNodes = e, this.rootNode = t, e.forEach((a) => {
      a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.placed = !1;
    });
    let o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    if (w.analysisNodes(o, [this.rootNode], 0, i), o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, w.analysisNodes4Didirectional(o, [this.rootNode], 0, i, 0), t.fixed)
      t.origin_x === void 0 && (t.origin_x = t.x, t.origin_y = t.y), t.lot.x = t.origin_x, t.lot.y = t.origin_y, u("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", t.text, t.x, t.y);
    else if (this.layoutOptions.fixedRootNode)
      t.lot.x = w.getLotXByNodeX(this.graphOptions, t), t.lot.y = w.getLotYByNodeY(this.graphOptions, t);
    else {
      const a = this.layoutOptions.centerOffset_x || 0, r = this.layoutOptions.centerOffset_y || 0;
      t.lot.x = 0 + a, t.lot.y = 0 + r;
    }
    u("root position:", t.lot.x, t.lot.y), this.placeRelativePosition(this.rootNode, o, i), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout()) : o.forEach((a) => {
      if (a.fixed === !0 || !w.isAllowShowNode(a))
        return;
      const r = a.offset_x || 0, c = a.offset_y || 0, l = -w.getNodeWidth(a, this.graphOptions) / 2, h = -w.getNodeHeight(a, this.graphOptions) / 2;
      a.x = a.lot.x + r + l, a.y = a.lot.y + c + h, a.lot.placed = !0;
    });
  }
  getLevelDistanceArr() {
    let e = [];
    if (this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? e = this.layoutOptions.levelDistance.split(",").map((t) => Number.parseInt(t)) : Array.isArray(this.layoutOptions.levelDistance) && (e = this.layoutOptions.levelDistance), e.length > 0 && e.length < 10))
      for (let t = e.length; t < 10; t++)
        e.push(e[e.length - 1]);
    return e;
  }
  getLevelR(e, t) {
    if (e.length === 0)
      return;
    let o = 0;
    for (let i = 0; i < t && i < e.length; i++)
      o += e[i];
    return o;
  }
  placeRelativePosition(e, t, o) {
    const i = this.layoutOptions.distance_coefficient === void 0 ? 1 : this.layoutOptions.distance_coefficient, a = this.getLevelDistanceArr(), r = Math.min(this.graphOptions.viewSize.height, this.graphOptions.viewSize.width) * 0.4;
    let c = Math.min(Math.max(r, 150), 400) * i;
    u("analyticResult:", this.layoutOptions, o, r, c, i, a);
    let l = 0;
    t.forEach((f) => {
      const d = f.lot.subling;
      if (d && d.level === 1) {
        l = Math.round(d.all_size * 60 / Math.PI / 2), l < c && (l = c);
        const g = this.getLevelR(a, d.level) || d.level * l, p = j.getOvalPoint(e.lot.x, e.lot.y, g, f.lot.strength_plus - f.lot.strength / 2, d.all_strength, this.layoutOptions.startAngle);
        f.lot.x = p.x, f.lot.y = p.y;
      }
    });
    const h = Math.round(300 * i);
    t.forEach((f) => {
      const d = f.lot.subling;
      if (d && d.level > 1) {
        const g = f.lot.parent.lot.strength_plus - f.lot.parent.lot.strength, m = (f.lot.parent.lot.strength_plus - g) / (f.lot.parent.lot.childs_size + 1) * (f.lot.index_of_parent + 1), v = this.getLevelR(a, d.level) || (d.level - 1) * h + l, x = j.getOvalPoint(e.lot.x, e.lot.y, v, g + m, f.lot.parent.lot.subling.all_strength, this.layoutOptions.startAngle);
        f.lot.x = x.x, f.lot.y = x.y;
      }
    });
  }
}
const et = Bt;
class At extends Le {
  constructor(s, e, t) {
    super(s, e, t);
  }
  async refresh() {
    await this.placeNodes(this.allNodes, this.rootNode);
  }
  async placeNodes(s, e) {
    if (e)
      u("layout by root:", e);
    else {
      u("root is null:", e);
      return;
    }
    this.allNodes = s, this.rootNode = e, s.forEach((c) => {
      c.lot.eached = !1, c.lot.notLeafNode = !1, c.lot.childs = [], c.lot.parent = void 0, c.lot.index_of_p_childs = 0, c.lot.strength = 0;
    });
    const t = this.layoutOptions.centerOffset_x || 0, o = this.layoutOptions.centerOffset_y || 0, i = {
      x: t,
      y: o
    }, a = this.allNodes.length;
    let r = a * 90 / Math.PI / 2;
    r < 200 && (r = 200), r > 800 && (r = 800), this.allNodes.forEach((c, l) => {
      const h = j.getOvalPoint(i.x, i.y, r, l, a);
      c.lot.x = h.x, c.lot.y = h.y;
    }), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout()) : this.allNodes.forEach((c) => {
      if (c.fixed === !0 || !w.isAllowShowNode(c))
        return;
      const l = c.offset_x || 0, h = c.offset_y || 0, f = -w.getNodeWidth(c, this.graphOptions) / 2, d = -w.getNodeHeight(c, this.graphOptions) / 2;
      c.x = c.lot.x + l + f, c.y = c.lot.y + h + d, c.lot.placed = !0;
    });
  }
}
const tt = At;
class Dt extends we {
  constructor(e, t) {
    super(e, t);
    _(this, "graphOptions");
    _(this, "layoutOptions");
    _(this, "allNodes", []);
    _(this, "__origin_nodes", []);
    this.layoutOptions = e, this.graphOptions = t;
  }
  refresh() {
    this.placeNodes(this.__origin_nodes, this.rootNode);
  }
  placeNodes(e, t) {
    if (t)
      u("layout by root:", t);
    else {
      u("root is null:", t);
      return;
    }
    u("allNodes:", e.length), this.__origin_nodes = e, this.rootNode = t, e.forEach((i) => {
      i.lot.eached = !1, i.lot.notLeafNode = !1, i.lot.childs = [], i.lot.parent = void 0, i.lot.index_of_parent = 0, i.lot.strength = 0, i.lot.placed = !1, i.x || (i.x = 0), i.y || (i.y = 0), Number.isNaN(i.x) && (i.x = 0), Number.isNaN(i.y) && (i.y = 0);
    }), this.allNodes = [];
    const o = {
      max_strength: 1,
      max_deep: 1,
      max_length: 1
    };
    w.analysisNodes4Didirectional(this.allNodes, [this.rootNode], 0, o, 0), u("[layout canvasOffset]", this.graphOptions.viewSize, this.graphOptions.canvasSize);
  }
}
const ot = Dt;
class Tt extends we {
  constructor(e, t, o) {
    super(e, t);
    _(this, "graphInstance");
    _(this, "layoutOptions");
    _(this, "levelDistanceArr", []);
    this.layoutOptions = e, u("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((i) => Number.parseInt(i)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.requireLinks = !0, this.graphInstance = o;
  }
  async refresh() {
    u("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), await this.placeNodes(this.allNodes, this.rootNode);
  }
  analysisNodes4Didirectional(e, t, o, i) {
    this.analysisBothWay(e, t, o, i);
    const a = {};
    e.forEach((l) => {
      const h = l.lot.level + "";
      a[h] || (a[h] = []), a[h].push(l), l.lot.subling = {
        level: l.lot.level,
        all_size: 0,
        all_strength: 0
      };
    }), e.forEach((l) => {
      const h = l.lot.level + "", f = a[h], d = f.length;
      l.lot.index_of_level = f.indexOf(l), l.lot.subling.all_size = d, l.lot.subling.all_strength += l.lot.strength || 1, l.lot.strength_plus = l.lot.subling.all_strength;
    }), e.forEach((l) => {
      l.lot.childs_size > 0 && (l.lot.strengthWithChilds = 0);
    }), e.forEach((l) => {
      l.lot.childs_size === 0 && (l.lot.strengthWithChilds = 1, w.conductStrengthToParents(l));
    });
    const r = Object.keys(a).map((l) => Number.parseInt(l)).sort(), c = (l) => {
      const h = l + "", f = a[h];
      let d = 0;
      f.forEach((g) => {
        g.lot.parent && d < g.lot.parent.lot.strengthWithChilds_from && (d = g.lot.parent.lot.strengthWithChilds_from), l === 0 ? d += 1 : g.lot.strengthWithChilds_from = d, u("levels:", l, d, g.text, g.lot.strengthWithChilds), d += g.lot.strengthWithChilds;
      });
    };
    [0].forEach(c), r.filter((l) => l > 0).forEach(c), r.filter((l) => l < 0).forEach(c);
  }
  analysisBothWay(e, t, o, i) {
    u(`level ${o} size: ${t.length}`), t.length > i.max_length && (i.max_length = t.length), o > i.max_deep && (i.max_deep = o);
    const a = {
      level: o,
      all_size: t.length,
      all_strength: 0
    };
    t.forEach((c) => {
      c.lot || (c.lot = { childs: [] }), c.lot.eached = !0, c.lot.subling = a, c.lot.level = o, e.push(c);
    });
    let r = 0;
    t.forEach((c) => {
      let l = 0, h = 0, f = [];
      c.targetFrom.forEach((d) => {
        d.lot || (d.lot = { eached: !1, childs: [] }), d.lot.eached || (d.lot.parent = c, w.isAllowShowNode(d) ? (d.lot.eached = !0, d.lot.index_of_parent = h++, c.lot.childs.push(d), f.push(d), l++) : c.lot.childs.push(d));
      }), this.analysisBothWay(e, f, o - 1, i), f = [], c.targetTo.forEach((d) => {
        d.lot || (d.lot = { eached: !1, childs: [] }), d.lot.eached || (d.lot.parent = c, w.isAllowShowNode(d) ? (d.lot.eached = !0, d.lot.index_of_parent = h++, c.lot.childs.push(d), f.push(d), l++) : c.lot.childs.push(d));
      }), this.analysisBothWay(e, f, o + 1, i), c.lot.strength = l > 0 ? l : 1, a.all_strength += c.lot.strength, c.lot.strength_plus = a.all_strength, c.lot.index_of_level = r, c.lot.childs_size = l, r++;
    }), a.all_strength > i.max_strength && (i.max_strength = a.all_strength);
  }
  async placeNodes(e, t) {
    if (u("SeeksBidirectionalTreeLayouter:placeNodes"), t)
      u("layout by root:", t);
    else {
      console.error("root is null");
      return;
    }
    this.rootNode = t, this.allNodes = e, u("allNodes:", e.length), e.forEach((l) => {
      l.lot.eached = !1, l.lot.notLeafNode = !1, l.lot.childs = [], l.lot.parent = void 0, l.lot.index_of_parent = 0, l.lot.strength = 0, l.lot.strengthWithChilds_from = 0, l.lot.strengthWithChilds = 0, l.lot.placed = !1;
    });
    let o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    w.analysisNodes(o, [this.rootNode], 0, i), o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, this.analysisNodes4Didirectional(o, [this.rootNode], 0, i), this.placeNodesPosition(this.rootNode, o, i), u("allNodes:", o.length), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout(), u("create rootNode coordinates:3", t.x, t.y)) : (this.allNodes.forEach((l) => {
      if (l.fixed === !0) {
        l.lot.placed = !0;
        return;
      }
      !w.isAllowShowNode(l) || (Number.isNaN(l.lot.x) && (u("bad lot x:", l.text, l.lot.x), l.lot.x = 0), Number.isNaN(l.lot.y) && (u("bad lot y:", l.text, l.lot.y), l.lot.y = 0), l.x = w.getNodeXByLotX(this.graphOptions, l), l.y = w.getNodeYByLotY(this.graphOptions, l), l.lot.placed = !0);
    }), u("create rootNode coordinates:1", t.x, t.y));
    const a = o.filter((l) => l.lot.level === 0), r = [];
    this.allLinks.forEach((l) => {
      a.includes(l.fromNode) && !a.includes(l.toNode) && r.push(l.toNode), a.includes(l.toNode) && !a.includes(l.fromNode) && r.push(l.fromNode);
    }), r.forEach((l) => {
      l.fixed = !0;
    }), a.push(...r);
    const c = new Le({
      layoutName: "force",
      maxLayoutTimes: 100,
      force_node_repulsion: 0.1,
      force_line_elastic: 1,
      fixedRootNode: !0
    }, this.graphOptions, this.graphInstance);
    c.isMainLayouer = !1, c.requireLinks = !0, this.layoutOptions.from === "left" || this.layoutOptions.from === "right" ? c.lockX = !0 : c.lockY = !0, c.visibleNodes = a, c.setLinks(this.allLinks), c.viewUpdate = this.viewUpdate, c.resetCalcNodes(), c.doForceLayout(0);
  }
  placeNodesPosition(e, t, o) {
    if (e.fixed !== !0) {
      const i = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      e.lot.x = i, e.lot.y = a, this.layoutOptions.fixedRootNode ? (e.lot.x = w.getLotXByNodeX(this.graphOptions, e), e.lot.y = w.getLotYByNodeY(this.graphOptions, e)) : this.layoutOptions.from === "top" ? e.lot.y -= this.graphOptions.viewSize.height / 2 - 100 : this.layoutOptions.from === "bottom" ? e.lot.y += this.graphOptions.viewSize.height / 2 - 200 : this.layoutOptions.from === "right" ? e.lot.x += this.graphOptions.viewSize.width / 2 - 100 : e.lot.x -= this.graphOptions.viewSize.width / 2 - 100, u("debug0910:Graph center:", e.lot.x, e.lot.y, { _center_offset_x: i, _center_offset_y: a });
    } else
      e.origin_x === void 0 && (e.origin_x = e.x, e.origin_y = e.y), e.lot.x = e.origin_x, e.lot.y = e.origin_y, u("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", e.text, e.x, e.y);
    e.lot.placed = !0, this.placeRelativePosition(e, t, o);
  }
  placeRelativePosition(e, t, o) {
    const i = this.graphOptions.viewSize;
    if (this.layoutOptions.from === "left" || this.layoutOptions.from === "right") {
      const a = Y(this.layoutOptions.min_per_height) || 80, r = Y(this.layoutOptions.max_per_height) || 400, c = Y(this.layoutOptions.min_per_width) || 430, l = Y(this.layoutOptions.max_per_width) || 650;
      let h = Math.round((i.width - 10) / (o.max_deep + 2));
      h < c && (h = c), h > l && (h = l);
      let f = Math.round(i.height / (o.max_strength + 1));
      f < a && (f = a), f > r && (f = r), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "right" ? d.lot.x = e.lot.x - this.getLevelDistance(d, d.lot.subling.level, h) : d.lot.x = e.lot.x + this.getLevelDistance(d, d.lot.subling.level, h));
      }), t.forEach((d) => {
        d.fixed !== !0 && (d.lot.level === 0 ? d !== e && (d.lot.y = e.lot.y + f * d.lot.index_of_level) : d.lot.y = e.lot.y + f * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      });
    } else {
      const a = Y(this.layoutOptions.min_per_height) || 350, r = Y(this.layoutOptions.max_per_height) || 400, c = Y(this.layoutOptions.min_per_width) || 250, l = Y(this.layoutOptions.max_per_width) || 500;
      let h = Math.round((i.width - 10) / (o.max_strength + 2));
      h < c && (h = c), h > l && (h = l);
      let f = Math.round((i.height - 10) / (o.max_deep + 2));
      f < a && (f = a), f > r && (f = r), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "bottom" ? d.lot.y = e.lot.y - this.getLevelDistance(d, d.lot.subling.level, f) : d.lot.y = e.lot.y + this.getLevelDistance(d, d.lot.subling.level, f));
      }), t.forEach((d) => {
        d.fixed !== !0 && d.lot.level !== 0 && (d.lot.x = e.lot.x + h * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      });
    }
  }
  getLevelDistance(e, t, o) {
    const i = Math.abs(t);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let r = 0; r < i; r++) {
        const c = this.levelDistanceArr[r] || 100;
        a += c;
      }
      return t > 0 ? a : a * -1;
    } else
      return t * o;
  }
}
class It extends we {
  constructor(e, t) {
    super(e, t);
    _(this, "enableGatherNodes", !1);
    _(this, "layoutOptions");
    _(this, "levelDistanceArr", []);
    this.layoutOptions = e, u("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((o) => Number.parseInt(o)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.enableGatherNodes = this.layoutOptions.enableGatherNodes;
  }
  async refresh() {
    u("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), await this.placeNodes(this.allNodes, this.rootNode);
  }
  analysisNodes4Didirectional(e, t, o, i, a) {
    u(`${a} level ${o} size: ${t.length}`), t.length > i.max_length && (i.max_length = t.length), o > i.max_deep && (i.max_deep = o);
    const r = {
      level: o,
      all_size: t.length,
      all_strength: 0
    }, c = [];
    t.forEach((h) => {
      h.lot || (h.lot = { childs: [] }), h.lot.eached = !0, h.lot.subling = r, h.lot.level = o, e.push(h);
    });
    let l = 0;
    t.forEach((h) => {
      let f = 0, d = a === -1 ? h.targetFrom : h.targetTo;
      o !== 0 && (d = h.targetNodes);
      let g = 0;
      d.forEach((p) => {
        p.lot || (p.lot = { eached: !1, childs: [] }), p.lot.eached || (p.lot.parent = h, w.isAllowShowNode(p) ? (p.lot.eached = !0, p.lot.index_of_parent = g++, h.lot.childs.push(p), c.push(p), f++) : h.lot.childs.push(p));
      }), h.lot.strength = f > 0 ? f : 1, r.all_strength += h.lot.strength, h.lot.strength_plus = r.all_strength, h.lot.index_of_level = l, h.lot.childs_size = f, l++;
    }), r.all_strength > i.max_strength && (i.max_strength = r.all_strength), c.length > 0 ? this.analysisNodes4Didirectional(e, c, o + a, i, a) : (e.forEach((h) => {
      h.lot.strengthWithChilds = 1, w.conductStrengthToParents4Folder(h);
    }), w.analysisDataFolder([e[0]], 0, a));
  }
  async placeNodes(e, t) {
    if (u("SeeksBidirectionalTreeLayouter:placeNodes"), t)
      u("layout by root:", t);
    else {
      console.error("root is null");
      return;
    }
    this.rootNode = t, this.allNodes = e, u("allNodes:", e.length), e.forEach((a) => {
      a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.strengthWithChilds_from = 0, a.lot.strengthWithChilds = 0, a.lot.placed = !1;
    });
    let o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    w.analysisNodes(o, [this.rootNode], 0, i), o = [], i = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, this.analysisNodes4Didirectional(o, [this.rootNode], 0, i, 1), this.placeNodesPosition(this.rootNode, o, i), u("allNodes:", o.length), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout(), u("create rootNode coordinates:3", t.x, t.y)) : (this.allNodes.forEach((a) => {
      if (a.fixed === !0) {
        a.lot.placed = !0;
        return;
      }
      !w.isAllowShowNode(a) || (Number.isNaN(a.lot.x) && (u("bad lot x:", a.text, a.lot.x), a.lot.x = 0), Number.isNaN(a.lot.y) && (u("bad lot y:", a.text, a.lot.y), a.lot.y = 0), a.x = w.getNodeXByLotX(this.graphOptions, a), a.y = w.getNodeYByLotY(this.graphOptions, a), a.lot.placed = !0);
    }), u("create rootNode coordinates:1", t.x, t.y));
  }
  placeNodesPosition(e, t, o) {
    if (e.fixed !== !0) {
      const i = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      e.lot.x = i, e.lot.y = a, this.layoutOptions.fixedRootNode ? (e.lot.x = w.getLotXByNodeX(this.graphOptions, e), e.lot.y = w.getLotYByNodeY(this.graphOptions, e)) : this.layoutOptions.from === "right" ? e.lot.x += this.graphOptions.viewSize.width / 2 - 100 : e.lot.x -= this.graphOptions.viewSize.width / 2 - 100, u("debug0910:Graph center:", e.lot.x, e.lot.y, { _center_offset_x: i, _center_offset_y: a });
    } else
      e.origin_x === void 0 && (e.origin_x = e.x, e.origin_y = e.y), e.lot.x = e.origin_x, e.lot.y = e.origin_y, u("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", e.text, e.x, e.y);
    e.lot.placed = !0, this.placeRelativePosition(e, t, o);
  }
  placeRelativePosition(e, t, o) {
    const i = Y(this.layoutOptions.min_per_width) || 50, a = Y(this.layoutOptions.min_per_height) || 40;
    t.forEach((r) => {
      r.fixed !== !0 && r.lot.placed !== !0 && r !== e && (this.layoutOptions.from === "right" ? r.lot.x = e.lot.x - this.getLevelDistance(r, r.lot.subling.level, i) : r.lot.x = e.lot.x + this.getLevelDistance(r, r.lot.subling.level, i));
    }), t.forEach((r) => {
      r.fixed !== !0 && r.lot.level !== 0 && (r.lot.y = e.lot.y + a * (r.lot.strengthWithChilds_from - 1));
    }), this.gatherNodes(t, "h", a);
  }
  gatherNodes(e, t, o) {
    if (!this.enableGatherNodes)
      return;
    const i = {};
    e.forEach((a) => {
      const r = a.lot.level + "";
      i[r] || (i[r] = []), i[r].push(a), a.lot.movedNodeSizeBefore = 1, a.lot.movedNodeSizeAfter = 1;
    }), e.forEach((a) => {
      if (a.fixed !== !0 && a.lot.level !== 0) {
        const r = a.lot.level + "", c = i[r];
        if (a.lot.strengthWithChilds === 1 && a.lot.childs_size <= 1) {
          const l = this.getBloomingNearByParent(a, a.lot.parent, c, t);
          l && (t === "h" ? a.lot.y - l.lot.y > 0 ? (a.lot.y = l.lot.y + o * l.lot.movedNodeSizeAfter, l.lot.movedNodeSizeAfter++) : (a.lot.y = l.lot.y - o * l.lot.movedNodeSizeBefore, l.lot.movedNodeSizeBefore++) : a.lot.x - l.lot.x > 0 ? (a.lot.x = l.lot.x + o * l.lot.movedNodeSizeAfter, l.lot.movedNodeSizeAfter++) : (a.lot.x = l.lot.x - o * l.lot.movedNodeSizeBefore, l.lot.movedNodeSizeBefore++));
        }
      }
    });
  }
  getBloomingNearByParent(e, t, o, i) {
    let a = 9999, r;
    for (const c of o)
      if (c.lot.childs_size > 1 && c.lot.parent === t) {
        const l = i === "h" ? c.lot.y - t.lot.y : c.lot.x - t.lot.x;
        Math.abs(l) < a && (a = Math.abs(l), r = c);
      }
    if (r && r !== e)
      return r;
  }
  getLevelDistance(e, t, o) {
    const i = Math.abs(t);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let r = 0; r < i; r++) {
        const c = r >= this.levelDistanceArr.length ? this.levelDistanceArr[this.levelDistanceArr.length - 1] : this.levelDistanceArr[r];
        a += c;
      }
      return t > 0 ? a : a * -1;
    } else
      return t * o;
  }
}
const Se = (n, s, e) => {
  e || (console.warn("\u6CE8\u610F\uFF0C\u5728relation-graph@2.1.32\u4EE5\u53CA\u66F4\u6539\u7248\u672C\u4E2D\u4F7F\u7528createLayout\u65B9\u6CD5\u65F6\uFF0C\u9700\u8981\u63D0\u4F9B\u7B2C\u4E09\u4E2A\u53C2\u6570: graphInstance"), console.warn("Note that when using the createLayout method in relation-graph@2.1.32 and changed versions, you need to provide a third parameter: graphInstance")), Oe(n);
  let t = null;
  if (n.layoutName === "tree" ? t = new Ke(n, s) : n.layoutName === "center" ? t = new et(n, s, e) : n.layoutName === "circle" ? t = new tt(n, s, e) : n.layoutName === "force" ? t = new Le(n, s, e) : n.layoutName === "fixed" ? t = new ot(n, s) : n.layoutName === "smart-tree" ? t = new Tt(n, s, e) : n.layoutName === "folder" && (t = new It(n, s)), !t)
    throw new Error("unknown layout: " + n.layoutName);
  return s.isNeedShowAutoLayoutButton = n.allowAutoLayoutIfSupport !== !1 && t.autoLayout !== void 0, t;
}, Oe = (n) => {
  if (typeof n.centerOffset_x == "string" && (n.centerOffset_x = parseInt(n.centerOffset_x)), typeof n.centerOffset_y == "string" && (n.centerOffset_y = parseInt(n.centerOffset_y)), n.layoutName === "center") {
    const s = n;
    s.layoutDirection === void 0 && (s.layoutDirection = "h"), s.centerOffset_x === void 0 && (s.centerOffset_x = 0), s.centerOffset_y === void 0 && (s.centerOffset_y = 0), s.layoutDirection = void 0;
  } else if (n.layoutName.includes("tree")) {
    const s = n;
    s.layoutDirection === void 0 && (s.layoutDirection = "h"), s.centerOffset_x === void 0 && (s.centerOffset_x = 0), s.centerOffset_y === void 0 && (s.centerOffset_y = 0), s.from === void 0 && (s.from = "top"), s.levelDistance === void 0 && (s.levelDistance = ""), (s.from === "top" || s.from === "bottom") && (s.layoutDirection = "v", u("set layoutDirection=v"), u("set defaultJunctionPoint=tb"), s.min_per_width === void 0 && (s.min_per_width = 100), s.max_per_width === void 0 && (s.max_per_width = 500), s.min_per_height === void 0 && (s.min_per_height = 300), s.max_per_height === void 0 && (s.max_per_height = 500)), (s.from === "left" || s.from === "right") && (s.layoutDirection = "h", u("set defaultJunctionPoint=lr"), s.min_per_width === void 0 && (s.min_per_width = 300), s.max_per_width === void 0 && (s.max_per_width = 500), s.min_per_height === void 0 && (s.min_per_height = 100), s.max_per_height === void 0 && (s.max_per_height = 500));
  } else
    (n.layoutName === "fixed" || n.layoutName === "force") && (n.layoutDirection = void 0);
}, Vt = {
  createLayout: Se,
  appendDefaultOptions4Layout: Oe
}, Wt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createLayout: Se,
  appendDefaultOptions4Layout: Oe,
  default: Vt
}, Symbol.toStringTag, { value: "Module" })), Ve = {
  id: "rg-newNodeTemplate",
  x: 0,
  y: 0,
  text: "",
  styleClass: ""
};
let Ht = 0;
const Ee = (n) => {
  !n.backgroundImage && (n.backgroundImage = n.backgrounImage), !n.backgroundImageNoRepeat && (n.backgroundImageNoRepeat = n.backgrounImageNoRepeat), typeof n.graphOffset_x == "string" && (n.graphOffset_x = parseInt(n.graphOffset_x)), typeof n.graphOffset_y == "string" && (n.graphOffset_y = parseInt(n.graphOffset_y)), n.defaultPloyLineRadius && (n.defaultPolyLineRadius = n.defaultPloyLineRadius);
  const s = {
    instanceId: "",
    debug: !0,
    graphLoading: !1,
    graphLoadingText: "",
    showMaskWhenLayouting: !1,
    instanceDestroyed: !1,
    useHorizontalView: !1,
    oldVueVersion: !1,
    ovUseNodeSlot: !1,
    ovUseLineSlot: !1,
    ovUseToolbarSlot: !1,
    ovUseNodeExpandHolderSlot: !1,
    showDebugPanel: !1,
    backgroundColor: void 0,
    backgroundImage: void 0,
    backgroundImageNoRepeat: void 0,
    downloadImageFileName: "",
    disableZoom: !1,
    disableDragNode: !1,
    disableDragLine: !0,
    moveToCenterWhenRefresh: !0,
    zoomToFitWhenRefresh: !0,
    useAnimationWhenRefresh: !1,
    defaultFocusRootNode: !0,
    disableNodeClickEffect: !1,
    disableLineClickEffect: !1,
    allowShowFullscreenMenu: !0,
    allowShowZoomMenu: !0,
    allowAutoLayoutIfSupport: !0,
    allowShowRefreshButton: !0,
    allowShowDownloadButton: !0,
    backgrounImageNoRepeat: !1,
    allowShowMiniToolBar: !0,
    toolBarVersion: "v2",
    toolBarDirection: "v",
    toolBarPositionH: "right",
    toolBarPositionV: "center",
    allowSwitchLineShape: !1,
    allowSwitchJunctionPoint: !1,
    isMoveByParentNode: !1,
    defaultExpandHolderPosition: "hide",
    defaultExpandHolderColor: void 0,
    defaultNodeBorderWidth: void 0,
    defaultNodeColor: "#409EFF",
    defaultNodeBorderColor: "#0c7ff6",
    defaultNodeFontColor: "#ffffff",
    defaultLineColor: "#cccccc",
    checkedLineColor: "#FD8B37",
    defaultLineFontColor: void 0,
    defaultLineWidth: 1,
    defaultLineShape: void 0,
    defaultLineTextOffset_x: void 0,
    defaultLineTextOffset_y: void 0,
    defaultNodeShape: void 0,
    defaultNodeWidth: void 0,
    defaultNodeHeight: void 0,
    defaultShowLineLabel: !0,
    hideNodeContentByZoom: !1,
    defaultJunctionPoint: void 0,
    defaultBottomJuctionPoint_X: void 0,
    defaultPolyLineRadius: void 0,
    disableDragCanvas: !1,
    placeSingleNode: !0,
    placeOtherGroup: !1,
    lineUseTextPath: !1,
    lineTextMaxLength: 66,
    multiLineDistance: 14,
    graphOffset_x: 0,
    graphOffset_y: 0,
    viewSize: { width: 300, height: 300 },
    viewELSize: { width: 1300, height: 800, left: 0, top: 100 },
    viewNVInfo: { width: 1300, height: 800, x: 0, y: 100 },
    canvasNVInfo: { width: 1300, height: 800, x: 0, y: 100 },
    defaultLineMarker: {
      markerWidth: 12,
      markerHeight: 12,
      refX: 6,
      refY: 6,
      color: void 0,
      data: "M2,2 L10,6 L2,10 L6,6 L2,2"
    },
    allowShowMiniView: !1,
    allowShowSettingPanel: !1,
    allowShowMiniNameFilter: !0,
    fullscreen: !1,
    checkedNodeId: "",
    checkedLineId: "",
    checkedLinkId: "",
    layouts: [],
    layoutLabel: "",
    layoutName: "tree",
    layoutClassName: "",
    layoutDirection: "h",
    useAnimationWhenExpanded: !1,
    reLayoutWhenExpandedOrCollapsed: !1,
    autoLayouting: !1,
    layouter: void 0,
    isNeedShowAutoLayoutButton: !1,
    canvasZoom: 100,
    showEasyView: !1,
    performanceMode: !1,
    canvasOpacity: 1,
    showSingleNode: !0,
    showNodeLabel: !0,
    showNodeShortLabel: !0,
    canvasSize: {
      width: 10,
      height: 10
    },
    canvasOffset: {
      x: 25,
      y: 27,
      zoom_buff_x: 0,
      zoom_buff_y: 0
    },
    creatingSelection: !1,
    selectionView: {
      x: 25,
      y: 27,
      width: 0,
      height: 0
    },
    creatingNodePlot: !1,
    showTemplateNode: !0,
    newNodeTemplate: ke(JSON.parse(JSON.stringify(Ve))),
    creatingLinePlot: !1,
    newLineTemplate: {
      from: "newRelationTemplate-from",
      to: "newRelationTemplate-to",
      color: "",
      text: "new line"
    },
    newLinkTemplate: {
      fromNode: null,
      toNodeObject: null,
      toNode: {
        nothing: !0,
        x: 400,
        y: 400,
        el: {
          offsetWidth: 30,
          offsetHeight: 30
        }
      },
      relations: [{}]
    },
    data: {}
  };
  if (s.newLineTemplate = be(s.newLineTemplate), n.layout && n.layouts)
    throw new Error("Graph options cannot have both layout and layouts properties !");
  const e = n.debug === !0;
  e && u("RGOptions:user instance options:", n), window && (window.relationGraphDebug = e);
  const t = Object.keys(s);
  n && Object.keys(n).forEach((i) => {
    if (i === "layouts" || i === "layout")
      return;
    const a = n[i];
    if (!t.includes(i)) {
      u("RGOptions: unknow option key:", i);
      return;
    }
    if (typeof a == "object") {
      u("RGOptions:user setting object:", i, a);
      const r = s[i];
      if (r && !Array.isArray(r) && a)
        Object.keys(r).forEach((c) => {
          r[c] = a[c];
        });
      else if (Array.isArray(r)) {
        const c = [];
        a.forEach((l) => {
          l && typeof l == "object" ? c.push(JSON.parse(JSON.stringify(l))) : c.push(l);
        }), s[i] = c;
      } else
        s[i] = a;
    } else
      s[i] = a;
  });
  let o = [];
  return !n.layouts || !Array.isArray(n.layouts) || n.layouts.length === 0 ? n.layout ? o = [n.layout] : o = [{
    label: "\u4E2D\u5FC3",
    layoutName: "center",
    layoutDirection: "v"
  }] : o = n.layouts, u("final layouts:", o), s.layouts = o.map((i) => JSON.parse(JSON.stringify(i))), s.disableNodeClickEffect && (s.defaultFocusRootNode = !1), Oe(s.layouts[0]), ze(s.layouts[0], s), s;
}, ze = (n, s) => {
  u("applyDefaultOptionsByLayout", n.layoutName, s), n.layoutName === "SeeksCenterLayouter" || n.layoutName === "center" ? (s.defaultNodeShape === void 0 && (s.defaultNodeShape = 0), s.defaultLineShape === void 0 && (s.defaultLineShape = 1), s.defaultJunctionPoint === void 0 && (s.defaultJunctionPoint = "border")) : n.layoutName === "SeeksBidirectionalTreeLayouter" || n.layoutName.includes("tree") ? (s.defaultNodeBorderWidth === void 0 && (s.defaultNodeBorderWidth = 0), s.defaultNodeShape === void 0 && (s.defaultNodeShape = 1), s.defaultLineShape === void 0 && (s.defaultLineShape = 4), (n.from === "top" || n.from === "bottom") && (s.layoutDirection = "v", u("set layoutDirection=v"), s.defaultLineShape === 4 && (s.defaultJunctionPoint === void 0 && (s.defaultJunctionPoint = "tb"), u("set defaultJunctionPoint=tb"))), (n.from === "left" || n.from === "right") && (s.layoutDirection = "h", u("set layoutDirection=h"), s.defaultLineShape === 4 && (s.defaultJunctionPoint === void 0 && (s.defaultJunctionPoint = "lr"), u("set defaultJunctionPoint=lr")))) : (n.layoutName === "fixed" || n.layoutName === "force") && (s.moveToCenterWhenRefresh = !1, s.zoomToFitWhenRefresh = !1), s.defaultNodeShape === void 0 && (s.defaultNodeShape = 0), s.defaultLineShape === void 0 && (s.defaultLineShape = 1), s.defaultJunctionPoint === void 0 && (s.defaultJunctionPoint = "border");
}, Ne = (n) => {
  const s = Ee(n);
  return u("RGOptions:new RGOptions:by:", n), u("RGOptions:new RGOptions:", s), s.instanceId || (s.instanceId = `RGIns-${Ht++}`), s;
}, Ft = {
  newInstanceOptions: Ne,
  createDefaultConfig: Ee,
  applyDefaultOptionsByLayout: ze
}, Rt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  newNodeTemplate: Ve,
  createDefaultConfig: Ee,
  applyDefaultOptionsByLayout: ze,
  newInstanceOptions: Ne,
  default: Ft
}, Symbol.toStringTag, { value: "Module" }));
class Gt {
  constructor(s, e) {
    _(this, "options");
    _(this, "listeners");
    _(this, "isReact", !1);
    _(this, "updateViewHook", () => {
    });
    _(this, "_dataUpdating", !1);
    _(this, "_dataUpdatingNext", !1);
    _(this, "eventHandlers", []);
    this.listeners = e, this.options = Ne(s), u("new RelationGraph:", this);
  }
  enableDebugLog(s) {
    this.options.debug = s, window && (window.relationGraphDebug = s);
  }
  setUpdateViewHook(s) {
    this.isReact = !0, this.updateViewHook = s;
  }
  _dataUpdated() {
    if (this._dataUpdating) {
      this._dataUpdatingNext = !0;
      return;
    }
    this._dataUpdating = !0, requestAnimationFrame(this._doSomethingAfterDataUpdated.bind(this));
  }
  _doSomethingAfterDataUpdated() {
    u("_dataUpdated:", this._dataUpdatingNext), this._dataUpdating = !0, this.updateVisbleViewNodes(), this.updateEasyView(), this.updateViewHook(), this._dataUpdating = !1, this._dataUpdatingNext && (this._dataUpdatingNext = !1, requestAnimationFrame(this._doSomethingAfterDataUpdated.bind(this)));
  }
  addEventListener(s) {
    this.eventHandlers.push(s);
  }
  removeEventListener(s) {
    const e = this.eventHandlers.indexOf(s);
    e !== -1 && this.eventHandlers.splice(e, 1);
  }
  emitEvent(s, e) {
    for (const t of this.eventHandlers)
      t(s, e);
  }
}
class Ut extends Gt {
  constructor(e, t) {
    super(e, t);
    _(this, "$dom");
    _(this, "$canvasDom");
    _(this, "resizeObserver");
    _(this, "resizeListenerMap", /* @__PURE__ */ new WeakMap());
    _(this, "nodeMap", /* @__PURE__ */ new WeakMap());
    this.resizeObserver = new ResizeObserver((o, i) => {
      for (const a of o) {
        const r = this.resizeListenerMap.get(a.target);
        r ? r(a.borderBoxSize[0].inlineSize, a.borderBoxSize[0].blockSize) : this._onNodeResize(a.target, a.borderBoxSize[0].inlineSize, a.borderBoxSize[0].blockSize);
      }
    });
  }
  setDom(e) {
    u("setDom"), this.$dom = e, this.addResizeListener(this.$dom, (t, o) => {
      u("resizeListener:this.$dom"), this.refreshNVAnalysisInfo(), this.updateEasyView(), setTimeout(() => {
        u("resizeListener:updateVisbleViewNodes"), this.zoom(-1), this.zoom(1), this.emitEvent("view-resize", { width: t, height: o });
      }, 500);
    });
  }
  setCanvasDom(e) {
    this.$canvasDom = e;
  }
  getBoundingClientRect() {
    return this.$dom.getBoundingClientRect();
  }
  addResizeListener(e, t) {
    this.resizeListenerMap.set(e, t), this.resizeObserver.observe(e);
  }
  _onNodeResize(e, t, o) {
    if (t === 0 || o === 0)
      return;
    const i = this.nodeMap.get(e);
    i && this.updateNodeOffsetSize(i, t, o);
  }
  addNodeResizeListener(e, t) {
    this.nodeMap.set(e, t), this.resizeObserver.observe(e);
  }
  removeNodeResizeListener(e) {
    this.nodeMap.delete(e), this.resizeObserver.unobserve(e);
  }
  removeResizeListener(e) {
    this.resizeListenerMap.delete(e), this.resizeObserver.unobserve(e);
  }
}
class Yt extends Ut {
  constructor(e, t) {
    super(e, t);
    _(this, "graphData", {
      rootNode: void 0,
      nodes: [],
      links: [],
      elementLines: []
    });
    _(this, "seeksNodeIdIndex", 0);
    _(this, "allLineColors", []);
    _(this, "userLayouerClass");
    _(this, "layouter");
    _(this, "reactiveData");
    _(this, "disableNextLayoutAnimation", !1);
    _(this, "elLineUpdating", !1);
  }
  setReactiveData(e, t) {
    this.reactiveData = t, this.graphData = e, this.allLineColors = t.allLineColors, Object.assign(t.options, this.options), this.options = t.options;
  }
  setReactiveDataVue3(e, t) {
    this.reactiveData = t, this.graphData = e, this.allLineColors = t.allLineColors, Object.assign(t.options, this.options), this.options = t.options;
  }
  _setOptions(e) {
    const t = Ne(e);
    Object.assign(this.reactiveData.options, t);
  }
  _initLayoutByLayoutOptions(e) {
    this.options.layoutClassName = e.layoutClassName, this.options.layoutLabel = e.label, this.options.layoutName = e.layoutName, this.options.layoutDirection = e.layoutDirection, this.layouter = Se(e, this.options, this);
  }
  initLayouter() {
    if (this.userLayouerClass)
      u("Use user layouter:", this.userLayouerClass), this.layouter = this.userLayouerClass;
    else if (this.options.layouts && this.options.layouts.length > 0) {
      const e = this.options.layouts[0];
      u("[change layout]Create default layouter\uFF1A", this.options.layoutName), this._initLayoutByLayoutOptions(e);
    } else
      u("Not set option: layout/layouts\uFF01");
    u("Layouter instance:", this.layouter);
  }
  async _setJsonData(e, t = !1) {
    await this.clearGraph(), u("set jsonData:", e), this.loadGraphJsonData(e);
  }
  async clearGraph() {
    this.graphData.nodes = [], this.graphData.links = [], this.graphData.elementLines = [], this.graphData.rootNode = void 0;
  }
  async clearElementLines() {
    this.graphData.elementLines = [];
  }
  generateNewNodeId(e = 1) {
    const t = "N" + (this.graphData.nodes.length + e);
    return this.getNodeById(t) ? this.generateNewNodeId(e + 1) : (u("generateNewNodeId:", e, t), t);
  }
  loadNodes(e) {
    const t = {};
    this.graphData.nodes.forEach((i) => {
      t[i.id] = i;
    });
    const o = [];
    e.forEach((i) => {
      let a = t[i.id];
      a || (a = ke(i, this.options), a && (a.seeks_id = this.seeksNodeIdIndex++, t[a.id] = a, o.push(a)));
    }), this.graphData.nodes.push(...o);
  }
  loadLines(e) {
    const t = {};
    this.graphData.nodes.forEach((a) => {
      t[a.id] = a;
    });
    const o = {};
    this.graphData.links.forEach((a) => {
      o[a.seeks_id] = a;
    });
    const i = [];
    e.forEach((a) => {
      let r = !1, c, l;
      if (typeof a.from == "object" ? c = a.from : c = t[a.from], typeof a.to == "object" ? l = a.to : l = t[a.to], !c) {
        console.error("Can not found from node:", a);
        return;
      }
      if (!l) {
        console.error("Can not found to node:", a);
        return;
      }
      const h = `${c.seeks_id}-${l.seeks_id}`, f = `${l.seeks_id}-${c.seeks_id}`, d = be(a);
      let g = o[h], p = !1;
      g || (g = o[f], g ? p = !0 : (r = !0, g = {
        seeks_id: h,
        fromNode: c,
        toNode: l,
        appended: !1,
        forDisplayOnly: !0,
        relations: []
      }));
      let m = d.arrow;
      d.isHideArrow || (m = this.getLineArrow(d.color)), c.targetNodes || (c.targetNodes = []), l.targetNodes || (l.targetNodes = []), d.forDisplayOnly || (c.targetNodes.includes(l) || c.targetNodes.push(l), l.targetNodes.includes(c) || l.targetNodes.push(c), c.targetTo.includes(l) || c.targetTo.push(l), l.targetFrom.includes(c) || l.targetFrom.push(c), g.forDisplayOnly = !1);
      let v = !1;
      for (let x = 0; x < g.relations.length; x++)
        if ((g.relations[x].id || d.id) && g.relations[x].id === d.id) {
          v = !0;
          break;
        }
      v === !1 && (d.id || (d.id = `${g.seeks_id}-${g.relations.length}`), d.isReverse = p, d.arrow = m, g.relations.push(d)), r && (i.push(g), o[g.seeks_id] = g, g.appended = !1);
    }), this.graphData.links.push(...i);
  }
  flatNodeData(e, t, o, i) {
    q.flatNodeData(e, t, o, i);
  }
  loadGraphJsonData(e) {
    e.lines || (e.lines = e.relations, console.warn("[relation-graph] For compatibility with older versionsm, Use jsonData.relations as jsonData.lines, It is recommended that you define your data using")), e.lines || (e.lines = e.links, console.warn("[relation-graph] For compatibility with older versionsm, Use jsonData.links as jsonData.lines, It is recommended that you define your data using"));
    const t = e.nodes, o = [], i = [];
    this.flatNodeData(t, null, o, i), e.lines.forEach((a) => {
      i.push(a);
    }), this.loadNodes(o), u("Nodes is initialized"), this.loadLines(i), this._dataUpdated(), setTimeout(() => {
      e.elementLines && this.addElementLines(e.elementLines);
    }, 500);
  }
  getLineArrow(e, t = !1, o = !1) {
    const i = t ? "start-" : "";
    if (o)
      return `${this.options.instanceId}-${i}arrow-checked`;
    if (e) {
      const a = wt(e);
      return this.allLineColors.map((r) => r.id).includes(a) || this.allLineColors.push({ id: a, color: e }), `${this.options.instanceId}-${i}arrow-${a}`;
    } else
      return `${this.options.instanceId}-${i}arrow-default`;
  }
  getNodes() {
    return this.graphData.nodes;
  }
  getLinks() {
    return this.graphData.links;
  }
  getGraphJsonData() {
    const e = [], t = [];
    return this.graphData.nodes.forEach((o) => {
      const i = Te(o);
      i && e.push(i);
    }), this.graphData.links.forEach((o) => {
      Ie(o, t);
    }), {
      rootId: this.graphData.rootNode ? this.graphData.rootNode.id : "",
      nodes: e,
      lines: t
    };
  }
  getGraphJsonOptions() {
    const e = {}, t = [
      "layouter",
      "autoLayouting",
      "canvasNVInfo",
      "canvasOffset",
      "canvasZoom",
      "fullscreen",
      "instanceId",
      "layoutClassName",
      "layoutDirection",
      "layoutLabel",
      "layoutName",
      "resetViewSize",
      "viewELSize",
      "viewNVInfo",
      "viewSize",
      "canvasSize",
      "newLinkTemplate",
      "newLineTemplate",
      "newNodeTemplate"
    ];
    return Object.keys(this.options).forEach((o) => {
      t.includes(o) || (e[o] = this.options[o]);
    }), e;
  }
  printGraphJsonData() {
    u("graph options:", JSON.stringify(this.getGraphJsonOptions())), u("graph json data:", JSON.stringify(this.getGraphJsonData()));
  }
  getNodeById(e) {
    for (let t = 0; t < this.graphData.nodes.length; t++)
      if (this.graphData.nodes[t].id === e)
        return this.graphData.nodes[t];
  }
  getLinkById(e) {
    for (let t = 0; t < this.graphData.links.length; t++)
      if (this.graphData.links[t].seeks_id === e)
        return this.graphData.links[t];
  }
  getLinkByLineId(e) {
    for (let t = 0; t < this.graphData.links.length; t++)
      if (this.graphData.links[t].relations.findIndex((o) => o.id === e) !== -1)
        return this.graphData.links[t];
  }
  addNodes(e) {
    u("addNodes:", e), this.loadNodes(e), this._dataUpdated();
  }
  addLines(e) {
    u("addLines:", e), this.loadLines(e), this._dataUpdated();
  }
  addElementLines(e) {
    u("addElementLines:", e), e.forEach((t) => {
      const o = document.getElementById(t.from), i = document.getElementById(t.to);
      o || console.error("Can not found from HTMLElement: #" + t.from), i || console.error("Can not found toHTMLElement: #" + t.to);
      const a = be(t);
      let r = a.arrow;
      a.isHideArrow || (r = this.getLineArrow(a.color)), a.forDisplayOnly = !0;
      let c = !1;
      for (const l of this.graphData.elementLines)
        if (l.relations[0].from === a.from && l.relations[0].to === a.to || l.relations[0].from === a.to && l.relations[0].to === a.from) {
          c = !0;
          break;
        }
      if (!c) {
        a.id || (a.id = `rg-ell-${a.from}-${a.to}`), a.arrow = r;
        const l = {
          type: "el",
          nodeShape: 1,
          junctionPoint: "lr",
          x: 0,
          y: 0,
          el: {
            offsetWidth: 10,
            offsetHeight: 10
          }
        }, h = {
          type: "el",
          nodeShape: 1,
          junctionPoint: "lr",
          x: 0,
          y: 0,
          el: {
            offsetWidth: 10,
            offsetHeight: 10
          }
        }, f = {
          seeks_id: "ell-" + this.graphData.elementLines.length,
          fromNode: l,
          toNode: h,
          relations: [a],
          appended: !0,
          forDisplayOnly: !0
        };
        this._updateElementLinePosition(o, f.fromNode), this._updateElementLinePosition(i, f.toNode), this.graphData.elementLines.push(f);
      }
    }), this.updateElementLines(), this._dataUpdated();
  }
  getElementLineById(e) {
    for (const t of this.graphData.elementLines)
      if (t.seeks_id === e)
        return t;
  }
  getElementLines() {
    return this.graphData.elementLines.map((e) => e.relations[0]);
  }
  removeElementLine(e) {
    u("removeElementLine:", e), this.removeELementLineById(e.relations[0].id);
  }
  removeELementLineById(e) {
    u("removeELementLineById:", e);
    for (let t = 0; t < this.graphData.elementLines.length; t++)
      this.graphData.elementLines[t].relations[0].id === e && (this.graphData.elementLines.splice(t, 1), t--);
  }
  updateElementLines() {
    u("updateElementLines:", this.graphData.elementLines.length), this.graphData.elementLines.length !== 0 && (this.elLineUpdating || (this.elLineUpdating = !0, setTimeout(() => {
      this.elLineUpdating = !1, this._updateElementLines();
    }, 50)));
  }
  _updateElementLines() {
    this.graphData.elementLines.forEach((e) => {
      const t = document.getElementById(e.relations[0].from), o = document.getElementById(e.relations[0].to);
      if (!t) {
        e.relations[0].isHide = !0;
        return;
      }
      if (!o) {
        e.relations[0].isHide = !0;
        return;
      }
      if (this._updateElementLinePosition(t, e.fromNode), this._updateElementLinePosition(o, e.toNode), e.fromNode.el.offsetWidth === 0 && e.fromNode.el.offsetHeight === 0) {
        e.relations[0].isHide = !0;
        return;
      }
      if (e.toNode.el.offsetWidth === 0 && e.toNode.el.offsetHeight === 0) {
        e.relations[0].isHide = !0;
        return;
      }
      e.relations[0].isHide = !1;
    }), this._dataUpdated();
  }
  _updateElementLinePosition(e, t) {
    if (!e)
      return;
    const o = e.getBoundingClientRect(), i = this.$canvasDom.getBoundingClientRect();
    t.x = (o.x - i.x) / (this.options.canvasZoom / 100), t.y = (o.y - i.y) / (this.options.canvasZoom / 100), t.el.offsetWidth = o.width / (this.options.canvasZoom / 100), t.el.offsetHeight = o.height / (this.options.canvasZoom / 100);
  }
  getElementPosition(e) {
    const o = document.getElementById(e).getBoundingClientRect(), i = this.$canvasDom.getBoundingClientRect(), a = (o.x - i.x) / (this.options.canvasZoom / 100), r = (o.y - i.y) / (this.options.canvasZoom / 100);
    return { x: a, y: r };
  }
  removeNodeById(e) {
    let t = 0;
    for (let i = 0; i < this.graphData.links.length; i++) {
      const a = this.graphData.links[i];
      (a.fromNode.id === e || a.toNode.id === e) && (this.removeLink(a), i--, t++);
    }
    u("Removed link\uFF1A", e, t);
    let o = 0;
    for (let i = 0; i < this.graphData.nodes.length; i++)
      if (this.graphData.nodes[i].id === e) {
        this.graphData.nodes.splice(i, 1), o++;
        break;
      }
    u("Removed node\uFF1A", e, o), this._dataUpdated();
  }
  removeNode(e) {
    this.removeNodeById(e.id), this._dataUpdated();
  }
  removeLinkByTwoNode(e, t) {
    for (const o of this.getLinks())
      if (o.fromNode.id === e && o.toNode.id === t || o.fromNode.id === e && o.toNode.id === t) {
        this.removeLink(o);
        break;
      }
    this._dataUpdated();
  }
  getGroupByNode(e, t = []) {
    t.includes(e) || t.push(e);
    for (const o of e.targetNodes)
      t.includes(o) || this.getGroupByNode(o, t);
    return t;
  }
  _clearItem(e, t) {
    for (let o = 0; o < e.length; o++)
      e[o] === t && (e.splice(o, 1), o--);
  }
  removeNodeRef(e, t) {
    e && (e.targetNodes && this._clearItem(e.targetNodes, t), e.targetFrom && this._clearItem(e.targetFrom, t), e.targetTo && this._clearItem(e.targetTo, t));
  }
  removeLinkById(e) {
    u("removeLinkById:", e);
    for (let t = 0; t < this.graphData.links.length; t++) {
      const o = this.graphData.links[t];
      o.seeks_id === e && (this.removeNodeRef(o.fromNode, o.toNode), this.removeNodeRef(o.toNode, o.fromNode), this.graphData.links.splice(t, 1), t--);
    }
    this._dataUpdated();
  }
  removeLink(e) {
    u("removeLink:", e), this.removeLinkById(e.seeks_id), this._dataUpdated();
  }
  removeLine(e, t) {
    u("removeLine:", e, t);
    for (let o = 0; o < e.relations.length; o++)
      e.relations[o] === t && e.relations.splice(o, 1);
    e.relations.length === 0 && this.removeLink(e), this._dataUpdated();
  }
  setNodePosition(e, t, o) {
    e.x = t, e.y = o;
  }
  getGraphOffet() {
    const e = this.options.graphOffset_x || 0, t = this.options.graphOffset_y || 0;
    return {
      offset_x: e,
      offset_y: t
    };
  }
  setCanvasCenter(e, t) {
    const o = this.options.viewSize.width / 2, i = this.options.viewSize.height / 2, a = this.getGraphOffet();
    this.setCanvasOffset(o - e + a.offset_x, i - t + a.offset_y), this._dataUpdated();
  }
  setCanvasOffset(e, t) {
    this.options.canvasOffset.x = e, this.options.canvasOffset.y = t, this._dataUpdated();
  }
  findGroupNodes(e, t) {
    t.push(e), e.targetNodes.forEach((o) => {
      t.includes(o) || this.findGroupNodes(o, t);
    });
  }
  resetViewSize() {
    !this.options || (this.options.viewSize.width = this.$dom.getBoundingClientRect().width, this.options.viewSize.height = this.$dom.getBoundingClientRect().height, this.options.canvasZoom = 100, this.setCanvasCenter(0, 0), u("resetViewSize:1:", this.options.viewSize.width, this.options.viewSize.height, this.options.canvasOffset.x, this.options.canvasOffset.y), this.refreshNVAnalysisInfo(), this._dataUpdated());
  }
  refreshNVAnalysisInfo() {
    if (!this.$dom) {
      console.error("cannot get view size !");
      return;
    }
    const e = {
      NMCanvasCenter: { x: 0, y: 0 }
    }, t = this.$dom.getBoundingClientRect();
    this.options.viewNVInfo.x = t.left, this.options.viewNVInfo.y = t.top, this.options.viewNVInfo.width = t.width, this.options.viewNVInfo.height = t.height, u("resetViewSize:", t.width, t.height, t.left, t.top);
    const o = this.options.canvasSize.width * (this.options.canvasZoom / 100), i = this.options.canvasSize.height * (this.options.canvasZoom / 100);
    e.NMCanvasCenter.x = this.options.canvasOffset.x + this.options.canvasSize.width / 2, e.NMCanvasCenter.y = this.options.canvasOffset.y + this.options.canvasSize.height / 2, this.options.canvasNVInfo.x = e.NMCanvasCenter.x - o / 2, this.options.canvasNVInfo.y = e.NMCanvasCenter.y - i / 2, this.options.canvasNVInfo.width = o, this.options.canvasNVInfo.height = i, this.options.viewELSize.width = t.width, this.options.viewELSize.height = t.height, this.options.viewELSize.left = t.left, this.options.viewELSize.top = t.top;
  }
  getStuffSize(e) {
    const t = e || this.graphData.nodes;
    let o = 9999999, i = 9999999, a = 0, r = 0;
    t.forEach((f) => {
      q.isAllowShowNode(f) && (f.x < o && (o = f.x), f.x > a && (a = f.x + f.el.offsetWidth), f.y < i && (i = f.y), f.y > r && (r = f.y + f.el.offsetHeight));
    });
    const c = 100, l = a - o + c, h = r - i + c;
    return {
      width: l,
      height: h,
      minX: o,
      maxX: a,
      minY: i,
      maxY: r
    };
  }
  getNodesCenter() {
    const e = this.getStuffSize();
    u("getStuffSize:", e);
    const t = e.minX + (e.width - 100) / 2, o = e.minY + (e.height - 100) / 2;
    return {
      x: t,
      y: o
    };
  }
  querySearchAsync(e) {
    if (u("fetch-suggestions", e), e = e.trim(), e === "")
      return;
    const t = [];
    return this.graphData.nodes.forEach((o) => {
      u("fetch:", o.text), o.text.includes(e) && t.push(o);
    }), u("fetched:", t.length), t;
  }
  printOptions() {
    const e = this.getGraphJsonOptions();
    console.log("options:", e), console.log("options-json-string:"), console.log(JSON.stringify(e));
  }
  printData() {
    const e = this.getGraphJsonData();
    console.log("data:", e), console.log("data-json-string:"), console.log(JSON.stringify(e));
  }
  loading(e = "") {
    this.options.graphLoading = !0, this.options.graphLoadingText = e;
  }
  clearLoading() {
    this.options.graphLoading = !1, this.options.graphLoadingText = "";
  }
  updateVisbleViewNodes(e = !1) {
    !e && (!this.options.performanceMode || this.options.showEasyView) || this._updateVisbleViewNodes();
  }
  _updateVisbleViewNodes() {
    const e = this.getBoundingClientRect(), t = this.getCanvasCoordinateByClientCoordinate({
      x: e.x,
      y: e.y
    }), o = this.getCanvasCoordinateByClientCoordinate({
      x: e.x + this.options.viewELSize.width,
      y: e.y + this.options.viewELSize.height
    });
    let i = 0;
    for (const a of this.graphData.nodes) {
      if (a.alwaysRender) {
        a.invisiable = !1;
        continue;
      }
      let r = !1;
      (a.x > o.x || a.y > o.y) && (r = !0), (a.x + a.el.offsetWidth < t.x || a.y + a.el.offsetHeight < t.y) && (r = !0), a.invisiable = r, !r && i++;
    }
    for (const a of this.graphData.links) {
      let r = !1;
      a.fromNode.invisiable && a.toNode.invisiable && (r = !0), a.invisiable = r;
    }
    u("updateVisbleViewNodes:", this.options.showEasyView, o.x, i);
  }
}
class Xt extends Yt {
  constructor(s, e) {
    super(s, e);
  }
  dataURLToBlob(s) {
    const e = s.split(","), t = e[0], o = t && t.match(/:(.*?);/)[1], i = atob(e[1]);
    let a = i.length;
    const r = new Uint8Array(a);
    for (; a--; )
      r[a] = i.charCodeAt(a);
    return new Blob([r], { type: o });
  }
  async createGraphCanvas(s = "png") {
    return new Promise((e, t) => {
      const o = this.options.canvasZoom, i = this.$canvasDom.clientWidth, a = this.$canvasDom.clientHeight, r = this.options.canvasOffset.x, c = this.options.canvasOffset.y;
      this.options.checkedNodeId = "", this.options.canvasZoom = 100;
      const l = this.$canvasDom;
      let h = 999999, f = 999999, d = 0, g = 0;
      const p = 200;
      this.loading("Generating..."), this.graphData.nodes.forEach((k) => {
        k.x < h && (h = k.x), k.x > d && (d = k.x + k.el.offsetWidth), k.y < f && (f = k.y), k.y > g && (g = k.y + k.el.offsetHeight);
      });
      const m = h - p, v = f - p;
      this.graphData.nodes.forEach((k) => {
        k.x = k.x - m, k.y = k.y - v;
      }), this.$canvasDom.querySelectorAll(".rel-canvas-slot").forEach((k) => {
        const z = k;
        z.style.left = -v + "px", z.style.top = -v + "px";
      }), this.updateElementLines(), this.$canvasDom.querySelectorAll(".rel-lines-svg-el-lines").forEach((k) => {
        const z = k;
        z.style.width = "4000px", z.style.height = "4000px";
      }), this.options.canvasOffset.x = p * -1, this.options.canvasOffset.y = p * -1;
      const E = d - h + 200 + p * 2, B = g - f + 100 + p * 2, R = window.devicePixelRatio;
      this.options.canvasSize.width = E * R, this.options.canvasSize.height = B * R, window.scrollTo(0, 0);
      const V = document.createElement("canvas");
      V.width = E * R, V.height = B * R, V.style.backgroundColor = getComputedStyle(l.parentElement, null).backgroundColor, u("canvas.style.backgroundColor:", V.style.backgroundColor), V.style.width = `${E * R}px`, V.style.height = `${B * R}px`, V.getContext("2d").scale(1, 1);
      const I = {
        backgroundColor: V.style.backgroundColor,
        scale: R,
        canvas: V,
        logging: !0,
        width: E,
        height: B,
        useCORS: !0
      };
      setTimeout(() => {
        this.createImage(l, I, s, "", (k) => {
          this.options.canvasSize.width = i, this.options.canvasSize.height = a, this.options.canvasOffset.x = r, this.options.canvasOffset.y = c, this.options.canvasZoom = o, this.$canvasDom.querySelectorAll(".rel-canvas-slot").forEach(($) => {
            const D = $;
            D.style.left = "0px", D.style.top = "0px";
          }), this.graphData.nodes.forEach(($) => {
            $.x = $.x + m, $.y = $.y + v;
          }), this.$canvasDom.querySelectorAll(".rel-lines-svg-el-lines").forEach(($) => {
            const D = $;
            D.style.width = "1px", D.style.height = "1px";
          }), this.updateElementLines(), this.clearLoading(), e(k);
        });
      }, 1e3);
    });
  }
  createImage(s, e, t, o, i) {
    u("createImage:", e), vt(s, e).then((a) => {
      i && i(a);
    });
  }
  async getImageBase64(s = "png") {
    const e = await this.createGraphCanvas(s), t = document.body.appendChild(e);
    t.style.display = "none";
    const o = t.toDataURL(`image/${s}`);
    return document.body.removeChild(t), o;
  }
  async downloadAsImage(s = "png", e) {
    if (this.listeners.onImageDownload && this.listeners.onImageDownload(this.$canvasDom, s) === !1)
      return;
    if (this.graphData.nodes.length === 0)
      throw new Error("No nodes, no content to export!");
    e || (e = this.options.downloadImageFileName), e || (e = `relation-graph-${(Math.random() * 1e5).toFixed(0)}`);
    const t = await this.createGraphCanvas(s);
    u("downloadImageAsFile:", s, e);
    let o = !0;
    this.listeners.onImageSaveAsFile && this.listeners.onImageSaveAsFile(
      t,
      s,
      e
    ) === !1 && (o = !1), o && await this.downloadImageAsFile(t, s, e);
  }
  async downloadImageAsFile(s, e, t) {
    const o = document.body.appendChild(s);
    o.style.display = "none";
    const i = this.dataURLToBlob(o.toDataURL(`image/${e}`));
    document.body.removeChild(o);
    const a = document.createElement("a");
    a.style.display = "none";
    try {
      window.navigator.msSaveOrOpenBlob ? window.navigator.msSaveOrOpenBlob(i, `${t}.${e}`) : (a.setAttribute("href", URL.createObjectURL(i)), a.setAttribute("download", `${t}.${e}`), document.body.appendChild(a), a.click(), u("click ok!"), URL.revokeObjectURL(await i.text()), u("revokeObjectURL ok!"), document.body.removeChild(a), u("removeChild ok!"));
    } catch (r) {
      u("[SEEKS Graph]Create and download image error:", r);
    }
  }
}
class Zt extends Xt {
  constructor(s, e) {
    super(s, e);
  }
  createReturnValue(s, e) {
    return { path: s, textPosition: e };
  }
  createLinePath(s, e, t) {
    let o = s.fromNode;
    o || (o = {
      x: 0,
      y: 0,
      el: {
        offsetWidth: 10,
        offsetHeight: 10
      }
    });
    const i = s.toNode, a = s.relations.length;
    return t || (t = 0), this.createLinePathByTwoNode(o, i, e, t, a);
  }
  _getJunctionPoint(s, e) {
    return s === se.border ? j.getBorderPoint4MultiLine(...e) : s === se.ltrb ? j.getRectJoinPoint(...e) : s === se.tb ? j.getRectVJoinPoint(...e) : s === se.lr ? j.getRectHJoinPoint(...e) : s === se.left ? j.getRectLeftJoinPoint(...e) : s === se.right ? j.getRectRightJoinPoint(...e) : s === se.top ? j.getRectTopJoinPoint(...e) : s === se.bottom ? j.getRectBottomJoinPoint(...e, this.options.defaultBottomJuctionPoint_X) : j.getBorderPoint4MultiLine(...e);
  }
  createLinePathByTwoNode(s, e, t, o = 0, i = 1) {
    const a = t.lineShape || this.options.defaultLineShape || 1, r = t.lineDirection || this.options.layoutDirection || "h";
    let c = s, l = e, h = c.x, f = c.y, d = l.x, g = l.y;
    const p = { x: 0, y: 0, rotate: 0 };
    if (Number.isNaN(h) || Number.isNaN(f))
      return u("error start node:", c.text, c.x, c.y), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L -10 -10", p);
    if (Number.isNaN(d) || Number.isNaN(g))
      return u("error end point:", l.text, l.x, l.y), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L 10 -10", p);
    let m = c.el.offsetWidth || c.width || 60, v = c.el.offsetHeight || c.height || 60;
    if (Number.isNaN(m) || Number.isNaN(v))
      return p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L -10 10", p);
    let x = l.el.offsetWidth || l.width || 60, T = l.el.offsetHeight || l.height || 60;
    if (Number.isNaN(x) || Number.isNaN(T))
      return p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L 10 10", p);
    const E = c.nodeShape !== void 0 && c.nodeShape !== null ? c.nodeShape : this.options.defaultNodeShape, B = [
      h,
      f,
      d,
      g,
      m,
      v,
      x,
      T,
      E,
      !1,
      i,
      o,
      this.options.multiLineDistance || 14
    ], R = l.nodeShape !== void 0 && l.nodeShape !== null ? l.nodeShape : this.options.defaultNodeShape, V = [
      d,
      g,
      h,
      f,
      x,
      T,
      m,
      v,
      R,
      !1,
      i,
      i - o - 1,
      this.options.multiLineDistance || 14
    ], I = this.options.defaultJunctionPoint || se.border, k = t.fromJunctionPoint || c.junctionPoint || I, z = t.toJunctionPoint || l.junctionPoint || I, N = this._getJunctionPoint(k, B), $ = this._getJunctionPoint(z, V);
    if (!N || !$)
      return this.createReturnValue(
        "Unable to calculate the starting point and ending point of the line.",
        p
      );
    const D = N.x, W = N.y, O = $.x, S = $.y;
    if (c === l) {
      const te = h + m / 2, oe = f + v / 2, We = Math.atan2(W - oe, D - te), pe = Math.sin(We + Math.PI) * 5, ye = Math.cos(We + Math.PI) * 5, He = { x: D - pe, y: W - ye }, Fe = { x: pe, y: ye }, at = -ye * 5, lt = -pe * 5, rt = -ye * 5, ct = -pe * 5, ht = `M ${He.x},${He.y} c ${at},${lt} ${rt},${ct} ${Fe.x},${Fe.y}`;
      return p.x = D - ye / (ye + pe) * 20, p.y = W + pe / (ye + pe) * 20, p.rotate = 0, this.createReturnValue(ht, p);
    }
    if (Number.isNaN(D) || Number.isNaN(W))
      return u("error start point:", c.text), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L -10 0", p);
    if (Number.isNaN(O) || Number.isNaN(S))
      return u("error end point:", l.text), p.x = 50, p.y = 50, p.rotate = 0, this.createReturnValue("M 0 0 L 10 0", p);
    const _e = h + m / 2, le = f + v / 2, M = d + x / 2, ee = g + T / 2, G = this.createLinePathData(
      t,
      p,
      i,
      o,
      r,
      a,
      D,
      W,
      _e,
      le,
      m,
      v,
      O,
      S,
      M,
      ee,
      x,
      T
    );
    return this.createReturnValue(G, p);
  }
  createLinePathData(s, e, t, o, i, a, r, c, l, h, f, d, g, p, m, v, x, T) {
    let E = g - r, B = p - c, R = g > r ? 1 : -1, V = p > c ? 1 : -1, I = i === "v" ? V : R, k = "";
    if (a === 4) {
      const z = r - l, N = c - h, $ = g - m, D = p - v;
      let W = this.options.defaultPolyLineRadius || 0;
      const O = Math.min(W, Math.abs(E)) * (r < g ? 1 : -1), S = Math.min(W, Math.abs(B)) * (c < p ? 1 : -1), _e = Math.abs(z) >= f / 2 ? "h" : "v", le = Math.abs($) >= x / 2 ? "h" : "v", M = [];
      if (_e === "v") {
        const ee = s.polyLineStartDistance || Math.max(Math.min(30, Math.abs(p - c) / 2), 15), G = N > 0 ? ee : -ee;
        if (s.placeText === "start" ? (e.x = r, e.y = c + G - (N > 0 ? 20 : -5)) : s.placeText === "middle" ? (e.x = r + (g - r) / 2, e.y = c + G) : (e.x = g, e.y = c + G + (N > 0 ? 20 : -5)), M.push(`M ${r} ${c}`), M.push(`v ${G - S}`), le === "v")
          M.push(`c ${0},${S},`), M.push(`${O},${S},`), M.push(`${O},${S}`), M.push(`h ${g - r - O * 2}`), M.push(`c ${O},${0},`), M.push(`${O},${S},`), M.push(`${O},${S}`), M.push(`v ${p - c - G - S}`);
        else {
          M.push(`c ${0},${S},`), M.push(`${O},${S},`), M.push(`${O},${S}`);
          const te = Math.min(30, Math.abs(g - r) / 2), oe = $ > 0 ? -te : te;
          M.push(`h ${g - r + oe - O}`), M.push(`c ${O},${0},`), M.push(`${O},${S},`), M.push(`${O},${S}`), M.push(`v ${p - c - G - S}`), M.push(`h ${oe - O}`);
        }
      } else {
        const ee = s.polyLineStartDistance || Math.max(Math.min(30, Math.abs(g - r) / 2), 15), G = z > 0 ? ee : -ee;
        if (s.placeText === "start" ? (e.x = r + (z > 0 ? 10 : -50), e.y = c - 5) : s.placeText === "middle" ? (e.x = r + G, e.y = c + (p - c) / 2) : (e.x = r + G + (z > 0 ? 20 : -50), e.y = p - 5), M.push(`M ${r} ${c}`), M.push(`h ${G - O}`), le === "v") {
          const te = Math.min(30, Math.abs(p - c) / 2), oe = D > 0 ? -te : te;
          M.push(`c ${O},${0},`), M.push(`${O},${S},`), M.push(`${O},${S}`), M.push(`v ${p - c + oe - S}`), M.push(`h ${g - r - G - O}`), M.push(`c ${0},${S},`), M.push(`${O},${S},`), M.push(`${O},${S}`), M.push(`v ${oe - S}`);
        } else
          M.push(`c ${O},${0},`), M.push(`${O},${S},`), M.push(`${O},${S}`), M.push(`v ${p - c - S * 2}`), M.push(`c ${0},${S},`), M.push(`${O},${S},`), M.push(`${O},${S}`), M.push(`h ${g - r - G - O}`);
      }
      k = M.join(" ");
    } else if (a === 41) {
      const z = c - h;
      let N = this.options.defaultPolyLineRadius || 0;
      const $ = Math.min(N, Math.abs(E)) * (r < g ? 1 : -1), D = Math.min(N, Math.abs(B)) * (c < p ? 1 : -1), W = [], O = s.polyLineStartDistance || Math.max(Math.min(30, Math.abs(p - c) / 2), 15), S = z > 0 ? O : -O;
      s.placeText === "start" ? (e.x = r, e.y = c + S - (z > 0 ? 20 : -5)) : s.placeText === "middle" ? (e.x = r + (g - r) / 2, e.y = c + S) : (e.x = g, e.y = c + S + (z > 0 ? 20 : -5)), W.push(`M ${r} ${c}`), W.push(`v ${p - c - D}`), W.push(`c ${0},${D},`), W.push(`${$},${D},`), W.push(`${$},${D}`), W.push(`h ${g - r - $}`), k = W.join(" ");
    } else if (a === 2 || a === 3 || a === 5 || a === 6 || a === 7 || a === 8) {
      const z = r - l, N = c - h, $ = g - m, D = p - v, W = 1 / (t + 1) * (o + 1);
      let O, S;
      if (a === 2)
        O = i === "v" ? { x: 0, y: I * 30 } : { x: I * 30, y: 0 }, S = i === "v" ? { x: E * W, y: I * -10 } : { x: I * -10, y: B * W };
      else if (a === 3)
        O = i === "v" ? { x: 0, y: B * W } : { x: I * 30, y: 0 }, S = i === "v" ? { x: 0, y: 0 } : { x: I * -10, y: B * W };
      else if (a === 5)
        O = i === "v" ? { x: 0, y: 0 } : { x: 0, y: 0 }, S = i === "v" ? { x: 0, y: B * W } : { x: E * W, y: 0 };
      else if (a === 6) {
        const le = Math.min(200, Math.max(100, Math.abs(E / 2))), M = Math.min(200, Math.max(100, Math.abs(B / 2))), ee = z / (Math.abs(z) + Math.abs(N)) * le, G = N / (Math.abs(z) + Math.abs(N)) * M;
        O = { x: ee, y: G };
        const te = $ / (Math.abs($) + Math.abs(D)) * le + E, oe = D / (Math.abs($) + Math.abs(D)) * M + B;
        S = { x: te, y: oe };
      } else if (a === 7) {
        const ee = z / (Math.abs(z) + Math.abs(N)) * 30, G = N / (Math.abs(z) + Math.abs(N)) * 30;
        O = { x: ee, y: G };
        const te = $ / (Math.abs($) + Math.abs(D)) * 30 + E, oe = D / (Math.abs($) + Math.abs(D)) * 30 + B;
        S = { x: te, y: oe };
      } else if (a === 8) {
        const ee = z / (Math.abs(z) + Math.abs(N)) * 30, G = N / (Math.abs(z) + Math.abs(N)) * 30;
        O = { x: ee, y: G };
        const te = $ / (Math.abs($) + Math.abs(D)) * 30 + E, oe = D / (Math.abs($) + Math.abs(D)) * 30 + B;
        S = { x: te, y: oe };
      }
      const _e = this.calcCurveCenter(
        { x: r, y: c },
        { x: r + O.x, y: c + O.y },
        { x: r + S.x, y: c + S.y },
        { x: r + E, y: c + B },
        a < 6 ? 0.8 : 0.5
      );
      e.x = _e.x, e.y = _e.y, k = `M ${r},${c} c ${O.x},${O.y} ${S.x},${S.y} ${E},${B}`, a === 8 && (k = k + " Z");
    } else
      e.rotate = j.getTextAngle(r, c, g, p), e.x = Math.round(r + (g - r) / 2), e.y = Math.round(c + (p - c) / 2), Number.isNaN(e.rotate) && (e.rotate = 0), k = `M ${r} ${c} L ${g} ${p}`;
    return k;
  }
  calcCurveCenter(s, e, t, o, i = 0.5) {
    const a = { x: (1 - i) * s.x + i * e.x, y: (1 - i) * s.y + i * e.y }, r = { x: (1 - i) * e.x + i * t.x, y: (1 - i) * e.y + i * t.y }, c = { x: (1 - i) * t.x + i * o.x, y: (1 - i) * t.y + i * o.y }, l = { x: (1 - i) * a.x + i * r.x, y: (1 - i) * a.y + i * r.y }, h = { x: (1 - i) * r.x + i * c.x, y: (1 - i) * r.y + i * c.y };
    return { x: (1 - i) * l.x + i * h.x, y: (1 - i) * l.y + i * h.y };
  }
  createCheckedLinePath() {
    const s = this.options.checkedLineId;
    if (!!s)
      try {
        const e = this.getElementLineById(this.options.checkedLinkId);
        if (e) {
          const { path: r } = this.createLinePath(
            e,
            e.relations[0],
            0
          );
          return r;
        }
        const t = this.getLinkByLineId(s);
        if (!t) {
          u("Can not find link by checkedLineId:", s);
          return;
        }
        if (!q.isAllowShowNode(t.fromNode)) {
          u("from hide:", s);
          return;
        }
        if (!q.isAllowShowNode(t.toNode)) {
          u("to hide:", s);
          return;
        }
        const o = t.relations.findIndex((r) => r.id === s);
        if (o === -1) {
          u("Can not find checkedLineId:", s);
          return;
        }
        const i = t.relations[o], { path: a } = this.createLinePath(
          t,
          i,
          o
        );
        return a;
      } catch (e) {
        u(e);
      }
  }
  createCheckedLineStrokeWidth() {
    const s = this.options.checkedLineId;
    if (!s)
      return this.options.defaultLineWidth + 8;
    try {
      const e = this.getLinkByLineId(s);
      if (!e)
        return this.options.defaultLineWidth + 8;
      const t = e.relations.findIndex((i) => i.id === s);
      if (t === -1)
        return this.options.defaultLineWidth + 8;
      const o = e.relations[t];
      return o.lineWidth ? o.lineWidth + 8 : this.options.defaultLineWidth + 8;
    } catch (e) {
      u(e);
    }
  }
  getTextTransform(s, e, t, o) {
    if (Number.isNaN(e) || Number.isNaN(t))
      return "translate(0,0)";
    const i = s.lineShape === void 0 ? this.options.defaultLineShape : s.lineShape;
    return i === 1 || i === 4 ? `translate(${e},${t})rotate(${o || 0})` : `translate(${e},${t})`;
  }
  getArrow(s, e, t = !1) {
    if (t) {
      if (s.isReverse) {
        if (s.showEndArrow === !1)
          return;
      } else if (s.showStartArrow !== !0)
        return;
    } else if (s.isReverse) {
      if (s.showStartArrow !== !0)
        return;
    } else if (s.showEndArrow === !1)
      return;
    const o = !1;
    return s.isHideArrow ? "none" : `url('#${this.getLineArrow(
      s.color,
      t,
      o
    )}')`;
  }
  getLineTextStyle(s, e, t) {
    let o = e.text;
    if (!o)
      return null;
    let i = 0;
    const a = s.fromNode.x, r = s.toNode.x;
    o.length > this.options.lineTextMaxLength && (o = o.substring(0, this.options.lineTextMaxLength || 15) + "..."), (e.useTextPath !== void 0 ? e.useTextPath : this.options.lineUseTextPath) && a > r && (i = 180, o = o.split("").reverse().join(""));
    const l = e.textOffset_x || this.options.defaultLineTextOffset_x || 0, h = e.textOffset_y || this.options.defaultLineTextOffset_y || -8, f = `translate(${l},${h})`;
    let d = "middle";
    (e.lineShape === 4 || this.options.defaultLineShape === 4) && (d = "start");
    let g = "50%";
    if (e.lineShape === 4 || this.options.defaultLineShape === 4)
      if (e.placeText === "start")
        g = "10%", d = "start";
      else if (e.placeText === "end")
        g = "90%", d = "end";
      else if (e.placeText)
        g = e.placeText, d = "start";
      else if (this.options.layoutDirection === "v") {
        const p = s.fromNode.x, m = s.toNode.x;
        g = String(Math.abs(m - p) + 43);
      } else {
        const p = s.fromNode.y, m = s.toNode.y;
        g = String(Math.abs(m - p) + 43);
      }
    else
      e.placeText === "start" ? (g = "10%", d = "start") : e.placeText === "end" ? (g = "90%", d = "end") : e.placeText ? (g = e.placeText, d = "start") : (g = "50%", d = "middle");
    return {
      text: o,
      textOffset: f,
      textAnchor: d,
      textHPosition: g,
      textRotate: i
    };
  }
}
class jt extends Zt {
  constructor(e, t) {
    super(e, t);
    _(this, "zoomCenter_of_newSize", { x: 0, y: 0 });
  }
  zoom(e, t) {
    this.options.canvasZoom + e < 5 && (u("zoom:reset zoom=10"), e = 5 - this.options.canvasZoom);
    const o = this.options.canvasZoom, i = this.options.canvasZoom + e, a = this.showZoomCenter(t, e);
    this.options.canvasOffset.x += a.buff_x, this.options.canvasOffset.y += a.buff_y, this.options.canvasZoom = i, this.refreshNVAnalysisInfo(), this.listeners.onZoomEnd && this.listeners.onZoomEnd(), o <= 40 && i > 40 && (this.options.performanceMode && this.updateVisbleViewNodes(!0), this.options.showEasyView = !1, u("zoom:hide:showEasyView", o, i), setTimeout(() => {
      this.updateElementLines();
    }, 150)), o > 40 && i <= 40 && (u("zoom:show:showEasyView", o, i), this.options.performanceMode && (this.options.showEasyView = !0)), this._dataUpdated(), this.emitEvent("zoom", { canvasZoom: this.options.canvasZoom });
  }
  setZoom(e, t) {
    const o = Math.floor(e - this.options.canvasZoom);
    this.zoom(o, t);
  }
  getCanvasCoordinateByClientCoordinate(e) {
    const t = this.options.canvasZoom / 100, { NMCanvasStart: o, NMZoomCenter: i } = this.analysisByZoom(t, e), a = {
      x: i.x - o.x,
      y: i.y - o.y
    };
    return {
      x: a.x / t,
      y: a.y / t
    };
  }
  getClientCoordinateByCanvasCoordinate(e) {
    const t = this.options.canvasZoom / 100, { NMCanvasStart: o } = this.analysisByZoom(t), i = {
      x: e.x * t + o.x,
      y: e.y * t + o.y
    };
    return {
      x: i.x + this.options.canvasOffset.x,
      y: i.y + this.options.canvasOffset.y
    };
  }
  analysisByZoom(e, t) {
    const o = {
      NMViewPosition: { x: 0, y: 0 },
      NMViewCenter: { x: 0, y: 0 },
      NMCanvasCenter: { x: 0, y: 0 },
      NMCanvasStart: { x: 0, y: 0 },
      NMCanvasEnd: { x: 0, y: 0 },
      NMZoomCenter: { x: 0, y: 0 },
      NMViewBuff: { x: 0, y: 0 },
      NMCanvasOffsetBuff: { x: 0, y: 0 },
      NMCanvasSize: { width: 0, height: 0 }
    }, i = this.$dom.getBoundingClientRect();
    o.NMViewPosition.x = i.left, o.NMViewPosition.y = i.top, o.NMViewCenter.x = i.width / 2, o.NMViewCenter.y = i.height / 2;
    const a = this.options.canvasSize.width * e, r = this.options.canvasSize.height * e;
    o.NMCanvasCenter.x = this.options.canvasOffset.x + this.options.canvasSize.width / 2, o.NMCanvasCenter.y = this.options.canvasOffset.y + this.options.canvasSize.height / 2, o.NMCanvasStart.x = o.NMCanvasCenter.x - a / 2, o.NMCanvasStart.y = o.NMCanvasCenter.y - r / 2, o.NMCanvasEnd.x = o.NMCanvasCenter.x + a / 2, o.NMCanvasEnd.y = o.NMCanvasCenter.y + r / 2, o.NMZoomCenter.x = o.NMViewCenter.x, o.NMZoomCenter.y = o.NMViewCenter.y, t && (o.NMZoomCenter.x = t.x - o.NMViewPosition.x, o.NMZoomCenter.y = t.y - o.NMViewPosition.y);
    let c = o.NMViewCenter.x - o.NMCanvasCenter.x, l = o.NMViewCenter.y - o.NMCanvasCenter.y;
    return t && (c = o.NMZoomCenter.x - o.NMCanvasCenter.x, l = o.NMZoomCenter.y - o.NMCanvasCenter.y), o.NMViewBuff.x = c, o.NMViewBuff.y = l, o.NMCanvasSize.width = a, o.NMCanvasSize.height = r, o;
  }
  showZoomCenter(e, t) {
    if (!this.$dom)
      return { buff_x: 0, buff_y: 0 };
    const o = this.options.canvasZoom / 100, i = this.analysisByZoom(o, e), a = (this.options.canvasZoom + t) / 100, r = this.analysisByZoom(a, e), c = a / o, l = 0, h = 0, f = a / o, d = 0, g = 0;
    this.zoomCenter_of_newSize.x = c * i.NMViewBuff.x + h * i.NMViewBuff.y + d, this.zoomCenter_of_newSize.y = l * i.NMViewBuff.x + f * i.NMViewBuff.y + g;
    const p = i.NMViewBuff.x - this.zoomCenter_of_newSize.x, m = i.NMViewBuff.y - this.zoomCenter_of_newSize.y;
    this.zoomCenter_of_newSize.x += i.NMCanvasCenter.x, this.zoomCenter_of_newSize.y += i.NMCanvasCenter.y;
    let v = i.NMCanvasStart.x - i.NMCanvasCenter.x, x = i.NMCanvasStart.y - i.NMCanvasCenter.y, T = c * v + h * x + d, E = l * v + f * x + g;
    return r.NMCanvasStart.x = p + i.NMCanvasCenter.x + T, r.NMCanvasStart.y = p + i.NMCanvasCenter.y + E, v = i.NMCanvasEnd.x - i.NMCanvasCenter.x, x = i.NMCanvasEnd.y - i.NMCanvasCenter.y, T = c * v + h * x + d, E = l * v + f * x + g, r.NMCanvasEnd.x = p + i.NMCanvasCenter.x + T, r.NMCanvasEnd.y = p + i.NMCanvasCenter.y + E, i.NMCanvasOffsetBuff.x = p, i.NMCanvasOffsetBuff.y = m, {
      buff_x: p,
      buff_y: m
    };
  }
}
class Jt extends jt {
  constructor(s, e) {
    super(s, e);
  }
  async doLayout() {
    if (!this.layouter) {
      u("no layouter");
      return;
    }
    if (!this.graphData.rootNode) {
      u("Cant find rootNode!");
      return;
    }
    this.options.showMaskWhenLayouting && this.loading(), await Ue(300), this.options.canvasOpacity = 1, this._dataUpdated(), this.options.showMaskWhenLayouting && this.clearLoading(), u("node size\uFF1A", this.graphData.nodes.length);
    const s = this.options.useAnimationWhenExpanded;
    this.disableNextLayoutAnimation && (this.options.useAnimationWhenExpanded = !1), this.layouter.requireLinks && this.layouter.setLinks(this.getLinks()), this.layouter.viewUpdate = () => {
      this._dataUpdated();
    }, await this.layouter.placeNodes(this.graphData.nodes, this.graphData.rootNode), this.options.useAnimationWhenExpanded = s, this.disableNextLayoutAnimation = !1, this.updateElementLines(), this._dataUpdated();
  }
  async refresh(s = !0) {
    this.resetViewSize(), this.disableNextLayoutAnimation = !0, this._dataUpdated(), s && await this.doLayout(), u("placeOtherNodes"), await this.placeOtherNodes(), u("placeOtherNodes ok!"), await this.playShowEffect(), this.updateElementLines(), this._dataUpdated();
  }
  async playShowEffect() {
    if (this.graphData.nodes.length === 0) {
      u("relation-graph:move to center: data not ready!");
      return;
    }
    if (u("playShowEffect:", this.options.moveToCenterWhenRefresh, this.options.zoomToFitWhenRefresh), this.graphData.rootNode && Number.isNaN(this.graphData.rootNode.x)) {
      u("rootNode.x is NaN, graph is currently hidden?");
      return;
    }
    this.options.moveToCenterWhenRefresh ? await this.moveToCenter() : (this.setCanvasCenter(0, 0), this._dataUpdated()), await this.zoomToFitWhenRefresh();
  }
  async moveToCenter() {
    if (this.options.useAnimationWhenRefresh) {
      const s = this.getNodesCenter();
      u("center:", s.x, s.y);
      const e = this.getGraphOffet();
      u("centerOffset:", e.offset_x, e.offset_y);
      const t = this.options.viewSize.width / 2 - s.x + e.offset_x, o = this.options.viewSize.height / 2 - s.y + e.offset_y;
      await this.animateGoto(t, o, 500), this._dataUpdated();
    } else {
      const s = this.getNodesCenter();
      u("center:", s.x, s.y), this.setCanvasCenter(s.x, s.y), this._dataUpdated();
    }
  }
  async zoomToFitWhenRefresh() {
    this.options.zoomToFitWhenRefresh && await this.zoomToFit();
  }
  async placeOtherNodes() {
    const s = [];
    this.graphData.rootNode && this.findGroupNodes(this.graphData.rootNode, s);
    const e = [], t = [];
    this.graphData.nodes.forEach((o) => {
      s.includes(o) || (this.options.placeSingleNode && (!o.targetNodes || o.targetNodes.length === 0) && o.fixed !== !0 ? (o.x = Math.floor(Math.random() * 200) - 100, o.y = Math.floor(Math.random() * 200) - 100, o.lot || (o.lot = { childs: [] }), o.lot.placed = !0, o.singleNode = !0, t.push(o)) : e.push(o));
    }), this.options.placeSingleNode && this.layouter.layoutOptions.layoutName !== "fixed" && this.placeSingleNodes(t), this.options.placeOtherGroup && this.layouter.layoutOptions.layoutName !== "fixed" && (await this.placeOtherGroup(e, s), this._dataUpdated(), this.layouter.layoutOptions.layoutName === "force" && (this.stopAutoLayout(), setTimeout(() => {
      this.startAutoLayout();
    }, 500)));
  }
  placeSingleNodes(s) {
    if (s.length > 0) {
      u("sigle nodes:", s.length);
      const e = new Le({ layoutName: "force" }, this.options, this);
      e.allNodes = this.graphData.nodes, e.fastStart = !0, e.justLayoutSingleNode = !0, e.maxLayoutTimes = 100, e.byLine = !1, e.autoLayout(!0);
    }
  }
  async placeOtherGroup(s, e) {
    if (s.length > 0) {
      u("[placeOtherGroup]notPlacedNodes nodes:", s.length);
      const t = JSON.parse(JSON.stringify(this.layouter.layoutOptions)), o = s[0], i = Se(t, this.options, this);
      i.isMainLayouer = !1;
      const a = this.getStuffSize(e);
      u("[placeOtherGroup]placeOtherGroup:", i.layoutOptions.layoutName, "root:", o.text);
      let r = this.layouter.layoutOptions.layoutName.includes("tree") ? 300 : 600;
      if (i.layoutOptions.layoutName === "force") {
        const h = i;
        h.maxLayoutTimes = 0, r = 100;
      }
      o.x = a.maxX + r, o.y = 0, i.layoutOptions.fixedRootNode = !0;
      const c = [];
      this.findGroupNodes(o, c), u("[placeOtherGroup]thisGroupNodes:", s.length), this.layouter.requireLinks && this.layouter.setLinks(this.getLinks()), await i.placeNodes(c, o), e.push(...c);
      const l = [];
      s.forEach((h) => {
        e.includes(h) || l.push(h);
      }), await this.placeOtherGroup(l, e), this._dataUpdated();
    }
  }
  async zoomToFit(s) {
    const e = this.getStuffSize(), t = this.options.viewSize.width / e.width, o = this.options.viewSize.height / e.height, i = Math.min(t, o, 1);
    u("zoomToFit:", { stuffSize: e, zoomPercent: i, zoomPercentX: t, zoomPercentY: o, viewSize: this.options.viewSize }), this.options.useAnimationWhenRefresh ? (await this.animateToZoom(i * 100, 300), this._dataUpdated(), s && s()) : (this.setZoom(i * 100), this._dataUpdated(), s && s());
  }
  async animateGoto(s, e, t) {
    return new Promise((o, i) => {
      u("animateGoto:", s, e);
      const a = s - this.options.canvasOffset.x, r = e - this.options.canvasOffset.y, c = t, l = 5, h = Math.round(a / l), f = Math.round(r / l), d = c / l;
      this.animateStepAction(0, d, l, () => {
        this.options.canvasOffset.x += h, this.options.canvasOffset.y += f, this._dataUpdated();
      }, () => {
        o();
      });
    });
  }
  async animateToZoom(s, e) {
    return new Promise((t, o) => {
      const i = s - this.options.canvasZoom, a = e, r = 5, c = Math.round(i / r), l = a / r;
      u("animateToZoom:", i, c), this.animateStepAction(0, l, r, () => {
        this.zoom(c), this._dataUpdated();
      }, () => {
        this.setZoom(s), this._dataUpdated(), t();
      });
    });
  }
  animateStepAction(s, e, t, o, i) {
    s < t ? (o(s, t), setTimeout(() => {
      this.animateStepAction(s + 1, e, t, o, i);
    }, e)) : i();
  }
  toggleAutoLayout() {
    this.options.autoLayouting = !this.options.autoLayouting, u("toggleAutoLayout:to:", this.options.autoLayouting), this.options.autoLayouting ? this.startAutoLayout() : this.stopAutoLayout();
  }
  startAutoLayout() {
    this.options.autoLayouting = !0, this.layouter.autoLayout ? (u("startAutoLayout:"), this.layouter.autoLayout(!0)) : u("Current layout not support autoLayout()");
  }
  stopAutoLayout() {
    this.options.autoLayouting = !1, this.layouter.stop ? this.layouter.stop() : u("Current layout not support stop()");
  }
  async sleep(s) {
    await Ue(s);
  }
}
let ge = { x: 0, y: 0 };
const me = { x: 0, y: 0 }, ve = { x: 0, y: 0 };
let $e, Be;
const Xe = (n) => {
  const s = {
    clientX: 0,
    clientY: 0
  };
  if (fe(n)) {
    const e = n.touches || n.targetTouches;
    if (!e)
      throw new Error("error targetTouches");
    s.clientX = e[0].clientX, s.clientY = e[0].clientY;
  } else
    s.clientX = n.clientX, s.clientY = n.clientY;
  return s;
}, ie = {
  startDrag(n, s, e, t) {
    t ? $e = (o, i, a) => {
      const r = o - ve.x, c = i - ve.y;
      t(r, c, me, ve, a);
    } : $e = (o, i) => {
      ge.x = me.x + (o - ve.x), ge.y = me.y + (i - ve.y);
    }, Be = e, ge = s, me.x = ge.x, me.y = ge.y, u("[canvas]onDragStart...", fe(n), n);
    try {
      const o = Xe(n);
      ve.x = o.clientX, ve.y = o.clientY, fe(n) ? (document.body.addEventListener("touchmove", ie.onNodeMove), document.body.addEventListener("touchend", ie.onNodeDragend), n.preventDefault()) : (document.body.addEventListener("mousemove", ie.onNodeMove), document.body.addEventListener("mouseup", ie.onNodeDragend));
    } catch (o) {
      console.error(o.message);
    }
  },
  onNodeMove(n) {
    const s = Xe(n);
    $e(s.clientX, s.clientY, n);
  },
  onNodeDragend(n) {
    fe(n) ? (document.body.removeEventListener("touchmove", ie.onNodeMove), document.body.removeEventListener("touchend", ie.onNodeDragend)) : (document.body.removeEventListener("mousemove", ie.onNodeMove), document.body.removeEventListener("mouseup", ie.onNodeDragend)), u("[canvas]onDragend...", fe(n), n), Be && Be(
      ge.x - me.x,
      ge.y - me.y,
      n
    );
  }
}, qt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: ie
}, Symbol.toStringTag, { value: "Module" }));
class Kt extends Jt {
  constructor(e, t) {
    super(e, t);
    _(this, "prevClickTime", 0);
    _(this, "movingListener");
    _(this, "step1EventTime", 0);
    _(this, "onCreateLineCallback");
  }
  setDefaultLineShape(e) {
    this.options.defaultLineShape = e;
  }
  setDefaultJunctionPoint(e) {
    this.options.defaultJunctionPoint = e;
  }
  setCheckedNode(e) {
    this.options.checkedNodeId = e;
  }
  setCheckedLinkAndLine(e, t) {
    this.options.checkedLinkId = e.seeks_id, this.options.checkedLineId = t ? t.id : "";
  }
  clearChecked() {
    this.options.checkedNodeId = "", this.options.checkedLineId = "", this.options.checkedLinkId = "";
  }
  selectNode(e, t) {
    e.selected = t;
  }
  flashNode(e, t) {
    e.flashing = t;
  }
  updateNodeOffsetSize(e, t, o) {
    e.el.offsetWidth = t, e.el.offsetHeight = o;
  }
  onNodeClick(e, t) {
    if (Date.now() - this.prevClickTime < 200) {
      u("[node]click abort : time < 200");
      return;
    }
    if (this.prevClickTime = Date.now(), this.options.creatingLinePlot) {
      this.onNodeClickWhenCreatingLinePlot(e);
      return;
    }
    u("[node]node click", e.text, this.options.creatingLinePlot), !t.shiftKey && this.options.disableNodeClickEffect !== !0 && e.disableDefaultClickEffect !== !0 && (this.options.checkedLinkId = "", this.options.checkedLineId = "", this.setCheckedNode(e.id)), this.listeners.onNodeClick && this.listeners.onNodeClick(e, t), this.prevClickTime = Date.now();
  }
  onNodeDragStart(e, t) {
    if (this.options.disableDragNode || e.disableDrag)
      return;
    isNaN(e.x) && (e.x = 0), isNaN(e.y) && (e.y = 0), e.dragging = !0, this.listeners.onNodeDragStart && this.listeners.onNodeDragStart(e, t), this.emitEvent("node-drag-start", { node: e });
    const o = (i, a, r) => {
      e.dragging = !1, this.onNodeDraged(e, i, a, r), this._dataUpdated();
    };
    ie.startDrag(t, e, o, (i, a, r) => {
      let c = i / (this.options.canvasZoom / 100) + r.x, l = a / (this.options.canvasZoom / 100) + r.y;
      if (this.listeners.onNodeDragging) {
        const h = this.listeners.onNodeDragging(e, c, l, t);
        h && (typeof h.x == "number" && (c = h.x), typeof h.y == "number" && (l = h.y));
      }
      this.setNodePosition(e, c, l), this.options.useHorizontalView ? (c = a / (this.options.canvasZoom / 100) + r.x, l = -i / (this.options.canvasZoom / 100) + r.y, this.setNodePosition(e, c, l)) : this.setNodePosition(e, c, l), this.emitEvent("node-dragging", { node: e, x: c, y: l }), this.updateElementLines(), this._dataUpdated();
    });
  }
  onNodeDraged(e, t, o, i) {
    if (t === 0 && o === 0) {
      u("[node]node click by drag"), this.onNodeClick(e, i);
      return;
    }
    this.options.isMoveByParentNode && e.lot.childs.forEach((a) => {
      a.x += t, a.y += o;
    }), Math.abs(t) + Math.abs(o) > 6 ? (this.prevClickTime = Date.now(), setTimeout(() => {
      u("[node]onDragEnd2"), this.onNodeDragEnd(e, i);
    }, 100)) : (u("[node]onDragEnd1"), this.onNodeDragEnd(e, i));
  }
  onNodeDragEnd(e, t) {
    this.updateElementLines(), this.listeners.onNodeDragEnd && this.listeners.onNodeDragEnd(e, t), this.emitEvent("node-drag-end", { node: e });
  }
  onLineClick(e, t, o) {
    u("onLineClick:", "line:", e, "link:", t), this.options.disableLineClickEffect !== !0 && e.disableDefaultClickEffect !== !0 && (this.setCheckedNode(""), this.setCheckedLinkAndLine(t, e)), this.listeners.onLineClick && this.listeners.onLineClick(e, t, o);
  }
  async expandOrCollapseNode(e, t) {
    e.expanded === !1 ? await this.expandNode(e, t) : await this.collapseNode(e, t);
  }
  setChildsFromPosition(e, t) {
    e.lot.childs.forEach((o) => {
      o.x = t.x, o.y = t.y, this.setChildsFromPosition(o, t);
    });
  }
  async expandNode(e, t) {
    u("onNodeExpand:", e), e.expanded = !0, this.options.useAnimationWhenExpanded && (await this.layouter.snapshotBeforeAnimation(), this.setChildsFromPosition(e, e), await this.layouter.animationLayout(!1)), u("relayout check:", this.options.reLayoutWhenExpandedOrCollapsed), this.options.reLayoutWhenExpandedOrCollapsed && (u("relayout..."), await this.layouter.snapshotBeforeAnimation(), await this.doLayout()), this.updateElementLines(), this._dataUpdated(), this.listeners.onNodeExpand && this.listeners.onNodeExpand(e, t);
  }
  setChildsToPosition(e, t) {
    e.lot.childs.forEach((o) => {
      o.lot.from_x = o.x, o.lot.from_y = o.y, o.lot.to_x = t.x, o.lot.to_y = t.y, this.setChildsToPosition(o, t);
    });
  }
  async collapseNode(e, t) {
    u("onNodeCollapse:", e), this.options.useAnimationWhenExpanded && (await this.layouter.snapshotBeforeAnimation(), this.setChildsToPosition(e, e), await this.layouter.animationLayout(!1)), e.expanded = !1, u("relayout check:", this.options.reLayoutWhenExpandedOrCollapsed), this.options.reLayoutWhenExpandedOrCollapsed && (u("relayout..."), await this.layouter.snapshotBeforeAnimation(), await this.doLayout()), this.updateElementLines(), this._dataUpdated(), this.listeners.onNodeCollapse && this.listeners.onNodeCollapse(e, t);
  }
  onCanvasDragEnd(e) {
    this.setCanvasOffset(this.options.canvasOffset.x + 1, this.options.canvasOffset.y + 1), this.listeners.onCanvasDragEnd && this.listeners.onCanvasDragEnd(e);
  }
  onCanvasClick(e) {
    this.options.creatingLinePlot && this.onCanvasClickWhenCreatingLinePlot(e), this.listeners.onCanvasClick && this.listeners.onCanvasClick(e);
  }
  clickGraphMask(e) {
    this.clearLoading();
  }
  onCanvasSelectionEnd(e, t) {
    this.listeners.onCanvasSelectionEnd && this.listeners.onCanvasSelectionEnd(e, t);
  }
  startCreatingNodePlot(e, t) {
    this.options.newNodeTemplate = ke(JSON.parse(JSON.stringify(Ve)), this.options), this.options.creatingNodePlot = !0;
    const o = fe(e);
    this.options.showTemplateNode = !o;
    let i = (p, m) => {
      this.options.newNodeTemplate.x = p, this.options.newNodeTemplate.y = m, this._dataUpdated();
    }, a = (p, m) => {
      const v = "s-" + Date.now();
      this.addNodes([{
        id: v,
        text: this.options.newNodeTemplate.text,
        x: p,
        y: m
      }]);
    };
    t && t.templateText && (this.options.newNodeTemplate.text = t.templateText), t && t.templateStyleClass && (this.options.newNodeTemplate.styleClass = t.templateStyleClass), t && t.templateNode && Object.keys(t.templateNode).forEach((p) => {
      this.options.newNodeTemplate[p] = t.templateNode[p];
    }), t && t.templateMove && (i = t.templateMove), t && t.onCreateNode && (a = t.onCreateNode);
    const r = this.$dom.getBoundingClientRect();
    u("[CreatingNodePlot]startCreatingNodePlot:");
    const c = Pe(e), l = c.clientX - r.x + 10, h = c.clientY - r.y + 10;
    o || i(l, h);
    const f = (p) => {
      const m = this.$dom.getBoundingClientRect();
      u("[CreatingNodePlot]objectTemplateMove");
      const v = p.clientX - m.x + 10, x = p.clientY - m.y + 10;
      i(v, x);
    }, d = (p) => {
      u("[CreatingNodePlot]user abort!"), this.$dom.removeEventListener("mousemove", f), this.$dom.removeEventListener("click", g), this.$dom.removeEventListener("contextmenu", d), this.options.creatingNodePlot = !1;
    }, g = (p) => {
      let m = !1;
      if (this.options.creatingNodePlot || (m = !0), this.$dom.removeEventListener("mousemove", f), this.$dom.removeEventListener("click", g), this.$dom.removeEventListener("contextmenu", d), this.options.creatingNodePlot = !1, m) {
        u("[CreatingNodePlot]action be abort!");
        return;
      }
      const v = Pe(p), x = v.clientX - r.x + 10, T = v.clientY - r.y + 10;
      if (t && t.disableClickCreate && Math.abs(l - x) < 5 && Math.abs(h - T) < 5) {
        u("[CreatingNodePlot]create node be abort!");
        return;
      }
      const E = this.getCanvasCoordinateByClientCoordinate({ x: v.clientX, y: v.clientY });
      u("[CreatingNodePlot]objectBePlaced:", E), a(E.x, E.y), this._dataUpdated();
    };
    setTimeout(() => {
      this.$dom.addEventListener("click", g), this.$dom.addEventListener("contextmenu", d);
    }, 300), o || this.$dom.addEventListener("mousemove", f);
  }
  startCreatingLinePlot(e, t) {
    const o = fe(e);
    t && t.onCreateLine && (this.onCreateLineCallback = t.onCreateLine), t && t.template && Object.assign(this.options.newLineTemplate, t.template), this.options.newLinkTemplate.fromNode = null, t && t.fromNode && (this.options.newLinkTemplate.toNode.x = t.fromNode.x + 50, this.options.newLinkTemplate.toNode.y = t.fromNode.y + 50, this.options.newLinkTemplate.fromNode = t.fromNode, this.step1EventTime = Date.now()), this.options.creatingLinePlot = !0, this.options.newLinkTemplate.toNodeObject = null, this.options.newLineTemplate.disableDefaultClickEffect = !0, this.options.newLinkTemplate.toNode.el.offsetWidth = 2, this.options.newLinkTemplate.toNode.el.offsetHeight = 2, u("[CreatingLinePlot]startCreatingLinePlot:", o), o || (u("[CreatingLinePlot]Listener move"), this.movingListener = this.onMovingWhenCreatingLinePlot.bind(this), this.$dom.addEventListener("mousemove", this.movingListener));
  }
  stopCreatingLinePlot() {
    u("[CreatingLinePlot]stop CreatingLinePlot!"), this.options.creatingLinePlot = !1, this.options.newLinkTemplate.fromNode = null, this.options.newLinkTemplate.toNodeObject = null, this.onCreateLineCallback = void 0, this.$dom.removeEventListener("mousemove", this.movingListener), this._dataUpdated();
  }
  onMovingWhenCreatingLinePlot(e) {
    if (u("[CreatingLinePlot]mousemove"), this.options.newLinkTemplate.fromNode) {
      const t = this.getCanvasCoordinateByClientCoordinate({
        x: e.clientX,
        y: e.clientY
      });
      this.options.newLinkTemplate.toNode.x = t.x, this.options.newLinkTemplate.toNode.y = t.y, this._dataUpdated();
    }
  }
  onCanvasClickWhenCreatingLinePlot(e) {
    if (Date.now() - this.step1EventTime < 500) {
      u("[CreatingLinePlot]step1EventTime:", this.step1EventTime);
      return;
    }
    if (!this.options.newLinkTemplate.fromNode) {
      u("[CreatingLinePlot]CreatingLinePlot:fromNode not set!");
      return;
    }
    if (!this.options.newLinkTemplate.toNodeObject) {
      u("[CreatingLinePlot]CreatingLinePlot:toNodeObject not set!");
      const t = Pe(e), o = this.getCanvasCoordinateByClientCoordinate({ x: t.clientX, y: t.clientY });
      this.onCreateLine(this.options.newLinkTemplate.fromNode, o);
    }
    this.stopCreatingLinePlot();
  }
  onNodeClickWhenCreatingLinePlot(e) {
    this.options.newLinkTemplate.fromNode ? (u("[CreatingLinePlot]step 2: set toNodeObjecct:", this.options.newLinkTemplate.fromNode, e), this.options.newLinkTemplate.toNodeObject = e, this.onCreateLine(this.options.newLinkTemplate.fromNode, e), this.stopCreatingLinePlot()) : (u("[CreatingLinePlot]step 1: set fromNode:", e), this.options.newLinkTemplate.fromNode = e, this.options.newLinkTemplate.toNode.x = e.x + 50, this.options.newLinkTemplate.toNode.y = e.y + 50, this.step1EventTime = Date.now());
  }
  onCreateLine(e, t) {
    u("[CreatingLinePlot][fire-event]onCreateLine:", e, t), this.onCreateLineCallback && this.onCreateLineCallback(e, t, this.options.newLineTemplate);
  }
  isNode(e) {
    const t = Ae(e, "rel-node-peel", "rel-map");
    return t ? this.getNodeById(t.dataset.id) : void 0;
  }
  isLink(e) {
    const t = Ae(e, "rel-link-peel", "rel-map");
    return t ? this.getLinkById(t.dataset.id) : void 0;
  }
  onContextmenu(e) {
    let t = "canvas", o = this.isNode(e.target);
    o ? t = "node" : (o = this.isLink(e.target), o && (t = "link")), u("contextmenu:objectType", t, o), this.listeners.onContextmenu && this.listeners.onContextmenu(e, t, o);
  }
  fullscreen(e) {
    e === void 0 ? (this.options.fullscreen = !this.options.fullscreen, ce.toggle(this.$dom).then(() => {
    })) : this.options.fullscreen = e, this.emitEvent("fullscreen", { fullscreen: this.options.fullscreen });
  }
  async focusNodeById(e) {
    let t;
    this.graphData.nodes.forEach((o) => {
      o.id === e && (t = o);
    }), t && await this.handleSelect(t);
  }
  async focusRootNode() {
    u("relation-graph:focusRootNode"), this.graphData.rootNode && await this.handleSelect(this.graphData.rootNode);
  }
  async handleSelect(e) {
    u("checked:", e), scrollTo({
      top: this.$dom.offsetTop
    }), await this.animateToZoom(100, 300);
    const t = e.width || 50, o = e.height || 50, i = e.x * -1 + this.options.viewSize.width / 2 - t / 2, a = e.y * -1 + this.options.viewSize.height / 2 - o / 2;
    await this.animateGoto(i, a, 500), this.options.checkedNodeId = e.id, this.refreshNVAnalysisInfo();
  }
  onMouseWheel(e) {
    if (this.options.disableZoom)
      return e.cancelBubble = !1, !0;
    try {
      e.cancelBubble = !0, e.preventDefault(), e.stopPropagation();
    } catch {
    }
    const t = {
      x: e.clientX,
      y: e.clientY
    };
    let o = e.deltaY;
    o === void 0 && (o = e.wheelDelta);
    const i = -1;
    o > 0 ? this.zoom(5 * i, t) : this.zoom(-5 * i, t);
  }
  onLineDragStart(e, t) {
    u("onLineDragStart...");
    const o = { x: e.fromNode.x, y: e.fromNode.y }, i = { x: e.toNode.x, y: e.toNode.y }, a = (r, c, l, h, f) => {
      e.fromNode.x = o.x + r / (this.options.canvasZoom / 100), e.fromNode.y = o.y + c / (this.options.canvasZoom / 100), e.toNode.x = i.x + r / (this.options.canvasZoom / 100), e.toNode.y = i.y + c / (this.options.canvasZoom / 100), this._dataUpdated();
    };
    ie.startDrag(t, { x: 0, y: 0 }, (...r) => {
      this.onLineDragEnd(...r);
    }, a);
  }
  onLineDragEnd(e, t, o) {
    u("onLineDragEnd"), this.updateElementLines();
  }
  onCanvasDragStart(e) {
    if (u("[canvas]onCanvasDragStart..."), e.stopPropagation(), this.options.disableDragCanvas || e.shiftKey) {
      this.startCreateSelection(e);
      return;
    }
    if (!this.options.disableDragLine) {
      const o = this.isLink(e.target);
      if (o) {
        this.onLineDragStart(o, e);
        return;
      }
    }
    let t;
    if (fe(e)) {
      let o, i = 1;
      t = (a, r, c, l, h) => {
        const f = h.touches || h.targetTouches, d = f[0];
        if (f && f.length > 1) {
          h.preventDefault();
          const g = f[1];
          o || (o = { x: g.clientX, y: g.clientY }, i = this.options.canvasZoom);
          const p = { x: d.clientX, y: d.clientY }, m = { x: g.clientX, y: g.clientY }, v = Math.hypot(o.x - l.x, o.y - l.y), T = Math.hypot(m.x - p.x, m.y - p.y) / v, E = i * T;
          this.setZoom(E), this._dataUpdated();
        } else {
          const g = d.clientX, p = d.clientY;
          let m = c.x + (g - l.x), v = c.y + (p - l.y);
          this.options.useHorizontalView ? (m = c.x + (p - l.y), v = c.y - (g - l.x), this.setCanvasOffset(m, v)) : this.setCanvasOffset(m, v), this._dataUpdated();
        }
      };
    } else
      t = (o, i, a, r, c) => {
        const l = a.x + o, h = a.y + i;
        this.setCanvasOffset(l, h);
      };
    ie.startDrag(e, this.options.canvasOffset, (...o) => {
      this.onCanvasDragStop(...o);
    }, t);
  }
  onCanvasDragStop(e, t, o) {
    if (u("[canvas]onCanvasDragStop..."), this.options.creatingSelection) {
      this.options.creatingSelection = !1, this._dataUpdated(), this.onCanvasSelectionEnd(this.options.selectionView, o);
      return;
    }
    if (e === 0 && t === 0) {
      u("[canvas]click2"), this._dataUpdated(), this.onCanvasClick(o);
      return;
    }
    Math.abs(e) + Math.abs(t) > 6 ? setTimeout(() => {
      u("[canvas]onDragEnd1"), this.onCanvasDragEnd(o);
    }, 100) : (u("[canvas]onDragEnd2"), this.onCanvasDragEnd(o));
  }
  startCreateSelection(e) {
    let t = !1;
    const o = (i, a, r, c, l) => {
      if (!t && Math.abs(i) + Math.abs(a) > 6 && (t = !0, this.options.creatingSelection = !0, this.options.selectionView.x = c.x, this.options.selectionView.y = c.y), t) {
        const h = this.getBoundingClientRect();
        i < 0 ? (this.options.selectionView.x = c.x + i - h.x, this.options.selectionView.width = Math.abs(i)) : (this.options.selectionView.x = c.x - h.x, this.options.selectionView.width = i), a < 0 ? (this.options.selectionView.y = c.y + a - h.y, this.options.selectionView.height = Math.abs(a)) : (this.options.selectionView.y = c.y - h.y, this.options.selectionView.height = a);
      }
      this._dataUpdated();
    };
    ie.startDrag(e, { x: 0, y: 0 }, (...i) => {
      this.onCanvasDragStop(...i);
    }, o);
  }
}
class Qt extends Kt {
  constructor(s, e) {
    super(s, e);
  }
  dataUpdated() {
    this.isReact || this.options.canvasZoom <= 40 ? this._dataUpdated() : (this.zoom(1), this.zoom(-1));
  }
  async setOptions(s, e = !1) {
    if (this.disableNextLayoutAnimation = !0, this._setOptions(s), e === !0) {
      u("setOptions:justUpdateOptionsValue");
      return;
    }
    this.initLayouter(), this.resetViewSize(), await this.doLayout(), this.resetViewSize();
  }
  setLayouter(s) {
    u("setLayouterClass::", s), this.userLayouerClass = s, this.layouter = this.userLayouerClass;
  }
  async switchLayout(s, e = !0, t = !1) {
    this.listeners.beforeChangeLayout && this.listeners.beforeChangeLayout(s) === !1 && (e = !1);
    const o = this.layouter ? this.layouter.allNodes : [], i = this.layouter && this.layouter.rootNode;
    u("[change layout]switchLayout"), this.stopAutoLayout(), ze(s, this.options), this._initLayoutByLayoutOptions(s), this.layouter.allNodes = o, this.layouter.rootNode = i, e ? await this.refresh() : (t || (this.disableNextLayoutAnimation = !0), await this.doLayout());
  }
  async setJsonData(s, e = !1) {
    this.options.canvasOpacity = 0.01, this._dataUpdated(), await this._setJsonData(s);
    const t = s.rootId;
    if (t && (this.graphData.rootNode = this.graphData.nodes.find((o) => o.id === t)), !this.graphData.rootNode && this.graphData.nodes.length > 0 && (this.graphData.rootNode = this.graphData.nodes[0]), this.graphData.rootNode)
      this.options.defaultFocusRootNode && this.setCheckedNode(this.graphData.rootNode.id);
    else
      throw new Error("The root node [rootId] is not set! Or cannot get the root node:" + s.rootId + ", If you don't have any nodes to display, you can simply set an invisible node: {id:'root', opacity:0}");
    e && (u("resetViewSize:", e), this.resetViewSize()), this.disableNextLayoutAnimation = !0, await this.doLayout();
  }
  async appendJsonData(s, e = !0) {
    u("appendData:", s), this.options.canvasOpacity = 0.01, this._dataUpdated(), this.loadGraphJsonData(s), e && (this.disableNextLayoutAnimation = !0, await this.doLayout());
  }
}
class eo extends Qt {
  constructor(e, t) {
    super(e, t);
    _(this, "$easyViewCanvas");
    _(this, "$canvasCtx");
    _(this, "easyViewUpdating", !1);
    _(this, "easyViewUpdateHasNext", !1);
    _(this, "easyViewUpdateTimer");
    _(this, "easyViewOffset", { x: 0, y: 0 });
  }
  setEasyViewCanvas(e) {
    this.$easyViewCanvas = e, this.$canvasCtx = this.$easyViewCanvas.getContext("2d");
  }
  startUpdateTask() {
    this.updateEasyView(), requestAnimationFrame(this.startUpdateTask.bind(this));
  }
  updateEasyView() {
    !this.options.performanceMode || !this.options.showEasyView || requestAnimationFrame(this._updateEasyView.bind(this));
  }
  _updateEasyView() {
    try {
      this.easyViewUpdating = !0, this.dosomethingBeforeDraw(), this.drawAllNodes(), this.drawAllLines();
    } catch (e) {
      console.error(e);
    }
    this.easyViewUpdating = !1, this.easyViewUpdateHasNext && (this.easyViewUpdateHasNext = !1, this._updateEasyView());
  }
  dosomethingBeforeDraw() {
    const e = this.$easyViewCanvas.getBoundingClientRect().width, t = this.$easyViewCanvas.getBoundingClientRect().height;
    this.$easyViewCanvas.width = e, this.$easyViewCanvas.height = t, this.$canvasCtx.canvas.width = e, this.$canvasCtx.canvas.height = t, u("updateEasyView", e, t), this.$canvasCtx.scale(this.options.canvasZoom / 100, this.options.canvasZoom / 100), this.easyViewOffset.x = this.options.canvasOffset.x / (this.options.canvasZoom / 100), this.easyViewOffset.y = this.options.canvasOffset.y / (this.options.canvasZoom / 100);
  }
  drawAllNodes() {
    for (const e of this.getNodes())
      q.isAllowShowNode(e) && e.opacity && e.opacity > 0 && this.drawNode(e);
  }
  drawNode(e) {
    (e.nodeShape !== void 0 && e.nodeShape !== null ? e.nodeShape : this.options.defaultNodeShape) === 1 ? this.drawNode4Rect(e) : this.drawNode4Circle(e);
  }
  getNodeColor(e) {
    const t = e.color || this.options.defaultNodeColor || "red";
    return t === "transparent" ? "rgba(204,204,204,0.55)" : t;
  }
  drawNode4Rect(e) {
    const t = this.$canvasCtx, o = e.el.offsetWidth - 16, i = e.el.offsetHeight - 16, a = this.easyViewOffset.x + e.x + 8, r = this.easyViewOffset.y + e.y + 8;
    t.beginPath(), t.globalAlpha = e.opacity || 1, t.rect(a, r, o, i), t.fillStyle = this.getNodeColor(e), t.fill(), t.globalAlpha = 1;
  }
  drawNode4Circle(e) {
    const t = this.$canvasCtx, o = e.el.offsetWidth - 16, i = e.el.offsetHeight - 16, a = this.easyViewOffset.x + e.x + o / 2 + 8, r = this.easyViewOffset.y + e.y + i / 2 + 8;
    t.beginPath(), t.globalAlpha = e.opacity || 1, t.ellipse(a, r, o / 2, i / 2, 0, 0, 2 * Math.PI), t.fillStyle = this.getNodeColor(e), t.fill(), t.globalAlpha = 1;
  }
  drawAllLines() {
    for (const e of this.getLinks())
      if (q.isAllowShowNode(e.fromNode) && q.isAllowShowNode(e.toNode))
        for (let t = 0; t < e.relations.length; t++)
          this.drawLine(e, e.relations[t], t);
  }
  drawLine(e, t, o) {
    const i = this.$canvasCtx;
    this.easyViewOffset.x + e.fromNode.x, this.easyViewOffset.y + e.fromNode.y, this.easyViewOffset.x + e.toNode.x, this.easyViewOffset.y + e.toNode.y;
    const a = this.createLinePath(e, t, o);
    i.beginPath(), i.globalAlpha = t.opacity || 1, this.drawSvgPathOnCanvas(i, a.path), i.strokeStyle = t.color || this.options.defaultLineColor || "red", i.lineWidth = t.lineWidth || this.options.defaultLineWidth || 1, i.stroke(), i.globalAlpha = 1;
  }
  getPointValue(e, t, o) {
    return o ? e + parseFloat(t) : parseFloat(t);
  }
  drawSvgPathOnCanvas(e, t) {
    const o = t.match(/[a-zA-Z][^a-zA-Z]*/g);
    let i = 0, a = 0, r = 0, c = 0, l = 0, h = 0, f = 0, d = 0, g = !1;
    o.forEach((p) => {
      const m = p.trim().split(/[ ,]+/), v = m[0].toUpperCase(), x = m[0] === m[0].toLowerCase();
      switch (v) {
        case "M":
          i = this.getPointValue(r, m[1], x) + this.easyViewOffset.x, a = this.getPointValue(c, m[2], x) + this.easyViewOffset.y, r = i, c = a, g && (e.closePath(), g = !1), e.moveTo(i, a);
          break;
        case "L":
          i = this.getPointValue(r, m[1], x) + this.easyViewOffset.x, a = this.getPointValue(c, m[2], x) + this.easyViewOffset.y, e.lineTo(i, a);
          break;
        case "C":
          l = this.getPointValue(r, m[1], x), h = this.getPointValue(c, m[2], x), f = this.getPointValue(r, m[3], x), d = this.getPointValue(c, m[4], x), i = this.getPointValue(r, m[5], x), a = this.getPointValue(c, m[6], x), r = i, c = a, e.bezierCurveTo(l, h, f, d, i, a);
          break;
        case "V":
          a = this.getPointValue(c, m[1], x), c = a, e.lineTo(i, a);
          break;
        case "H":
          i = this.getPointValue(r, m[1], x), r = i, e.lineTo(i, a);
          break;
        case "Z":
          e.closePath(), g = !1;
          break;
        default:
          u(`Unsupported command: ${v}`);
      }
    });
  }
}
class it extends eo {
  constructor(s, e) {
    super(s, e);
  }
  ready() {
    this.initLayouter(), this.resetViewSize(), this.refreshNVAnalysisInfo();
  }
}
const to = /* @__PURE__ */ Z({
  __name: "RGNodeExpandHolder",
  props: {
    nodeProps: null,
    expandButtonClass: null,
    expandOrCollapseNode: { type: Function },
    expandHolderPosition: null,
    color: null
  },
  setup(n) {
    return (s, e) => (L(), C("div", {
      class: U([["c-expand-positon-" + n.expandHolderPosition], "c-btn-open-close"])
    }, [
      b("span", {
        class: U(n.expandButtonClass),
        style: X({ "background-color": n.color }),
        onClick: e[0] || (e[0] = de(
          (...t) => n.expandOrCollapseNode && n.expandOrCollapseNode(...t),
          ["stop"]
        )),
        onTouchend: e[1] || (e[1] = de(
          (...t) => n.expandOrCollapseNode && n.expandOrCollapseNode(...t),
          ["stop"]
        ))
      }, null, 38)
    ], 2));
  }
}), oo = ["data-id"], io = ["innerHTML"], no = ["innerHTML"], so = ["innerHTML"], nt = /* @__PURE__ */ Z({
  __name: "RGNode",
  props: {
    nodeProps: null
  },
  setup(n) {
    const s = n, e = ue(), t = K(Q), o = P(() => t.options), i = P(() => {
      const m = s.nodeProps.borderWidth === void 0 ? o.value.defaultNodeBorderWidth : s.nodeProps.borderWidth;
      return (s.nodeProps.borderColor || o.value.defaultNodeBorderColor) + " solid " + m + "px";
    }), a = P(() => {
      if (s.nodeProps.width === 0)
        return;
      const m = s.nodeProps.width || o.value.defaultNodeWidth;
      if (!!m)
        return m + "px";
    }), r = P(() => {
      if (s.nodeProps.height === 0)
        return;
      const m = s.nodeProps.height || o.value.defaultNodeHeight;
      if (!!m)
        return m + "px";
    }), c = P(() => s.nodeProps.expandHolderPosition && s.nodeProps.expandHolderPosition !== "hide" || o.value.defaultExpandHolderPosition && o.value.defaultExpandHolderPosition !== "hide" && s.nodeProps.lot.childs && s.nodeProps.lot.childs.length > 0), l = P(() => s.nodeProps.expanded === !1 ? "c-expanded" : "c-collapsed"), h = (m) => {
      t.instance.expandOrCollapseNode(s.nodeProps, m);
    }, f = () => {
      e.value.offsetWidth === 0 && e.value.offsetHeight === 0 || (s.nodeProps.el.offsetWidth !== e.value.offsetWidth || s.nodeProps.el.offsetHeight !== e.value.offsetHeight) && t.instance.updateNodeOffsetSize(
        s.nodeProps,
        e.value.offsetWidth,
        e.value.offsetHeight
      );
    }, d = (m) => {
      t.instance.onNodeDragStart(s.nodeProps, m);
    }, g = (m) => {
      t.instance.onNodeClick(s.nodeProps, m);
    }, p = (m) => q.isAllowShowNode(m);
    return xe(() => {
      f(), t.instance.addNodeResizeListener(e.value, s.nodeProps);
    }), Ze(() => {
      t.instance.removeNodeResizeListener(e.value);
    }), (m, v) => ut((L(), C("div", {
      ref_key: "seeksRGNode$",
      ref: e,
      style: X({
        left: n.nodeProps.x + "px",
        top: n.nodeProps.y + "px",
        opacity: n.nodeProps.opacity > 1 ? n.nodeProps.opacity / 100 : n.nodeProps.opacity
      }),
      class: U(["rel-node-peel", [n.nodeProps.selected && "rel-node-selected", n.nodeProps.dragging && "rel-node-dragging", n.nodeProps.id === y(o).checkedNodeId && "rel-node-peel-checked", n.nodeProps.className]]),
      "data-id": n.nodeProps.id
    }, [
      y(c) ? F(m.$slots, "node-expand-holder", {
        key: 0,
        nodeProps: n.nodeProps,
        expandButtonClass: y(l),
        expandOrCollapseNode: h,
        expandHolderPosition: n.nodeProps.expandHolderPosition || y(o).defaultExpandHolderPosition,
        color: y(o).defaultExpandHolderColor || n.nodeProps.color || y(o).defaultNodeColor
      }, () => [
        he(to, {
          nodeProps: n.nodeProps,
          expandButtonClass: y(l),
          expandOrCollapseNode: h,
          expandHolderPosition: n.nodeProps.expandHolderPosition || y(o).defaultExpandHolderPosition,
          color: y(o).defaultExpandHolderColor || n.nodeProps.color || y(o).defaultNodeColor
        }, null, 8, ["nodeProps", "expandButtonClass", "expandHolderPosition", "color"])
      ]) : A("", !0),
      n.nodeProps.html ? (L(), C("div", {
        key: 1,
        innerHTML: n.nodeProps.html,
        onClick: v[0] || (v[0] = (x) => g(x)),
        onMousedown: v[1] || (v[1] = de((x) => d(x), ["left", "stop"])),
        onTouchstart: v[2] || (v[2] = de((x) => d(x), ["stop"]))
      }, null, 40, io)) : (L(), C("div", {
        key: 2,
        class: U([["rel-node-shape-" + (n.nodeProps.nodeShape === void 0 ? y(o).defaultNodeShape : n.nodeProps.nodeShape), "rel-node-type-" + n.nodeProps.type, n.nodeProps.id === y(o).checkedNodeId ? "rel-node-checked" : "", n.nodeProps.flashing ? "rel-node-flashing" : "", n.nodeProps.styleClass, n.nodeProps.innerHTML ? "rel-diy-node" : ""], "rel-node"]),
        style: X({ "background-color": n.nodeProps.color === void 0 ? y(o).defaultNodeColor : n.nodeProps.color, color: n.nodeProps.fontColor === void 0 ? y(o).defaultNodeFontColor : n.nodeProps.fontColor, border: y(i), width: y(a), height: y(r) }),
        onClick: v[3] || (v[3] = (x) => g(x)),
        onMousedown: v[4] || (v[4] = de((x) => d(x), ["left", "stop"])),
        onTouchstart: v[5] || (v[5] = de((x) => d(x), ["stop"]))
      }, [
        y(o).hideNodeContentByZoom === !0 && y(o).canvasZoom < 40 ? A("", !0) : F(m.$slots, "node", {
          key: 0,
          node: n.nodeProps
        }, () => [
          n.nodeProps.innerHTML ? (L(), C("div", {
            key: 1,
            innerHTML: n.nodeProps.innerHTML
          }, null, 8, so)) : (L(), C("div", {
            key: 0,
            style: X({ color: n.nodeProps.fontColor || y(o).defaultNodeFontColor }),
            class: "c-node-text"
          }, [
            b("span", {
              innerHTML: n.nodeProps.text
            }, null, 8, no)
          ], 4))
        ])
      ], 38))
    ], 14, oo)), [
      [pt, p(n.nodeProps)]
    ]);
  }
}), ao = ["xlink:href"], lo = ["transform"], ro = ["rotate"], co = ["xlink:href", "startOffset", "text-anchor"], ho = /* @__PURE__ */ Z({
  __name: "RGLineTextByPath",
  props: {
    link: null,
    relation: null,
    relationIndex: null
  },
  setup(n) {
    const s = n, e = K(Q), t = P(() => e.options), o = P(() => s.relation.id === e.instance.options.checkedLineId), i = P(() => "#" + t.value.instanceId + "-" + s.link.seeks_id + "-" + s.relationIndex), a = P(() => e.instance.getLineTextStyle(s.link, s.relation, s.relationIndex)), r = (c, l) => {
      e.instance.onLineClick(c, s.link, l);
    };
    return (c, l) => (L(), C("g", {
      class: U([n.relation.className])
    }, [
      b("use", {
        "xlink:href": y(i),
        class: U(["c-rg-line", [
          n.relation.styleClass,
          n.relation.dashType ? "rg-line-dashtype-" + n.relation.dashType : void 0,
          n.relation.animation ? "rg-line-anm-" + n.relation.animation : void 0,
          y(o) ? "c-rg-line-checked" : void 0
        ]]),
        onTouchstart: l[0] || (l[0] = (h) => r(n.relation, h)),
        onClick: l[1] || (l[1] = (h) => r(n.relation, h))
      }, null, 42, ao),
      y(a) && y(t).defaultShowLineLabel && y(t).canvasZoom > 40 ? (L(), C("g", {
        key: 0,
        transform: y(a).textOffset
      }, [
        b("text", {
          class: U(["c-rg-line-text", { "c-rg-line-text-checked": y(o) }]),
          style: X({
            opacity: n.relation.opacity,
            fill: n.relation.fontColor ? n.relation.fontColor : y(t).defaultLineFontColor ? y(t).defaultLineFontColor : n.relation.color ? n.relation.color : y(t).defaultLineColor
          }),
          rotate: y(a).textRotate,
          onTouchstart: l[2] || (l[2] = (h) => r(n.relation, h)),
          onClick: l[3] || (l[3] = (h) => r(n.relation, h))
        }, [
          b("textPath", {
            "xlink:href": y(i),
            startOffset: y(a).textHPosition,
            "text-anchor": y(a).textAnchor,
            method: "align",
            spacing: "auto"
          }, Ce(y(a).text), 9, co)
        ], 46, ro)
      ], 8, lo)) : A("", !0)
    ], 2));
  }
}), fo = ["d", "stroke", "marker-start", "marker-end", "fill"], uo = ["transform"], po = ["x", "y", "text-anchor"], De = /* @__PURE__ */ Z({
  __name: "RGLineSmart",
  props: {
    link: null,
    relation: null,
    relationIndex: null
  },
  setup(n) {
    const s = n, e = K(Q), t = P(() => e.options), o = P(() => s.relation.id === t.value.checkedLineId), i = P(() => e.instance.getArrow(s.relation, s.link, !0)), a = P(() => e.instance.getArrow(s.relation, s.link, !1)), r = P(() => {
      try {
        const { path: h, textPosition: f } = e.instance.createLinePath(
          s.link,
          s.relation,
          s.relationIndex
        );
        let d = {};
        try {
          d = e.instance.getTextTransform(
            s.relation,
            f.x,
            f.y,
            f.rotate
          );
        } catch (g) {
          u(g);
        }
        return {
          path: h,
          textTransform: d
        };
      } catch (h) {
        u(h);
      }
      return { path: null, textTransform: null };
    }), c = P(() => e.instance.getLineTextStyle(s.link, s.relation, s.relationIndex)), l = (h, f) => {
      e.instance.onLineClick(h, s.link, f);
    };
    return (h, f) => (L(), C("g", {
      class: U([n.relation.className])
    }, [
      b("path", {
        d: y(r).path,
        class: U(["c-rg-line", [
          n.relation.styleClass,
          n.relation.dashType ? "rg-line-dashtype-" + n.relation.dashType : void 0,
          n.relation.animation ? "rg-line-anm-" + n.relation.animation : void 0,
          y(o) ? "c-rg-line-checked" : void 0
        ]]),
        stroke: n.relation.color ? n.relation.color : y(t).defaultLineColor,
        style: X({
          opacity: n.relation.opacity,
          "pointer-events": n.relation.disableDefaultClickEffect && "none",
          "stroke-width": (n.relation.lineWidth ? n.relation.lineWidth : y(t).defaultLineWidth) + "px"
        }),
        "marker-start": y(i),
        "marker-end": y(a),
        fill: n.relation.lineShape === 8 ? n.relation.color || y(t).defaultLineColor : "none",
        onTouchstart: f[0] || (f[0] = (d) => l(n.relation, d)),
        onClick: f[1] || (f[1] = (d) => l(n.relation, d))
      }, null, 46, fo),
      y(c) && y(t).defaultShowLineLabel && y(t).canvasZoom > 40 ? (L(), C("g", {
        key: 0,
        transform: y(r).textTransform
      }, [
        (L(), C("text", {
          key: "t-" + n.relation.seeks_id,
          x: n.relation.textOffset_x || y(t).defaultLineTextOffset_x || 0,
          y: n.relation.textOffset_y || y(t).defaultLineTextOffset_y || 10,
          style: X({
            opacity: n.relation.opacity,
            fill: n.relation.fontColor ? n.relation.fontColor : y(t).defaultLineFontColor ? y(t).defaultLineFontColor : n.relation.color ? n.relation.color : y(t).defaultLineColor
          }),
          "text-anchor": y(c).textAnchor,
          class: U(["c-rg-line-text", { "c-rg-line-text-checked": y(o) }]),
          onTouchstart: f[2] || (f[2] = (d) => l(n.relation, d)),
          onClick: f[3] || (f[3] = (d) => l(n.relation, d))
        }, Ce(y(c).text), 47, po))
      ], 8, uo)) : A("", !0)
    ], 2));
  }
}), yo = ["data-id"], go = /* @__PURE__ */ Z({
  __name: "RGLink",
  props: {
    linkProps: null
  },
  setup(n) {
    const s = K(Q), e = P(() => s.options), t = (o) => q.isAllowShowNode(o);
    return (o, i) => t(n.linkProps.fromNode) && t(n.linkProps.toNode) ? (L(), C("g", {
      key: 0,
      class: U([[y(e).checkedLinkId == n.linkProps.seeks_id ? "c-rg-link-checked" : ""], "rel-link-peel"]),
      ref: "seeksRGLink",
      transform: "translate(0,0)",
      "data-id": n.linkProps.seeks_id
    }, [
      (L(!0), C(J, null, re(n.linkProps.relations, (a, r) => F(o.$slots, "line", {
        line: a,
        relationIndex: r
      }, () => [
        (a.useTextPath !== void 0 ? a.useTextPath : y(e).lineUseTextPath) && a.isHide !== !0 ? (L(), ae(ho, {
          key: "l-" + a.id,
          link: n.linkProps,
          relation: a,
          "relation-index": r
        }, null, 8, ["link", "relation", "relation-index"])) : a.isHide !== !0 ? (L(), ae(De, {
          key: "l-" + a.id,
          link: n.linkProps,
          relation: a,
          "relation-index": r
        }, null, 8, ["link", "relation", "relation-index"])) : A("", !0)
      ])), 256))
    ], 10, yo)) : A("", !0);
  }
}), mo = ["id", "d", "stroke", "marker-start", "marker-end", "fill"], vo = /* @__PURE__ */ Z({
  __name: "RGLinePath",
  props: {
    link: null,
    relation: null,
    relationIndex: null
  },
  setup(n) {
    const s = n, e = K(Q), t = P(() => e.options), o = P(() => s.relation.id === t.value.checkedLineId), i = P(() => {
      const { path: r, textPosition: c } = e.instance.createLinePath(
        s.link,
        s.relation,
        s.relationIndex
      );
      return r;
    }), a = P(() => e.instance);
    return (r, c) => (L(), C("path", {
      id: y(t).instanceId + "-" + n.link.seeks_id + "-" + n.relationIndex,
      d: y(i),
      stroke: n.relation.color ? n.relation.color : y(t).defaultLineColor,
      style: X({ opacity: n.relation.opacity, "stroke-width": (n.relation.lineWidth ? n.relation.lineWidth : y(t).defaultLineWidth) + "px" }),
      "marker-start": y(a).getArrow(n.relation, n.link, !0),
      "marker-end": y(a).getArrow(n.relation, n.link, !1),
      class: U(["c-rg-line-path", n.relation.styleClass, y(o) ? "c-rg-line-checked" : ""]),
      fill: n.relation.lineShape === 8 ? n.relation.color || y(t).defaultLineColor : "none"
    }, null, 14, mo));
  }
}), _o = ["d", "stroke-width"], xo = /* @__PURE__ */ Z({
  __name: "RGLineChecked",
  setup(n) {
    const s = K(Q);
    P(() => s.options);
    const e = P(() => s.instance.createCheckedLinePath()), t = P(() => s.instance.createCheckedLineStrokeWidth());
    return (o, i) => (L(), C("g", null, [
      y(e) ? (L(), C("path", {
        key: 0,
        d: y(e),
        fill: "none",
        stroke: "red",
        "stroke-width": y(t),
        class: "c-rg-line-checked-bg"
      }, null, 8, _o)) : A("", !0)
    ]));
  }
}), wo = {
  class: "rel-single-graph",
  style: { overflow: "visible" }
}, Lo = /* @__PURE__ */ b("linearGradient", {
  id: "my-lineStyle",
  gradientUnits: "objectBoundingBox",
  cx: "0.5",
  cy: "0.5"
}, [
  /* @__PURE__ */ b("stop", {
    offset: "0%",
    "stop-color": "#e52c5c",
    "stop-opacity": "1"
  }),
  /* @__PURE__ */ b("stop", {
    offset: "100%",
    "stop-color": "#FD8B37",
    "stop-opacity": "0"
  })
], -1), Co = ["id", "markerWidth", "markerHeight", "refX", "refY"], bo = ["d"], ko = ["id", "markerWidth", "markerHeight", "refX", "refY"], Mo = ["d"], So = ["id", "markerWidth", "markerHeight", "refX", "refY"], Oo = ["d"], Eo = ["id", "markerWidth", "markerHeight", "refX", "refY"], zo = ["d"], No = ["id", "markerWidth", "markerHeight", "refX", "refY"], Po = ["fill", "d"], $o = ["id", "markerWidth", "markerHeight", "refX", "refY"], Bo = ["fill", "d"], Ao = { class: "rel-nodediv rel-nodediv-for-webkit" }, Do = { class: "rel-linediv rel-linediv-el-lines" }, To = {
  class: "rel-lines-svg rel-lines-svg-el-lines",
  xmlns: "http://www.w3.org/2000/svg"
}, Io = /* @__PURE__ */ Z({
  __name: "RGGraph",
  setup(n) {
    const s = ue(), e = K(qe), t = K(Q), o = P(() => t.options), i = P(() => t.allLineColors), a = () => {
      s.value.style.setProperty(
        "--stroke",
        `url('#${o.value.instanceId}-lineStyle')`
      ), s.value.style.setProperty(
        "--markerEnd",
        `url('#${o.value.instanceId}-start-arrow-default')`
      ), s.value.style.setProperty(
        "--markerStart",
        `url('#${o.value.instanceId}-arrow-default')`
      ), s.value.style.setProperty(
        "--markerEndChecked",
        `url('#${o.value.instanceId}-arrow-checked')`
      ), s.value.style.setProperty(
        "--markerStartChecked",
        `url('#${o.value.instanceId}-start-arrow-checked')`
      );
    };
    return xe(() => {
      u("[RGCanvas mounted]"), a();
    }), (r, c) => (L(), C("div", wo, [
      b("div", {
        ref_key: "rgCanvas$",
        ref: s,
        class: "rel-linediv",
        style: { overflow: "visible" }
      }, [
        (L(), C("svg", {
          class: "rel-lines-svg",
          style: X({ width: y(o).canvasSize.width + "px", height: y(o).canvasSize.height + "px" }),
          xmlns: "http://www.w3.org/2000/svg"
        }, [
          b("defs", null, [
            Lo,
            b("marker", {
              id: y(o).instanceId + "-arrow-default",
              markerWidth: y(o).defaultLineMarker.markerWidth,
              markerHeight: y(o).defaultLineMarker.markerHeight,
              refX: y(o).defaultLineMarker.refX,
              refY: y(o).defaultLineMarker.refY,
              markerUnits: "userSpaceOnUse",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              b("path", {
                style: X({ fill: y(o).defaultLineColor }),
                d: y(o).defaultLineMarker.data
              }, null, 12, bo)
            ], 8, Co),
            b("marker", {
              id: y(o).instanceId + "-start-arrow-default",
              markerWidth: y(o).defaultLineMarker.markerWidth,
              markerHeight: y(o).defaultLineMarker.markerHeight,
              refX: y(o).defaultLineMarker.refX,
              refY: y(o).defaultLineMarker.refY,
              markerUnits: "userSpaceOnUse",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              b("path", {
                style: X({ fill: y(o).defaultLineColor }),
                d: y(o).defaultLineMarker.data,
                transform: "translate(12,12)rotate(180)"
              }, null, 12, Mo)
            ], 8, ko),
            b("marker", {
              id: y(o).instanceId + "-arrow-checked",
              markerWidth: y(o).defaultLineMarker.markerWidth,
              markerHeight: y(o).defaultLineMarker.markerHeight,
              refX: y(o).defaultLineMarker.refX,
              refY: y(o).defaultLineMarker.refY,
              markerUnits: "userSpaceOnUse",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              b("path", {
                style: X({ fill: y(o).checkedLineColor }),
                d: y(o).defaultLineMarker.data
              }, null, 12, Oo)
            ], 8, So),
            b("marker", {
              id: y(o).instanceId + "-start-arrow-checked",
              markerWidth: y(o).defaultLineMarker.markerWidth,
              markerHeight: y(o).defaultLineMarker.markerHeight,
              refX: y(o).defaultLineMarker.refX,
              refY: y(o).defaultLineMarker.refY,
              markerUnits: "userSpaceOnUse",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              b("path", {
                style: X({ fill: y(o).checkedLineColor }),
                d: y(o).defaultLineMarker.data,
                transform: "translate(12,12)rotate(180)"
              }, null, 12, zo)
            ], 8, Eo),
            (L(!0), C(J, null, re(y(i), (l) => (L(), C("marker", {
              id: y(o).instanceId + "-arrow-" + l.id,
              key: l.id,
              markerWidth: y(o).defaultLineMarker.markerWidth,
              markerHeight: y(o).defaultLineMarker.markerHeight,
              refX: y(o).defaultLineMarker.refX,
              refY: y(o).defaultLineMarker.refY,
              markerUnits: "userSpaceOnUse",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              b("path", {
                fill: y(o).defaultLineMarker.color || l.color,
                d: y(o).defaultLineMarker.data
              }, null, 8, Po)
            ], 8, No))), 128)),
            (L(!0), C(J, null, re(y(i), (l) => (L(), C("marker", {
              id: y(o).instanceId + "-start-arrow-" + l.id,
              key: "start-" + l.id,
              markerWidth: y(o).defaultLineMarker.markerWidth,
              markerHeight: y(o).defaultLineMarker.markerHeight,
              refX: y(o).defaultLineMarker.refX,
              refY: y(o).defaultLineMarker.refY,
              markerUnits: "userSpaceOnUse",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              b("path", {
                fill: y(o).defaultLineMarker.color || l.color,
                d: y(o).defaultLineMarker.data,
                transform: "translate(12,13)rotate(180)"
              }, null, 8, Bo)
            ], 8, $o))), 128)),
            y(o).showEasyView ? A("", !0) : (L(!0), C(J, { key: 0 }, re(y(e).links, (l) => (L(), C(J, {
              key: l.seeks_id
            }, [
              (L(!0), C(J, null, re(l.relations, (h, f) => (L(), C(J, {
                key: h.id
              }, [
                !l.invisiable && (y(o).lineUseTextPath || h.useTextPath) ? (L(), ae(vo, {
                  key: 0,
                  link: l,
                  relation: h,
                  "relation-index": f
                }, null, 8, ["link", "relation", "relation-index"])) : A("", !0)
              ], 64))), 128))
            ], 64))), 128))
          ]),
          y(o).showEasyView ? A("", !0) : (L(), ae(xo, { key: 0 })),
          y(o).showEasyView ? A("", !0) : (L(!0), C(J, { key: 1 }, re(y(e).links, (l) => (L(), C(J, {
            key: l.seeks_id
          }, [
            l.invisiable ? A("", !0) : (L(), ae(go, {
              key: 0,
              "link-props": l
            }, {
              line: ne(({ line: h, lineIndex: f }) => [
                F(r.$slots, "line", {
                  line: h,
                  link: l,
                  lineIndex: f
                })
              ]),
              _: 2
            }, 1032, ["link-props"]))
          ], 64))), 128))
        ], 4))
      ], 512),
      b("div", Ao, [
        y(o).showEasyView ? A("", !0) : (L(!0), C(J, { key: 0 }, re(y(e).nodes, (l) => (L(), C(J, {
          key: l.seeks_id
        }, [
          l.invisiable ? A("", !0) : (L(), ae(nt, {
            key: 0,
            "node-props": l
          }, {
            node: ne(({ node: h }) => [
              F(r.$slots, "node", { node: h })
            ]),
            "node-expand-holder": ne(({ nodeProps: h, expandHolderPosition: f, expandButtonClass: d, color: g, expandOrCollapseNode: p }) => [
              F(r.$slots, "node-expand-holder", {
                nodeProps: h,
                expandHolderPosition: f,
                expandButtonClass: d,
                color: g,
                expandOrCollapseNode: p
              })
            ]),
            _: 2
          }, 1032, ["node-props"]))
        ], 64))), 128))
      ]),
      b("div", Do, [
        (L(), C("svg", To, [
          (L(!0), C(J, null, re(y(e).elementLines, (l) => (L(), C(J, null, [
            l.relations[0].isHide === !1 ? (L(), ae(De, {
              key: "ell-" + l.relations[0].id,
              link: l,
              relation: l.relations[0],
              "relation-index": 0
            }, null, 8, ["link", "relation"])) : A("", !0)
          ], 64))), 256)),
          y(o).creatingLinePlot && y(o).newLinkTemplate.fromNode ? (L(), ae(De, {
            key: "s-line-template",
            link: y(o).newLinkTemplate,
            relation: y(o).newLineTemplate,
            "relation-index": 0
          }, null, 8, ["link", "relation"])) : A("", !0)
        ]))
      ])
    ]));
  }
}), Vo = /* @__PURE__ */ Z({
  __name: "RGEasyView",
  setup(n) {
    const s = ue(), e = K(Q), t = P(() => e.options);
    return xe(() => {
      u("[RGEasyView mounted]"), e.instance.setEasyViewCanvas && e.instance.setEasyViewCanvas(s.value);
    }), (o, i) => (L(), C("div", {
      class: U(["rel-easy-view", { "rel-easy-view-active": y(t).showEasyView }])
    }, [
      b("canvas", {
        ref_key: "$rgEasyCanvas",
        ref: s,
        style: { width: "100%", height: "100%" }
      }, null, 512)
    ], 2));
  }
}), Wo = { class: "rel-canvas-slot rel-canvas-slot-behind" }, Ho = { class: "rel-canvas-slot rel-canvas-slot-above" }, Fo = /* @__PURE__ */ Z({
  __name: "RGCanvas",
  setup(n) {
    const s = ue(), e = K(Q), t = P(() => e.options), o = (c) => {
      e.instance.onMouseWheel(c);
    }, i = (c) => {
      e.instance.onCanvasDragStart(c);
    }, a = (c) => {
      e.instance.onContextmenu(c);
    }, r = P(() => ({
      width: `${t.value.canvasSize.width}px`,
      height: `${t.value.canvasSize.height}px`,
      "margin-left": `${t.value.canvasOffset.x}px`,
      "margin-top": `${t.value.canvasOffset.y}px`,
      "background-color": "transparent",
      transform: `scale(${t.value.canvasZoom / 100},${t.value.canvasZoom / 100})`
    }));
    return xe(() => {
      u("[RGCanvas mounted]"), e.instance.setCanvasDom(s.value);
    }), (c, l) => (L(), C("div", {
      style: X({ width: "100%", height: "100%", "background-color": y(t).backgroundColor || void 0, "background-image": y(t).backgroundImage ? "url(" + y(t).backgroundImage + ")" : void 0 }),
      class: U([[y(t).canvasOpacity === 1 && "rel-map-ready", y(t).layoutClassName, y(t).backgroundImageNoRepeat ? "rel-map-background-norepeat" : ""], "rel-map"]),
      onContextmenu: l[0] || (l[0] = de((h) => a(h), ["prevent"])),
      onMousedown: l[1] || (l[1] = de((h) => i(h), ["left"])),
      onTouchstart: l[2] || (l[2] = (h) => i(h)),
      onWheel: o
    }, [
      he(Vo),
      b("div", {
        ref_key: "seeksRGCanvas",
        ref: s,
        style: X(y(r)),
        class: "rel-map-canvas"
      }, [
        b("div", Wo, [
          F(c.$slots, "canvas-plug")
        ]),
        he(Io, null, {
          node: ne(({ node: h }) => [
            F(c.$slots, "node", { node: h })
          ]),
          line: ne(({ line: h, link: f }) => [
            F(c.$slots, "line", {
              line: h,
              link: f
            })
          ]),
          "node-expand-holder": ne(({ nodeProps: h, expandHolderPosition: f, expandButtonClass: d, color: g, expandOrCollapseNode: p }) => [
            F(c.$slots, "node-expand-holder", {
              nodeProps: h,
              expandHolderPosition: f,
              expandButtonClass: d,
              color: g,
              expandOrCollapseNode: p
            })
          ]),
          _: 3
        }),
        b("div", Ho, [
          F(c.$slots, "canvas-plug-above")
        ])
      ], 4)
    ], 38));
  }
}), Ro = { class: "c-debug-tools-row" }, Go = /* @__PURE__ */ Z({
  __name: "GraphDebugPanel",
  setup(n) {
    const s = K(Q), e = P(() => s.options), t = ue(!1), o = () => {
      t.value = !t.value;
    }, i = () => {
      s.instance.printOptions();
    }, a = () => {
      s.instance.printData();
    }, r = () => {
      s.instance.enableDebugLog(!e.value.debug), u("debugLog:", s.instance.options.debug);
    };
    return (c, l) => (L(), C("div", null, [
      b("div", {
        class: U([[], "c-setting-panel-button"]),
        onClick: o
      }, " Debug "),
      t.value ? (L(), C("div", {
        key: 0,
        class: U([[], "c-setting-panel"])
      }, [
        b("div", { class: "c-debug-tools-row" }, [
          b("button", { onClick: i }, "print options in console")
        ]),
        b("div", { class: "c-debug-tools-row" }, [
          b("button", { onClick: a }, "print json data in console")
        ]),
        b("div", Ro, [
          je("debug log status: " + Ce(y(e).debug), 1),
          b("button", { onClick: r }, Ce(y(e).debug ? "disable" : "enable") + " debug log", 1)
        ])
      ])) : A("", !0)
    ]));
  }
}), Uo = {
  ref: "miniView",
  class: "c-mini-graph"
}, Yo = /* @__PURE__ */ Z({
  __name: "GraphMiniView",
  setup(n) {
    return ue(100), ue(0), (s, e) => (L(), C("div", Uo, null, 512));
  }
}), Xo = /* @__PURE__ */ b("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ b("use", { "xlink:href": "#icon-resize-" })
], -1), Zo = [
  Xo
], jo = /* @__PURE__ */ b("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ b("use", { "xlink:href": "#icon-fangda" })
], -1), Jo = [
  jo
], qo = /* @__PURE__ */ b("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ b("use", { "xlink:href": "#icon-suoxiao" })
], -1), Ko = [
  qo
], Qo = ["title"], ei = {
  key: 0,
  class: "rg-icon",
  "aria-hidden": "true"
}, ti = /* @__PURE__ */ b("use", { "xlink:href": "#icon-zidong" }, null, -1), oi = [
  ti
], ii = {
  key: 1,
  class: "c-loading-icon rg-icon",
  "aria-hidden": "true"
}, ni = /* @__PURE__ */ b("use", { "xlink:href": "#icon-lianjiezhong" }, null, -1), si = [
  ni
], ai = /* @__PURE__ */ b("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ b("use", { "xlink:href": "#icon-ico_reset" })
], -1), li = [
  ai
], ri = /* @__PURE__ */ b("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ b("use", { "xlink:href": "#icon-tupian" })
], -1), ci = [
  ri
], hi = /* @__PURE__ */ b("div", { style: { clear: "both" } }, null, -1), st = /* @__PURE__ */ Z({
  __name: "GraphMiniToolBar",
  setup(n) {
    const s = K(Q), e = P(() => s.options);
    xe(() => {
    });
    const t = () => {
      s.instance.refresh();
    }, o = () => {
      s.instance.toggleAutoLayout();
    }, i = () => {
      s.instance.downloadAsImage("png");
    }, a = async () => {
      const l = s.instance;
      await l.setZoom(100), await l.moveToCenter(), await l.zoomToFit();
    }, r = (l) => {
      s.instance.zoom(l);
    }, c = () => {
      s.instance.fullscreen();
    };
    return (l, h) => (L(), C("div", {
      class: U(["rel-toolbar", ["rel-toolbar-h-" + y(e).toolBarPositionH, "rel-toolbar-v-" + y(e).toolBarPositionV, "rel-toolbar-" + y(e).toolBarDirection]])
    }, [
      y(e).allowShowFullscreenMenu ? (L(), C("div", {
        key: 0,
        title: "\u5168\u5C4F/\u9000\u51FA\u5168\u5C4F",
        class: "c-mb-button",
        style: { "margin-top": "0px" },
        onClick: h[0] || (h[0] = (f) => c())
      }, Zo)) : A("", !0),
      y(e).allowShowZoomMenu ? (L(), C("div", {
        key: 1,
        title: "\u653E\u5927",
        class: "c-mb-button",
        onClick: h[1] || (h[1] = (f) => r(20))
      }, Jo)) : A("", !0),
      y(e).allowShowZoomMenu ? (L(), C("div", {
        key: 2,
        class: "c-current-zoom",
        onDblclick: a
      }, Ce(y(e).canvasZoom) + "%", 33)) : A("", !0),
      y(e).allowShowZoomMenu ? (L(), C("div", {
        key: 3,
        title: "\u7F29\u5C0F",
        class: "c-mb-button",
        style: { "margin-top": "0px" },
        onClick: h[2] || (h[2] = (f) => r(-20))
      }, Ko)) : A("", !0),
      y(e).allowAutoLayoutIfSupport && y(e).isNeedShowAutoLayoutButton ? (L(), C("div", {
        key: 4,
        title: y(e).autoLayouting ? "\u70B9\u51FB\u505C\u6B62\u81EA\u52A8\u5E03\u5C40" : "\u70B9\u51FB\u5F00\u59CB\u81EA\u52A8\u8C03\u6574\u5E03\u5C40",
        class: U([{ "c-mb-button-on": y(e).autoLayouting }, "c-mb-button"]),
        onClick: o
      }, [
        y(e).autoLayouting ? (L(), C("svg", ii, si)) : (L(), C("svg", ei, oi))
      ], 10, Qo)) : A("", !0),
      y(e).allowShowRefreshButton ? (L(), C("div", {
        key: 5,
        title: "\u5237\u65B0",
        class: "c-mb-button",
        onClick: t
      }, li)) : A("", !0),
      y(e).allowShowDownloadButton ? (L(), C("div", {
        key: 6,
        title: "\u4E0B\u8F7D\u56FE\u7247",
        class: "c-mb-button",
        onClick: i
      }, ci)) : A("", !0),
      F(l.$slots, "default"),
      hi
    ], 2));
  }
}), di = {
  key: 0,
  class: "rel-operate"
}, fi = { style: { position: "relative" } }, ui = /* @__PURE__ */ Z({
  __name: "GraphOperateStuff",
  setup(n) {
    const s = K(Q), e = P(() => s.options);
    return (t, o) => y(e) && (y(e).creatingNodePlot || y(e).creatingSelection) ? (L(), C("div", di, [
      b("div", fi, [
        y(e).creatingNodePlot && y(e).showTemplateNode ? (L(), ae(nt, {
          key: 0,
          "node-props": y(e).newNodeTemplate
        }, {
          node: ne(() => [
            F(t.$slots, "node-template", {
              node: y(e).newNodeTemplate
            })
          ]),
          _: 3
        }, 8, ["node-props"])) : A("", !0),
        y(e).creatingSelection ? (L(), C("div", {
          key: 1,
          class: "rel-selection",
          style: X({
            left: y(e).selectionView.x + "px",
            top: y(e).selectionView.y + "px",
            width: y(e).selectionView.width + "px",
            height: y(e).selectionView.height + "px"
          })
        }, null, 4)) : A("", !0)
      ])
    ])) : A("", !0);
  }
}), pi = /* @__PURE__ */ b("div", { class: "rel-graph-loading-message" }, [
  /* @__PURE__ */ b("svg", {
    class: "c-graph-loading-icon",
    "aria-hidden": "true"
  }, [
    /* @__PURE__ */ b("use", { "xlink:href": "#icon-lianjiezhong" })
  ]),
  /* @__PURE__ */ je(" Loading... ")
], -1), yi = [
  pi
], gi = /* @__PURE__ */ Z({
  __name: "GraphLoading",
  setup(n) {
    const s = K(Q), e = P(() => s.options), t = (o) => {
      s.instance.clickGraphMask(o);
    };
    return (o, i) => (L(), C("div", {
      class: U(["rel-graph-loading", { "rel-graph-loading-hide": !y(e).graphLoading }]),
      onClick: t
    }, yi, 2));
  }
}), Me = /* @__PURE__ */ Z({
  __name: "index",
  props: {
    options: null,
    relationGraphCore: null,
    onNodeClick: { type: Function },
    onNodeExpand: { type: Function },
    onNodeCollapse: { type: Function },
    onLineClick: { type: Function },
    onImageDownload: { type: Function },
    onImageSaveAsFile: { type: Function },
    beforeChangeLayout: { type: Function },
    onNodeDragEnd: { type: Function },
    onNodeDragging: { type: Function },
    onCanvasDragEnd: { type: Function },
    onContextmenu: { type: Function },
    onCanvasClick: { type: Function },
    onCanvasSelectionEnd: { type: Function },
    onZoomEnd: { type: Function }
  },
  emits: [
    "on-node-click",
    "on-node-expand",
    "on-node-collapse",
    "on-line-click",
    "on-download-excel",
    "on-image-download",
    "on-image-save-as-file"
  ],
  setup(n, { expose: s }) {
    const e = n;
    u("appendIconSvg:", xt);
    const t = ue(), o = Re({
      rootNode: void 0,
      nodes: [],
      links: [],
      elementLines: []
    }), i = Re({
      instance: void 0,
      options: Ee({}),
      allLineColors: []
    });
    Ge(qe, o), Ge(Q, i), u("---------------------------graph mounted---------------------------"), xe(() => {
      Lt("vue3"), u("---------------------------graph mounted---------------------------");
      const r = e.relationGraphCore ? new e.relationGraphCore(e.options, Ye(e)) : new it(e.options, Ye(e));
      i.instance = yt(r), r.setReactiveDataVue3(o, i), r.setDom(t.value), r.ready(), ce && ce.on && ce.on("change", a);
    }), Ze(() => {
      ce && ce.off && ce.off("change", a);
    });
    const a = () => {
      i.instance.fullscreen(ce.isFullscreen);
    };
    return s({
      onFullscreen() {
        a();
      },
      getInstance() {
        return i.instance;
      },
      async setOptions(r, c = !1) {
        await i.instance.setOptions(r, c);
      },
      async setJsonData(r, c, l) {
        arguments.length === 2 && typeof c == "function" && (l = c, c = !0), await i.instance.setJsonData(r, !0), await i.instance.refresh(!1), l && l(i.instance);
      },
      async appendJsonData(r, c, l) {
        arguments.length === 2 && typeof c == "function" && (l = c, c = !0), await i.instance.appendJsonData(r, !0), l && l(i.instance);
      },
      setLayouter(r) {
        i.instance.setLayouter(r);
      },
      onGraphResize() {
        i.instance.refreshNVAnalysisInfo();
      },
      refresh() {
        i.instance.refresh();
      },
      focusRootNode() {
        i.instance.focusRootNode();
      },
      focusNodeById(r) {
        return i.instance.focusNodeById(r);
      },
      getNodeById(r) {
        return i.instance.getNodeById(r);
      },
      removeNodeById(r) {
        return i.instance.removeNodeById(r);
      },
      getNodes() {
        return i.instance.getNodes();
      },
      getLinks() {
        return i.instance.getLinks();
      },
      getGraphJsonData() {
        return i.instance.getGraphJsonData();
      },
      getGraphJsonOptions() {
        return i.instance.getGraphJsonOptions();
      }
    }), (r, c) => (L(), C("div", {
      ref_key: "seeksRelationGraph$",
      ref: t,
      class: "relation-graph",
      style: { width: "100%", height: "100%" }
    }, [
      i.instance && i.options ? (L(), C(J, { key: 0 }, [
        i.options.showDebugPanel ? (L(), ae(Go, { key: 0 })) : A("", !0),
        i.options.allowShowMiniToolBar === !0 ? F(r.$slots, "tool-bar", { key: 1 }, () => [
          he(st)
        ]) : A("", !0),
        i.options.allowShowMiniView === !0 ? F(r.$slots, "mini-view", { key: 2 }, () => [
          he(Yo)
        ]) : A("", !0),
        F(r.$slots, "graph-plug"),
        he(Fo, null, {
          node: ne(({ node: l }) => [
            F(r.$slots, "node", { node: l })
          ]),
          line: ne(({ line: l, link: h }) => [
            F(r.$slots, "line", {
              line: l,
              link: h
            })
          ]),
          "canvas-plug": ne(() => [
            F(r.$slots, "canvas-plug")
          ]),
          "canvas-plug-above": ne(() => [
            F(r.$slots, "default")
          ]),
          "node-expand-holder": ne(({ nodeProps: l, expandHolderPosition: h, expandButtonClass: f, color: d, expandOrCollapseNode: g }) => [
            F(r.$slots, "node-expand-holder", {
              nodeProps: l,
              expandHolderPosition: h,
              expandButtonClass: f,
              color: d,
              expandOrCollapseNode: g
            })
          ]),
          _: 3
        }),
        he(ui, null, {
          "node-template": ne(({ node: l }) => [
            F(r.$slots, "node-template", { node: l })
          ]),
          _: 3
        }),
        he(gi)
      ], 64)) : A("", !0)
    ], 512));
  }
});
const Ci = it, bi = {
  BaseLayouter: we,
  BidirectionalTreeLayouter: Ke,
  CenterLayouter: et,
  CircleLayouter: tt,
  FixedLayouter: ot,
  ForceLayouter: Le
}, ki = Wt, Mi = Rt, Si = Ot, Oi = kt, Ei = Qe, zi = Et, Ni = qt;
Me.install = (n) => {
  n.component("RelationGraph", Me), n.component("SeeksRelationGraph", Me);
};
const Pi = Me, $i = st, Bi = Je;
export {
  $i as GraphToolBar,
  wi as INSTALLED_KEY,
  bi as Layout,
  Ni as RGEffectUtils,
  Ei as RGGraphMath,
  ki as RGLayouterUtils,
  Si as RGLinkUtils,
  Oi as RGNodeUtils,
  zi as RGNodesAnalyticUtils,
  Mi as RGOptionsUtils,
  Pi as RelationGraph,
  Ci as RelationGraphCore,
  Me as default,
  qe as graphDataKey,
  Li as graphInstanceKey,
  Q as graphKey,
  Bi as version
};
